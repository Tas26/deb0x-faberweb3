{"version":3,"sources":["components/App/Snackbar.tsx","components/App/Encrypt.tsx","ethereum/deb0x.js","connectors.ts","hooks.ts","photos/icons/ios-compose.svg","photos/icons/trophy.svg","components/App/Spinner.tsx","ethereum/deb0xerc20.js","components/Common/AccountName.tsx","components/Contexts/ThemeContext.tsx","components/ThemeSetter.tsx","components/Contexts/ContactsContext.tsx","components/App/PermanentDrawer.tsx","components/Common/ScreenSize.tsx","components/App/Stepper.tsx","components/ContactsSetter.tsx","components/App/Decrypt.tsx","photos/icons/token.svg","components/App/Stake.tsx","components/App/Sent.tsx","components/Contexts/ThemeProvider.tsx","App.tsx","components/Contexts/ContactsProvider.tsx","photos/icons/elephant.svg","photos/icons/logo-green.svg","reportWebVitals.ts","index.tsx"],"names":["Alert","forwardRef","props","ref","elevation","variant","SnackbarNotification","useState","severity","state","open","message","setState","useEffect","console","log","handleClose","event","reason","autoHideDuration","onClose","sx","width","deb0xAddress","ethUtil","require","client","create","host","port","protocol","Encrypt","useWeb3React","account","library","encryptionKey","textToEncrypt","setTextToEncrypt","encryptionKeyInitialized","setEncryptionKeyInitialized","senderAddress","setSenderAddress","notificationState","setNotificationState","messageSessionSentCounter","setMessageSessionSentCounter","loading","setLoading","estimatedReward","addressList","setAddressList","setError","JSON","parse","localStorage","getItem","input","isInList","address","includes","encryptText","messageToEncrypt","destinationAddresses","a","getSigner","signer","cids","recipients","flat","getAddress","push","deb0xContract","Deb0x","getKey","destinationAddressEncryptionKey","encryptedMessage","bufferToHex","Buffer","from","stringify","encrypt","publicKey","data","version","add","path","overrides","value","ethers","utils","parseUnits","send","tx","wait","then","result","catch","error","match","getPublicEncryptionKey","key","EditorState","createEmpty","editorState","setEditorState","sendContent","draftToHtml","convertToRaw","getCurrentContent","className","component","noValidate","autoComplete","id","placeholder","onPaste","evt","preventDefault","addresses","clipboardData","getData","toBeAdded","filter","onKeyDown","trim","isAddress","isValid","onChange","target","direction","spacing","margin","map","label","onDelete","item","i","deleteIcon","onEditorStateChange","toolbarClassName","wrapperClassName","editorClassName","display","alignItems","justifyContent","flexDirection","mr","endIcon","marginLeft","marginTop","disabled","onClick","abi","signerOrProvider","Contract","injected","InjectedConnector","supportedChainIds","network","NetworkConnector","urls","defaultChainId","useEagerConnect","activate","active","tried","setTried","isAuthorized","undefined","Spinner","color","rest","height","viewBox","xmlns","stroke","fill","fillRule","transform","strokeWidth","strokeOpacity","cx","cy","r","d","attributeName","type","to","dur","repeatCount","formatAccountName","substring","length","initialThemeState","theme","setTheme","_value","ThemeContext","createContext","ThemeSetter","useContext","checked","setChecked","Switch","ConnectorNames","initialContacts","contacts","name","setContacts","_values","ContactsContext","deb0xERC20Address","connectorsByName","Injected","PermanentDrawer","context","connector","chainId","deactivate","activatingConnector","setActivatingConnector","selectedIndex","setSelectedIndex","ensName","setEnsName","userUnstakedAmount","setUserUnstakedAmount","anchorEl","setAnchorEl","Boolean","dimensions","windowSize","setWindowSize","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","ScreenSize","setUnstakedAmount","deb0xERC20Contract","Deb0xERC20","balanceOf","balance","formatEther","lookupAddress","handleClick","currentTarget","handleChange","text","index","removeItem","checkENS","setDisplay","CustomEvent","document","dispatchEvent","Snackbar","Box","CssBaseline","AppBar","Button","currentConnector","activating","connected","toLowerCase","Popper","List","ListItem","Drawer","anchor","button","selected","ListItemIcon","src","trophy","ListItemText","primary","contact","displayAddress","IconButton","size","navigator","clipboard","writeText","fontSize","setItem","href","steps","HorizontalLinearStepper","setEncryptionKey","activeStep","setActiveStep","whichStepFailed","setStepFailed","handleNext","prevActiveStep","provider","request","method","params","setKey","onDeboxInitialization","maxWidth","Stepper","labelProps","optional","Typography","Step","StepLabel","pt","LoadingButton","ContactsSetter","setName","setOpen","Add","Modal","e","readOnly","Decrypt","decrypt","decryptedMessage","fetchMessage","axios","get","Message","encryptMessage","fetchedMessage","setMessage","messageTime","isDecrypted","setIsDecrypted","sender","setPreviousIndex","hideMessage","previousIndex","disablePadding","secondaryAction","edge","ListItemButton","decryptMessage","dangerouslySetInnerHTML","__html","GetMessages","fetchedMessages","setFetchedMessages","fetchMessageSenders","senderAddresses","cidsPromises","fetchMessages","Promise","all","encryptedMessagesPromisesArray","cidArray","encryptedMessagesPromises","cid","promise","encryptedMessages","processMessages","CircularProgress","gutterBottom","Pagination","count","Stake","RewardsPanel","rewardsUnclaimed","setRewardsUnclaimed","feeSharePercentage","setFeeSharePercentage","earnedNative","unclaimedRewards","parseFloat","balanceERC20","totalSupply","feeShare","Math","round","toFixed","toString","getRewardNative","rewardsAccrued","Card","CardContent","CardActions","StakeUnstake","alignment","setAlignment","userStakedAmount","setUserStakedAmount","totalStaked","setTotalStaked","amountToUnstake","setAmountToUnstake","amountToStake","setAmountToStake","approved","setApproved","allowance","approve","parseEther","unStakeERC20","stakeERC20","setStakedAmount","totalAmountStaked","setApproval","ToggleButtonGroup","exclusive","newAlignment","ToggleButton","Divider","Grid","container","TextField","TotalStaked","token","Sent","setRecipients","recipientsTemp","recipientsFiltered","recipient","border","marginBottom","Tooltip","title","placement","Stack","Chip","fetchSentMessages","sentMessages","sentMessagesRetrieved","messages","showFirstButton","showLastButton","ThemeProvider","children","savedThemeLocal","Provider","ContactsProvider","savedContacts","Network","getErrorMessage","NoEthereumProviderError","UnsupportedChainIdError","UserRejectedRequestErrorInjected","getLibrary","providers","Web3Provider","pollingInterval","App","selectedOption","setSelectedOption","suppress","ethereum","on","handleConnect","handleChainChanged","handleAccountsChanged","accounts","handleNetworkChanged","networkId","removeListener","useInactiveListener","newValue","style","textAlign","mt","elephant","logoGreen","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b568eb5e.chunk.js","sourcesContent":["import { useState, forwardRef, useEffect } from 'react'\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\n\nconst Alert = forwardRef<HTMLDivElement, AlertProps>(function Alert(\n  props,\n  ref,\n) {\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nexport default function SnackbarNotification(props: any) {\n\n  const [state, setState] = useState({ severity: props.state.severity, open: props.state.open, message: props.state.message })\n\n  useEffect(() => {\n    console.log(props)\n    setState({severity: props.state.severity, open: props.state.open, message: props.state.message})\n  }, [props])\n\n  const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setState({\n      message: state.message, open: false,\n      severity: state.severity\n    })\n  };\n\n  return (\n    <Snackbar open={state.open} autoHideDuration={6000} onClose={handleClose}>\n      <Alert onClose={handleClose} severity={state.severity} sx={{ width: '100%' }}>\n        {state.message}\n      </Alert>\n    </Snackbar>\n  )\n}","import { useState, useEffect, useContext } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { encrypt } from '@metamask/eth-sig-util'\nimport Deb0x from \"../../ethereum/deb0x\"\nimport { create } from 'ipfs-http-client'\nimport SendIcon from '@mui/icons-material/Send';\nimport Chip from '@mui/material/Chip';\nimport Stack from '@mui/material/Stack';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport {\n    Box, TextField, Typography\n} from '@mui/material';\nimport { ethers } from \"ethers\";\nimport SnackbarNotification from './Snackbar';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport '../../componentsStyling/encrypt.scss';\nimport { EditorState, convertToRaw } from 'draft-js';\nimport draftToHtml from 'draftjs-to-html';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport { Editor } from 'react-draft-wysiwyg';\n\nconst deb0xAddress = \"0x13dA6EDcdD7F488AF56D0804dFF54Eb17f41Cc61\";\nconst ethUtil = require('ethereumjs-util')\n\n\nconst client = create({\n    host: 'ipfs.infura.io',\n    port: 5001,\n    protocol: 'https'\n})\n\nexport function Encrypt(): any {\n    const { account, library } = useWeb3React()\n    const [encryptionKey, setKey] = useState('')\n    const [textToEncrypt, setTextToEncrypt] = useState('')\n    const [encryptionKeyInitialized, setEncryptionKeyInitialized] = useState('')\n    const [senderAddress, setSenderAddress] = useState('')\n    const [notificationState, setNotificationState] = useState({})\n    const [messageSessionSentCounter, setMessageSessionSentCounter] = useState(0)\n    const [loading, setLoading] = useState(false)\n    const [estimatedReward, setEstimatedReward] = useState(\"9.32\");\n    const [addressList, setAddressList] = useState<string[]>([])\n    const [error, setError] = useState<string | null>(null);\n    const [ input, setInput ] = useState(JSON.parse(localStorage.getItem('input') || 'null'));\n    \n\n    useEffect(() => {\n        if(input !== null && input.match(/^0x[a-fA-F0-9]{40}$/g))\n            addressList.push(input)\n    }, []);\n\n    useEffect(() => {\n        if (!encryptionKeyInitialized) {\n            getPublicEncryptionKey()\n        }\n    }, []);\n\n    function handleKeyDown(evt: any) {\n        if ([\"Enter\", \"Tab\", \",\"].includes(evt.key)) {\n            evt.preventDefault();\n\n            var value = senderAddress.trim();\n\n            if (value && isValid(value)) {\n                setAddressList([...addressList, senderAddress])\n                setSenderAddress(\"\")\n            }\n        }\n    }\n\n    function handleChange(evt: any) {\n        setSenderAddress(evt.target.value)\n        setError(null)\n    }\n\n    function handleDelete(item: any) {\n        setAddressList(addressList.filter(i => i !== item))\n    }\n\n    function handlePaste(evt: any) {\n        evt.preventDefault()\n\n        var paste = evt.clipboardData.getData(\"text\")\n        var addresses = paste.match(/^0x[a-fA-F0-9]{40}$/g)\n\n        if (addresses) {\n            var toBeAdded = addresses.filter((address: any) => !isInList(address))\n\n            setAddressList([...addressList, ...toBeAdded])\n        }\n    }\n\n    function isValid(address: any) {\n        let error = null;\n\n        if (isInList(address)) {\n            error = `${address} has already been added.`;\n        }\n\n        if (!isAddress(address)) {\n            error = `${address} is not a valid ethereum address.`;\n        }\n\n        if (error) {\n            setNotificationState({\n                message: error, open: true,\n                severity: \"error\"\n            })\n            setError(error);\n\n            return false;\n        }\n\n        return true;\n    }\n\n    function isInList(address: any) {\n        return addressList.includes(address);\n    }\n\n    function isAddress(address: any) {\n        return ethers.utils.isAddress(address);\n    }\n\n    async function encryptText(messageToEncrypt: any, destinationAddresses: any)\n    {\n        setLoading(true);\n        const signer = await library.getSigner(0);\n        let cids:any = []\n        let recipients = destinationAddresses.flat()\n        recipients.push(await signer.getAddress())\n        const deb0xContract = Deb0x(signer, deb0xAddress);\n        for (let address of recipients) {\n            console.log(recipients, address)\n            const destinationAddressEncryptionKey = await deb0xContract.getKey(address);\n            const encryptedMessage = ethUtil.bufferToHex(\n                Buffer.from(\n                    JSON.stringify(\n                        encrypt({\n                            publicKey: destinationAddressEncryptionKey,\n                            data: messageToEncrypt,\n                            version: 'x25519-xsalsa20-poly1305'\n                        }\n                        )\n                    ),\n                    'utf8'\n                )\n            )\n            const message = await client.add(encryptedMessage)\n            cids.push(message.path)\n        }\n\n        try {\n            const overrides = \n                { value: ethers.utils.parseUnits(\"0.001\", \"ether\"), }\n            const tx = await deb0xContract.send(recipients, cids, overrides)\n\n            await tx.wait()\n                .then((result: any) => {\n                    setNotificationState({\n                        message: \"Message was succesfully sent.\",\n                        open: true,\n                        severity: \"success\"\n                    })\n\n                    let count = messageSessionSentCounter + 1;\n                    setMessageSessionSentCounter(count);\n                })\n                .catch((error: any) => {\n                    setNotificationState({\n                        message: \"Message couldn't be sent!\",\n                        open: true,\n                        severity: \"error\"\n                    })\n                    console.log(error)\n                })\n        } catch (error: any) {\n            console.log(error)\n            setNotificationState({\n                message: \"You rejected the transaction. Message was not sent.\",\n                open: true,\n                severity: \"info\"\n            })\n        }\n\n        setTextToEncrypt('');\n        setSenderAddress(\"\");\n        setAddressList([])\n        setLoading(false);\n\n    }\n\n    async function initializeDeb0x() {\n        const signer = await library.getSigner(0);\n        const deb0xContract = Deb0x(signer, deb0xAddress);\n        const tx = await deb0xContract.setKey(encryptionKey);\n        const receipt = await tx.wait();\n\n        return receipt.transactionHash;\n    }\n\n    async function getEncryptionKey() {\n        library.provider.request({\n            method: 'eth_getEncryptionPublicKey',\n            params: [account],\n        })\n            .then((result: any) => {\n                setKey(result);\n            });\n    }\n\n    const getPublicEncryptionKey = async () => {\n        const deb0xContract = Deb0x(library, deb0xAddress)\n        const key = await deb0xContract.getKey(account)\n        console.log(key)\n        console.log(encryptionKey)\n        setEncryptionKeyInitialized(key)\n    }\n    const [editorState, setEditorState] = useState(() =>\n        EditorState.createEmpty()\n    );\n\n    const handleEditorChange = (state: any) => {\n        setEditorState(state);\n        sendContent();\n    };\n\n    const sendContent = () => {\n        setTextToEncrypt(draftToHtml(convertToRaw(editorState.getCurrentContent())));\n    };\n\n    return (\n        <>\n            <SnackbarNotification state={notificationState} \n                setNotificationState={setNotificationState} />\n            <div className=\"form-container container\">\n                <Box component=\"form\"\n                    noValidate\n                    autoComplete=\"off\">\n                    <TextField id=\"standard-basic\"\n                        placeholder=\"Type or paste addresses and press `Enter`...\"\n                        value={senderAddress}\n                        onPaste={handlePaste}\n                        onKeyDown={handleKeyDown}\n                        onChange={handleChange} />\n                    <Stack direction=\"row\" spacing={1}>\n                        <Box sx={{ width: '100%', margin: '0 auto' }}\n                            className=\"address-list\">\n                            {\n                                addressList.map((address: any) => {\n                                    return (\n                                        <Chip\n                                            key={address}\n                                            label={address}\n                                            onDelete={() => handleDelete(address)}\n                                            deleteIcon={<DeleteIcon />}\n                                        />\n                                    )\n                                })\n                            }\n                        </Box>\n                    </Stack>\n                    <Editor\n                        editorState={editorState}\n                        onEditorStateChange={handleEditorChange}\n                        toolbarClassName=\"toolbar\"\n                        wrapperClassName=\"wrapper\"\n                        editorClassName=\"editor\"\n                    />\n                    <div className=\"editor-overlay\"></div>\n\n                    { messageSessionSentCounter === 0 ?\n                        <Box sx={{ display: \"flex\", \n                            alignItems: \"end\", \n                            justifyContent: \"flex-end\", \n                            flexDirection: \"column\", \n                            mr: 1 }}>\n                            {textToEncrypt != '' && senderAddress != '' ?\n                                <Box>\n                                    <Typography>\n                                        <small>\n                                            est. rewards: {estimatedReward} DBX\n                                        </small>\n                                    </Typography>\n                                </Box> : \n                                null\n                            }\n\n                            <LoadingButton className=\"send-btn\" \n                                loading={loading} endIcon={ loading ? null : <SendIcon />}\n                                sx={{ marginLeft: 2, marginTop: 1 }}\n                                disabled={textToEncrypt == '' || addressList == []}\n                                onClick={() => \n                                    encryptText(textToEncrypt, addressList)\n                                } >\n                                { loading ? null : 'Send'}\n                            </LoadingButton>\n                        </Box>\n                        :\n                        <Box sx={{ display: \"flex\", \n                            alignItems: \"end\", \n                            justifyContent: \"flex-end\",\n                            flexDirection: \"column\",\n                            mr: 1 }}>\n                            {textToEncrypt != '' && senderAddress != '' ?\n                                <Box>\n                                    <Typography>\n                                        <small>\n                                            est. rewards: {estimatedReward} DBX\n                                        </small>\n                                    </Typography>\n                                </Box> : \n                                null\n                            }\n\n                            <LoadingButton className=\"send-btn\" \n                                loading={loading} variant=\"contained\" \n                                endIcon={ <SendIcon /> }\n                                sx={{ marginLeft: 2, marginTop: 1 }}\n                                disabled={textToEncrypt === '' || senderAddress === ''}\n                                onClick={() => encryptText(textToEncrypt, senderAddress)}>\n                                Send another message\n                            </LoadingButton>\n                        </Box>\n                    }\n                </Box>\n            </div>\n        </>\n    )\n}","import { sign } from \"crypto\";\nimport { Contract, ethers } from \"ethers\";\n\nconst {abi} = require(\"./Deb0x.json\");\n\nexport default (signerOrProvider, address) => {\n    return new ethers.Contract(address, abi, signerOrProvider);\n}","\nimport { InjectedConnector } from '@web3-react/injected-connector'\nimport { NetworkConnector } from '@web3-react/network-connector'\n\n// const POLLING_INTERVAL = 12000\nconst RPC_URLS: { [chainId: number]: string } = {\n    4: 'https://rinkeby.infura.io/v3/84842078b09946638c03157f83405213'\n}\n\nexport const injected = new InjectedConnector({ supportedChainIds: [4] })\n\nexport const network = new NetworkConnector({\n    urls: { 4: RPC_URLS[4] },\n    defaultChainId: 4\n  })","import { useState, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\n\nimport { injected } from './connectors'\n\nexport function useEagerConnect() {\n  const { activate, active } = useWeb3React()\n\n  const [tried, setTried] = useState(false)\n\n  useEffect(() => {\n    injected.isAuthorized().then((isAuthorized: boolean) => {\n      if (isAuthorized) {\n        activate(injected, undefined, true).catch(() => {\n          setTried(true)\n        })\n      } else {\n        setTried(true)\n      }\n    })\n  }, [activate]) // intentionally only running on mount (make sure it's only mounted once :))\n\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n  useEffect(() => {\n    if (!tried && active) {\n      setTried(true)\n    }\n  }, [tried, active])\n\n  return tried\n}\n\nexport function useInactiveListener(suppress: boolean = false) {\n  const { active, error, activate } = useWeb3React()\n\n  useEffect((): any => {\n    const { ethereum } = window as any\n    if (ethereum && ethereum.on && !active && !error && !suppress) {\n      const handleConnect = () => {\n        console.log(\"Handling 'connect' event\")\n        activate(injected)\n      }\n      const handleChainChanged = (chainId: string | number) => {\n        console.log(\"Handling 'chainChanged' event with payload\", chainId)\n        activate(injected)\n      }\n      const handleAccountsChanged = (accounts: string[]) => {\n        console.log(\"Handling 'accountsChanged' event with payload\", accounts)\n        if (accounts.length > 0) {\n          activate(injected)\n        }\n      }\n      const handleNetworkChanged = (networkId: string | number) => {\n        console.log(\"Handling 'networkChanged' event with payload\", networkId)\n        activate(injected)\n      }\n\n      ethereum.on('connect', handleConnect)\n      ethereum.on('chainChanged', handleChainChanged)\n      ethereum.on('accountsChanged', handleAccountsChanged)\n      ethereum.on('networkChanged', handleNetworkChanged)\n\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener('connect', handleConnect)\n          ethereum.removeListener('chainChanged', handleChainChanged)\n          ethereum.removeListener('accountsChanged', handleAccountsChanged)\n          ethereum.removeListener('networkChanged', handleNetworkChanged)\n        }\n      }\n    }\n  }, [active, error, suppress, activate])\n}","export default __webpack_public_path__ + \"static/media/ios-compose.9c72b916.svg\";","export default __webpack_public_path__ + \"static/media/trophy.2c553cfd.svg\";","// <!-- By Sam Herbert (@sherb), for everyone. More @ http://goo.gl/7AJzbL -->\nexport function Spinner({ color, ...rest }: any) {\n    return (\n        <svg width=\"38\" height=\"38\" viewBox=\"0 0 38 38\" \n            xmlns=\"http://www.w3.org/2000/svg\" stroke={color} {...rest}>\n            <g fill=\"none\" fillRule=\"evenodd\">\n                <g transform=\"translate(1 1)\" strokeWidth=\"2\">\n                    <circle strokeOpacity=\".5\" cx=\"18\" cy=\"18\" r=\"18\" />\n                    <path d=\"M36 18c0-9.94-8.06-18-18-18\">\n                    <animateTransform\n                        attributeName=\"transform\"\n                        type=\"rotate\"\n                        from=\"0 18 18\"\n                        to=\"360 18 18\"\n                        dur=\"1s\"\n                        repeatCount=\"indefinite\" />\n                    </path>\n                </g>\n            </g>\n        </svg>\n    )\n}","import { ethers } from \"ethers\";\n\nconst {abi} = require(\"./Deb0xERC20.json\");\n\nexport default (signerOrProvider, address) => {\n    return new ethers.Contract(address, abi, signerOrProvider);\n}","export default function formatAccountName(account: string)\n{\n    return `${account.substring(0, 5)}...${account.substring(account.length - 4)}`\n}","import { createContext } from \"react\";\n\nexport const initialThemeState = {\n  theme: \"classic\",\n  setTheme: (_value: string) => {}\n};\n\nconst ThemeContext = createContext(initialThemeState);\nexport default ThemeContext;","import Switch from \"@mui/material/Switch\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport '../componentsStyling/themeSetter.scss';\n\nimport ThemeContext from \"./Contexts/ThemeContext\";\n\nexport default function ThemeSetter() {\n    const useTheme = () => useContext(ThemeContext);\n    const { theme, setTheme } = useTheme()!;\n    const [checked, setChecked] = useState<boolean>()\n\n    useEffect(() => {\n        if(theme === \"classic\") {\n            setChecked(true);\n        } else {\n            setChecked(false);\n        }\n    }, [])\n\n    const handleChange = (event: any) => {\n        setChecked(event.target.checked);\n        event.target.checked ? setTheme(\"classic\") : setTheme(\"dark\")\n    };\n\n  return (\n    <Switch\n        className=\"theme-switcher\"\n        checked={checked}\n        onChange={handleChange}\n        value=\"checked\"\n    />\n  );\n}\n\nconst themeOptions = [{ value: \"classic\" }, { value: \"dark\" }];","import { createContext } from \"react\";\n\nexport const initialContacts = {\n    contacts: [{\n        name: \"Alex Males\",\n        address: \"0x31dcF3b5F43e7017425E25E5A0F006B6f065c349\"\n    }],\n    setContacts: (_values: any) => {}\n}\n\nconst ContactsContext = createContext(initialContacts);\nexport default ContactsContext;\n","import React, { useState, useEffect, useContext } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport Box from '@mui/material/Box';\nimport Drawer from '@mui/material/Drawer';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport AppBar from '@mui/material/AppBar';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\nimport InboxIcon from '@mui/icons-material/MoveToInbox';\nimport SendIcon from '@mui/icons-material/Send';\nimport add from '../../photos/icons/ios-compose.svg';\nimport trophy from '../../photos/icons/trophy.svg';\nimport Button from '@mui/material/Button'\nimport Popper from '@mui/material/Popper'\nimport { injected } from '../../connectors';\nimport { Spinner } from './Spinner'\nimport { useEagerConnect } from '../../hooks';\nimport IconButton from \"@mui/material/IconButton\";\nimport logoDark from \"../../photos/logo-dark.svg\";\nimport logoLight from \"../../photos/logo-light.svg\";\nimport GitHubIcon from '@mui/icons-material/GitHub';\nimport Deb0xERC20 from \"../../ethereum/deb0xerc20\"\nimport { ethers } from \"ethers\";\nimport formatAccountName from \"../Common/AccountName\";\nimport \"../../componentsStyling/permanentDrawer.scss\";\nimport ThemeSetter from '../ThemeSetter';\nimport ScreenSize from '../Common/ScreenSize';\nimport ContactsContext from '../Contexts/ContactsContext';\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\nimport SnackbarNotification from './Snackbar';\n\nconst deb0xERC20Address = \"0xEde2f177d6Ae8330860B6b37B2F3D767cd2630fe\"\nenum ConnectorNames { Injected = 'Injected' };\n\nconst connectorsByName: { [connectorName in ConnectorNames]: any } = {\n    [ConnectorNames.Injected]: injected\n}\n\nexport function PermanentDrawer(props: any): any {\n    const context = useWeb3React()\n    const { connector, library, chainId, account, activate, deactivate, active, error } = context\n    const [activatingConnector, setActivatingConnector] = useState<any>()\n    const triedEager = useEagerConnect()\n    const [selectedIndex, setSelectedIndex] = useState<any>(1);\n    const [searchBarValue, setSearchBarValue] = useState<any>(\"search\");\n    const [ensName, setEnsName] = useState<any>(\"\");\n    // const [balance, setBalance] = useState<any>(\"8.13\");\n    const [userUnstakedAmount,setUserUnstakedAmount] = useState<any>(0);\n    const menuItems = ['Compose', 'Deb0x', 'Stake', 'Sent'];\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n    const open = Boolean(anchorEl);\n    const id = open ? 'simple-popper' : undefined;\n    const dimensions = ScreenSize();\n    const useContacts = () => useContext(ContactsContext);\n    const { contacts, setContacts } = useContacts()!;\n    const [notificationState, setNotificationState] = useState({});\n\n    if(library){\n        checkENS();\n        setUnstakedAmount();\n    }\n\n    useEffect(() => {\n        if (activatingConnector && activatingConnector === connector) {\n            setActivatingConnector(undefined)\n        }\n    }, [activatingConnector, connector])\n\n    async function setUnstakedAmount() {\n        const deb0xERC20Contract = Deb0xERC20(library, deb0xERC20Address)\n        if(account){\n            const balance = await deb0xERC20Contract.balanceOf(account)\n            setUserUnstakedAmount(ethers.utils.formatEther(balance))\n        }\n    }\n\n    async function checkENS(){\n \n        var name = await library.lookupAddress(account);\n        if(name !== null)\n        {   \n            setEnsName(name);\n        }\n    }\n\n    useEffect(() => {\n        setUnstakedAmount();\n    },[userUnstakedAmount])\n\n    function handleClick (event: React.MouseEvent<HTMLElement>) {\n        setAnchorEl(anchorEl ? null : event.currentTarget);\n    };\n\n    function handleChange(text: any, index: any) {\n        setSelectedIndex(index)\n        props.onChange(text)\n        if(index !== 0)\n            localStorage.removeItem('input')\n    }\n\n    const [display, setDisplay] = useState();\n\n    function displayAddress(index: any) {\n        setNotificationState({});\n        display === index ? setDisplay(undefined) : setDisplay(index);\n    }\n\n    const event = new CustomEvent('localdatachanged');\n    document.dispatchEvent(event);\n\n    return (\n        <>\n            <SnackbarNotification state={notificationState} \n                setNotificationState={setNotificationState} />\n            <Box sx={{ display: 'flex' }}>\n                <CssBaseline />\n                <AppBar className=\"app-bar--top\">\n                    <Box className=\"main-menu--right\">\n                    { account  ? \n                        <>\n                            {/* <Paper component=\"form\">\n                                <InputBase\n                                    placeholder=\"Search messages\"\n                                    inputProps={{ \"aria-label\": \"search\" }}\n                                    className=\"search-input\" />\n                                <IconButton type=\"submit\" aria-label=\"search\">\n                                    <SearchIcon />\n                                </IconButton>\n                            </Paper> */}\n                            <Button variant =\"contained\"\n                                    onClick={() => handleChange(\"Stake\", 2)}>\n                                {userUnstakedAmount} DBX\n                            </Button>\n                        </>\n                        : \n                        null }\n                    \n                    { (() =>  {\n                        const currentConnector = connectorsByName[ConnectorNames.Injected]\n                        const activating = currentConnector === activatingConnector\n                        const connected = currentConnector === connector\n                        const disabled = !triedEager || !!activatingConnector || connected || !!error\n\n                        return (\n                            <Button variant=\"contained\"\n                                key={ConnectorNames.Injected}\n                                aria-describedby={id}\n                                onClick={!connected ? \n                                    () => {\n                                        setActivatingConnector(currentConnector)\n                                        activate(currentConnector)\n                                    } : \n                                    handleClick\n                                }>\n                                \n                                { activating ? \n                                    <Spinner color={'black'} /> :\n                                    !connected ? \n                                        \"Connect Wallet\" :\n                                        <span>\n                                            {account === undefined ? \n                                                'Unsupported Network' : \n                                                account ? \n                                                    ensName === \"\" ? \n                                                        `${formatAccountName(account)}` :\n                                                        `${ensName.toLowerCase()} \n                                                        (${formatAccountName(account)})`\n                                                : ''}\n                                        </span>\n                                }\n                            </Button>\n                        )\n                    }) ()}\n\n                        <ThemeSetter />\n                    </Box>\n                </AppBar>\n                <Popper className=\"popper\" id={id} open={open} anchorEl={anchorEl}>\n                    <List>\n                        \n                        <ListItem className='logout'>\n                            <Button \n                                onClick={(event: any) => {\n                                    handleClick(event)\n                                    deactivate()\n                                }}\n                                className=\"logout-btn\">\n                                Logout \n                            </Button>\n                        </ListItem>\n                    </List>\n                </Popper>\n                <Drawer variant=\"permanent\"\n                    anchor={dimensions.width > 768 ? 'left' : 'bottom'}\n                    className=\"side-menu\">\n                    <div className=\"image-container\">\n                        <div className=\"img\"></div>\n                    </div>\n                    <List className=\"menu-list\">\n                        {menuItems.map((text, index) => (\n                            <>\n                                \n                                <ListItem button key={text} \n                                    selected={selectedIndex === index} \n                                    onClick={() => handleChange(text, index)}\n                                    className={`list-item ${index === 0 ? \"send-item\" : \"\"}` }>\n                                    <ListItemIcon className=\"icon\" >\n                                        {index === 0 && <img src={add} />}\n                                        {index === 1 && <InboxIcon />}\n                                        {index === 2 && <img src={trophy} />}\n                                        {index === 3 && <SendIcon />}\n                                    </ListItemIcon>\n                                    <ListItemText className=\"text\" primary={text} />\n                                </ListItem>\n                            </>\n                        ))}\n                    </List>\n                    \n                    <div className=\"side-menu--bottom\">\n                        <>\n                            <div className=\"contacts\">\n                                <List>\n                                    {\n                                        contacts.map((contact: any, index: any) => (\n                                                <>\n                                                <ListItem button key={contact.name}\n                                                    className=\"row\">\n                                                    <ListItemText className=\"text col-8\" primary={contact.name}\n                                                        onClick={() => displayAddress(index)} />\n                                                    <div className=\"col-4 buttons\">\n                                                        <IconButton size=\"small\"\n                                                            onClick={() => {\n                                                                    navigator.clipboard.writeText(contact.address);\n                                                                    setNotificationState({\n                                                                        message: \"Address added to clipboard.\",\n                                                                        open: true,\n                                                                        severity: \"success\"\n                                                                    })\n                                                                }}>\n                                                            <ContentCopyIcon fontSize=\"small\" className=\"copy-icon\"/>\n                                                        </IconButton>\n                                                        <IconButton size=\"small\"\n                                                            onClick={() => {\n                                                                setNotificationState({})\n                                                                localStorage.setItem(\"input\", JSON.stringify(contact.address))\n                                                                handleChange(\"Compose\", 0)\n                                                            }}>\n                                                            <SendIcon fontSize=\"small\" className=\"send-icon\"/>\n                                                        </IconButton>\n                                                    </div>\n\n                                                    {display == index ? \n                                                        <ListItem className=\"row contact-item\" key={index}>\n                                                            <ListItemText className=\"text col-8\" primary={contact.address} />\n                                                        </ListItem>\n                                                        : <></>}\n                                                </ListItem>\n                                                </>\n                                        ))\n                                    }\n                                </List>\n                            </div>\n                            <div className=\"content\">\n                                <a href=\"https://github.com/deb0x\" target=\"_blank\">\n                                <GitHubIcon  />\n                                </a>\n                                <a href=\"https://www.deb0x.org\" target=\"_blank\">\n                                    www.deb0x.org\n                                </a>\n                            </div>\n                        </>\n                    </div>\n                </Drawer>\n            </Box>\n        </>\n    );\n}","import React, { useState, useEffect } from 'react'\n\nexport default function useWindowSize() {\n    // Initialize state with undefined width/height so server and client renders match\n    // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n    const [windowSize, setWindowSize] = useState({\n      width: 0,\n      height: 0,\n    });\n    useEffect(() => {\n      // Handler to call on window resize\n      function handleResize() {\n        // Set window width/height to state\n        setWindowSize({\n          width: window.innerWidth,\n          height: window.innerHeight,\n        });\n      }\n      // Add event listener\n      window.addEventListener(\"resize\", handleResize);\n      // Call handler right away so state gets updated with initial window size\n      handleResize();\n      // Remove event listener on cleanup\n      return () => window.removeEventListener(\"resize\", handleResize);\n    }, []); // Empty array ensures that effect is only run on mount\n    return windowSize;\n  }","import {useState, Fragment} from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport Box from '@mui/material/Box';\nimport Stepper from '@mui/material/Stepper';\nimport Step from '@mui/material/Step';\nimport StepLabel from '@mui/material/StepLabel';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport Typography from '@mui/material/Typography';\nimport Deb0x from \"../../ethereum/deb0x\"\nimport SnackbarNotification from './Snackbar';\nimport '../../componentsStyling/stepper.scss';\nconst deb0xAddress = \"0x13dA6EDcdD7F488AF56D0804dFF54Eb17f41Cc61\";\nconst steps = ['Provide public encryption key', 'Initialize Deb0x'];\n\nexport default function HorizontalLinearStepper(props: any) {\n    const { account, library } = useWeb3React()\n    const [encryptionKey, setEncryptionKey] = useState('')\n    const [activeStep, setActiveStep] = useState(0);\n    const [whichStepFailed, setStepFailed] = useState<number | undefined>(undefined)\n    const [loading, setLoading] = useState(false)\n    const [notificationState, setNotificationState] = useState({})\n\n    const handleNext = () => {\n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    };\n\n    async function getEncryptionKey() {\n        setLoading(true)\n\n        library.provider.request({\n            method: 'eth_getEncryptionPublicKey',\n            params: [account],\n        })\n            .then((result: any) => {\n                setEncryptionKey(result);\n                handleNext()\n                setStepFailed(undefined)\n                setLoading(false)\n                \n            })\n            .catch((error: any) => {\n                setNotificationState({message: \"You rejected to provide the public encryption key.\", open: true,\n                severity:\"info\"})\n                setStepFailed(0)\n                setLoading(false)\n            });\n        \n    }\n\n    async function initializeDeb0x() {\n        setLoading(true)\n\n        const signer = await library.getSigner(0)\n\n        const deb0xContract = Deb0x(signer, deb0xAddress)\n\n        try {\n            const tx = await deb0xContract.setKey(encryptionKey)\n\n            tx.wait()\n            .then((result: any) => {\n                setNotificationState({message: \"Deb0x was succesfully initialized.\", open: true,\n                severity:\"success\"})\n                setLoading(false)\n                props.onDeboxInitialization(true)\n                \n            })\n            .catch((error: any) => {\n                setNotificationState({message: \"Deb0x couldn't be initialized!\", open: true,\n                severity:\"error\"})\n                setLoading(false)\n            })\n        } catch(error: any) {\n            setNotificationState({message: \"You rejected the transaction. Deb0x was not initialized.\", open: true,\n                severity:\"info\"})\n                setLoading(false)\n        }\n\n    }\n\n    return (\n        <>\n            <SnackbarNotification state={notificationState} setNotificationState={setNotificationState}/>\n            <Box className=\"stepper-box\" sx={{ width: '100%', maxWidth: 1080 }}>\n                <Stepper activeStep={activeStep} className=\"stepper\">\n                    {steps.map((label, index) => {\n                        const stepProps: { completed?: boolean } = {};\n                        const labelProps: {\n                            optional?: React.ReactNode;\n                            error?: boolean;\n                        } = {};\n                        if (whichStepFailed === index) {\n                            labelProps.optional = (\n                            <Typography variant=\"caption\" color=\"error\">\n                                {(activeStep === 0) ? \"User didn't provide encryption key\" : \"User rejected transaction\"}\n                            </Typography>\n                            );\n                            labelProps.error = true;\n                        }\n                        return (\n                            <Step key={label} {...stepProps}>\n                                <StepLabel {...labelProps} >{label} </StepLabel>\n                            </Step>\n                        );\n                    })}\n                </Stepper>\n                {<Fragment>\n                    <Box className=\"button-box\" sx={{ display: 'flex', flexDirection: 'row', pt: 2 }}>\n                        <LoadingButton className=\"init-btn\" loading={loading} sx={{ marginLeft: 5 }} variant=\"contained\" onClick={\n                            (activeStep === 0) ? getEncryptionKey : initializeDeb0x\n                        }>\n                            {activeStep === steps.length - 1 ? 'Initialize' : 'Provide'}\n                        </LoadingButton>\n                    </Box>\n                </Fragment>\n                }\n            </Box>\n        </>\n    );\n}\n","import { Add } from \"@mui/icons-material\";\nimport { Box, IconButton, Modal } from \"@mui/material\";\nimport { useContext, useEffect, useState } from \"react\";\n\nimport ContactsContext from \"./Contexts/ContactsContext\";\n\nexport default function ContactsSetter(props: any) {\n    const useContacts = () => useContext(ContactsContext);\n    const { contacts, setContacts } = useContacts()!;\n    const [name, setName] = useState<string>(\"\");\n    const [address, setAddress] = useState<string>(props.props);\n    const [open, setOpen] = useState(false);\n    const handleOpen = () => setOpen(true);\n\n    const addContact = () => {\n        contacts.push({name: name, address: address})\n        setContacts([...contacts])\n        setOpen(false)\n    }\n\n    useEffect(() => {\n        localStorage.setItem('contacts', JSON.stringify(contacts));\n    }, [contacts, localStorage]);\n\n    return (\n        <>\n            <IconButton onClick={handleOpen}>\n                <Add />\n            </IconButton>\n            <Modal open={open}>\n            <Box className=\"modal-box\">\n                <form>\n                    <div className=\"form-group\">\n                        <label>Name</label>\n                        <input key=\"name\" className=\"form-control\"\n                            onChange={(e) => setName(e.currentTarget.value)}/>\n                    </div>\n                    <div className=\"form-group\">\n                        <label>Address</label>\n                        <input readOnly key=\"address\" className=\"form-control\"\n                            value={props.props}/>\n                    </div>\n                    <button className=\"btn btn-outline-dark mt-2\" type=\"button\" \n                        onClick={addContact}>\n                        ADD\n                    </button>\n                </form>\n            </Box>\n            </Modal>\n        </>\n    );\n}","import { useState, useEffect } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport Deb0x from \"../../ethereum/deb0x\"\nimport {\n    Tooltip, List, ListItem, ListItemText, ListItemButton, Typography, Box, \n    CircularProgress,\n    Button,\n    Modal\n} from '@mui/material';\nimport Stepper from './Stepper'\nimport IconButton from \"@mui/material/IconButton\";\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\nimport Pagination from \"@mui/material/Pagination\";\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport MailOutlineIcon from '@mui/icons-material/MailOutline';\nimport axios from 'axios';\nimport formatAccountName from \"../Common/AccountName\";\nimport \"../../componentsStyling/decrypt.scss\"\nimport { Add } from '@mui/icons-material';\nimport ContactsSetter from '../ContactsSetter';\nimport lock from '../../photos/lock.svg';\nimport airplane from '../../photos/airplane.svg';\nimport users from '../../photos/users.svg';\nimport hand from '../../photos/hand.svg';\n\nconst deb0xAddress = \"0x13dA6EDcdD7F488AF56D0804dFF54Eb17f41Cc61\"\n\nexport function Decrypt(props: any): any {\n    const { account, library } = useWeb3React()\n    const [loading, setLoading] = useState(true)\n    const [encryptionKeyInitialized, setEncryptionKeyInitialized] = \n        useState<boolean|undefined>(undefined);\n    const [decrypted, setDecrypted] = useState<any>();\n\n\n    useEffect(() => {\n        setLoading(true)\n        getPublicEncryptionKey()\n    }, [account]);\n\n    const getPublicEncryptionKey = async () => {\n        const deb0xContract = Deb0x(library, deb0xAddress)\n        const key = await deb0xContract.getKey(account)\n        const initialized = (key != '') ? true : false\n        setEncryptionKeyInitialized(initialized)\n    }\n\n    async function decrypt(encryptedMessage: any) {\n        try {\n            const decryptedMessage = await library.provider.request({\n                method: 'eth_decrypt',\n                params: [encryptedMessage, account],\n            });\n            return decryptedMessage\n        } catch (error) {\n            return undefined\n        }\n    }\n\n    async function fetchMessage(message: any) {\n        return await axios.get(`https://ipfs.io/ipfs/${message}`)\n    }\n\n    function Message(props: any) {\n        const encryptMessage = props.message.fetchedMessage.data\n        const [message, setMessage] =\n            useState(props.message.fetchedMessage.data)\n        const [ensName,setEnsName] = useState(\"\");\n        //const [sender, setSender] = useState(props.messsage.sender)\n        const [messageTime, setMessageTime] = useState(\"Mar 17, 18:36\")\n        const [isDecrypted, setIsDecrypted] = useState(false);\n\n        useEffect(()=>{\n            checkENS();\n        },[])\n\n        useEffect(()=>{\n            if(props.index !== props.previousIndex && isDecrypted===true){\n                hideMessage();\n            }\n\n        },[props.previousIndex])\n\n\n        async function checkENS() {\n            let name = await library.lookupAddress(props.message.sender);\n            if(name !== null) {   \n                setEnsName(name);\n            }\n        }\n\n        async function decryptMessage() {\n            const decryptedMessage = await decrypt(message)\n            if(decryptedMessage) {\n                setIsDecrypted(false);\n                setMessage(decryptedMessage);\n                setIsDecrypted(true);\n                props.setPreviousIndex(props.index);\n            }\n        }\n\n        async function hideMessage() {\n            setMessage(encryptMessage);\n            setIsDecrypted(false);\n        }\n\n        return (\n            <ListItem\n                disablePadding \n                key={props.index}    \n                secondaryAction={ \n                    <IconButton className={`${\n                            (message !== props.message.fetchedMessage.data) ? \n                            \"list-item-btn\" : \"\"}`\n                        }  \n                        onClick={()=>{hideMessage()}}  \n                        edge=\"end\" \n                        aria-label=\"comments\">\n                        { (message !== props.message.fetchedMessage.data) ? \n                            <VisibilityOffIcon className='visibility-icon' /> : null\n                        }\n                    </IconButton>  \n                }\n                className=\"messages-list-item card\">\n                <ListItemButton \n                    className={`list-item-button ${isDecrypted ? \"active\" : \"\"}` }\n                    onClick={() => {\n                        if(message === props.message.fetchedMessage.data) {\n                            decryptMessage()\n                        }\n                    }}>\n                    <ListItemText primary={\n                        <>\n                            <div className=\"message-left\">\n                                <div className=\"message-heading\">\n                                    <p><strong>\n                                        {ensName !== \"\" ? ensName : formatAccountName(props.message.sender)}\n                                    </strong></p>\n                                    <p className=\"time-stamp\"><small>\n                                        {messageTime}\n                                    </small></p>\n                                </div>\n                                <p className=\"message message-overflow\"\n                                    dangerouslySetInnerHTML={{ __html: message }} />\n                            </div>\n                            {isDecrypted ? \n                                <div className=\"message-right\">\n                                    <div className=\"message-heading\">\n                                        <div className=\"address\">\n                                            <p>From: \n                                                <strong>\n                                                    {ensName !== \"\" ? \n                                                        ensName : \n                                                        formatAccountName(\n                                                            props.message.sender\n                                                        )\n                                                    }\n                                                </strong>\n                                            </p>\n                                            <ContactsSetter props={props.message.sender}/>\n                                        </div>\n                                        \n                                        <p className=\"time-stamp\"><small>\n                                            {messageTime}\n                                        </small></p>\n                                    </div>\n                                    <p className=\"message\" \n                                        dangerouslySetInnerHTML={{ __html: message }} />\n                                </div> : \n                                <></> \n                            }\n                        </> \n                    }/>\n                </ListItemButton>\n            </ListItem>\n        )\n    }\n\n    function GetMessages() {\n        const [fetchedMessages, setFetchedMessages] = useState<any>([])\n        const [previousIndex, setPreviousIndex] = useState<number>();\n\n        useEffect(() => {\n            processMessages()\n        }, []);\n\n\n\n        async function processMessages() {\n            const deb0xContract = Deb0x(library, deb0xAddress)\n            const senderAddresses = \n                await deb0xContract.fetchMessageSenders(account)\n            const cidsPromises = \n                senderAddresses.map(async function(sender:any) {\n                    return { \n                        cids: await deb0xContract.fetchMessages(account, sender),\n                        sender: sender\n                    }\n                })\n\n            const cids = await Promise.all(cidsPromises)\n\n            const encryptedMessagesPromisesArray = \n                cids.map(async function(cidArray: any) {\n                    const encryptedMessagesPromises = \n                        cidArray.cids.map(async function (cid: any) {\n                            return { \n                                fetchedMessage: await fetchMessage(cid),\n                                sender: cidArray.sender\n                            }\n                        })\n                    const promise = await Promise.all(encryptedMessagesPromises)\n\n                    return promise\n                })\n\n            const encryptedMessages = \n                await Promise.all(encryptedMessagesPromisesArray)\n            \n            setFetchedMessages(encryptedMessages.flat())\n            setLoading(false)\n\n        }\n\n        if(!loading) {\n            if (fetchedMessages.length === 0) {\n                return (\n                    <div className=\"message-placeholder\">\n                        <MailOutlineIcon />\n                        <Typography variant=\"h5\"\n                            gutterBottom\n                            component=\"div\"\n                            sx={{marginLeft: .8, marginTop: 3}}>\n                            No messages yet.\n                        </Typography>\n                    </div>\n                )\n            } else {\n                return (\n                    <div className=\"row messages-list\">\n                        <List className=\"col-md-4 col-sm-12\">\n                            {fetchedMessages.map((message: any, i: any) => {\n                                return (\n                                    <Message message={message} index={i} \n                                        key={i} previousIndex={previousIndex} \n                                        setPreviousIndex={setPreviousIndex} />\n                                )\n                            })}\n                        </List>\n                        <Box className=\"intro-box col-md-8\">\n                            <div>\n                                \n                            </div>\n                        </Box>\n                    </div>\n                )\n            }\n        } else {\n            return (\n                <div className=\"spinner\">\n                    <CircularProgress/>\n                </div>\n            )\n        }\n    }\n    \n    if (encryptionKeyInitialized === true) {\n        return (\n            <div className=\"content-box\">\n                <Box>\n                    <Box className=\"pagination\" sx={{display:\"flex\"}}>\n                        <Pagination count={1} />\n                        <IconButton size=\"large\" onClick={()=> setLoading(true) }>\n                            <RefreshIcon fontSize=\"large\"/>\n                        </IconButton>\n                    </Box>\n                    <Box>\n                        <GetMessages />\n                    </Box>\n                </Box>\n            </div>\n        )\n    } else if (encryptionKeyInitialized === false) {\n        return (\n            <Stepper onDeboxInitialization={getPublicEncryptionKey}/>\n        )\n    } else {\n        return(\n            <div className=\"spinner\">\n                <CircularProgress/>\n            </div>\n        )\n    }\n}","export default __webpack_public_path__ + \"static/media/token.0bd78e9a.svg\";","import { useState, useEffect } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport {\n    Card, CardActions, CardContent, Button, Grid,\n    Typography, TextField, Divider,Box\n} from '@mui/material';\n\nimport ToggleButton from '@mui/material/ToggleButton';\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport Deb0x from \"../../ethereum/deb0x\"\nimport Deb0xERC20 from \"../../ethereum/deb0xerc20\"\nimport SnackbarNotification from './Snackbar';\nimport { ethers } from \"ethers\";\nimport \"../../componentsStyling/stake.scss\";\nimport token from \"../../photos/icons/token.svg\"\n\nconst deb0xAddress = \"0x13dA6EDcdD7F488AF56D0804dFF54Eb17f41Cc61\"\nconst deb0xERC20Address = \"0xEde2f177d6Ae8330860B6b37B2F3D767cd2630fe\"\n\nexport function Stake(props: any): any {\n    const { account, library } = useWeb3React()\n    const [notificationState, setNotificationState] = useState({})\n\n    useEffect(() => {\n        console.log(\"stake component effect\")\n    });\n    \n    function RewardsPanel() {\n\n        const [rewardsUnclaimed, setRewardsUnclaimed] = useState(\"\")\n        const [feeSharePercentage, setFeeSharePercentage] = useState(\"\")\n        const [loading, setLoading] = useState(false)\n\n        useEffect(() => {\n            console.log(\"rewards effect\")\n            rewardsAccrued()\n        }, [rewardsUnclaimed]);\n\n        useEffect(() => {\n            console.log(\"fee share effect\")\n            feeShare()\n        }, [feeSharePercentage]);\n\n        async function rewardsAccrued() {\n            const deb0xContract = await Deb0x(library, deb0xAddress)\n\n            const unclaimedRewards = await deb0xContract.earnedNative(account);\n\n            setRewardsUnclaimed(ethers.utils.formatEther(unclaimedRewards))\n        }\n\n        async function feeShare() {\n            console.log(\"aicii\")\n            const deb0xContract = await Deb0x(library, deb0xAddress)\n            console.log(\"1\")\n            \n            let balance = parseFloat((ethers.utils.formatEther((await deb0xContract.balanceERC20(account)) )) )\n            console.log(balance + \" balance\")\n            \n            let totalSupply = parseFloat((ethers.utils.formatEther((await deb0xContract.totalSupply())) ))\n            console.log(totalSupply + \" totalSupply\")\n            const feeShare = balance * 100 / totalSupply\n            console.log(feeShare + \" feeShare\")\n            setFeeSharePercentage(((Math.round(feeShare * 100) / 100).toFixed(2)).toString() + \"%\")\n        }\n\n        async function claimRewards() {\n            setLoading(true)\n\n            const signer = await library.getSigner(0)\n\n            const deb0xContract = Deb0x(signer, deb0xAddress)\n\n            try {\n                const tx = await deb0xContract.getRewardNative()\n\n                tx.wait()\n                    .then((result: any) => {\n                        setNotificationState({\n                            message: \"You succesfully claimed your rewards.\", open: true,\n                            severity: \"success\"\n                        })\n                        //setLoading(false)\n\n                    })\n                    .catch((error: any) => {\n                        setNotificationState({\n                            message: \"Rewards couldn't be claimed!\", open: true,\n                            severity: \"error\"\n                        })\n                        setLoading(false)\n                    })\n            } catch (error: any) {\n                setNotificationState({\n                    message: \"You rejected the transaction. Your rewards haven't been claimed.\", open: true,\n                    severity: \"info\"\n                })\n            }\n\n\n        }\n\n        return (\n            <Card variant=\"outlined\" className=\"card-container\">\n                <CardContent>\n                    <Typography variant=\"h4\" component=\"div\">\n                        REWARDS\n                    </Typography>\n                    <Typography>\n                        Your unclaimed rewards:\n                    </Typography>\n                    <Typography variant=\"h6\">\n                        <strong>{rewardsUnclaimed}</strong>\n                    </Typography>\n                    <Typography>\n                        Your share from fees:\n                    </Typography>\n                    <Typography variant=\"h6\">\n                        <strong>{feeSharePercentage}</strong>\n                    </Typography>\n                </CardContent>\n                <CardActions>\n                    <LoadingButton className=\"submit-btn\" loading={loading} variant=\"contained\" onClick={claimRewards}>Collect</LoadingButton>\n                </CardActions>\n            </Card>\n        )\n    }\n\n\n\n    function StakeUnstake() {\n        const [alignment, setAlignment] = useState(\"stake\");\n\n        const [userStakedAmount, setUserStakedAmount] = useState(\"\")\n        const [userUnstakedAmount, setUserUnstakedAmount] = useState(\"\")\n        const [totalStaked, setTotalStaked] = useState(\"\")\n        const [amountToUnstake, setAmountToUnstake] = useState(\"\")\n        const [amountToStake, setAmountToStake] = useState(\"\")\n        const [loading, setLoading] = useState(false)\n        const [approved, setApproved] = useState<Boolean | null>(false)\n\n        const handleChange = (\n            event: React.MouseEvent<HTMLElement>,\n            newAlignment: string,\n        ) => {\n            setAlignment(newAlignment);\n        };\n\n       \n\n        useEffect(() => {\n            console.log(\"user staked effect\")\n            setStakedAmount()\n        }, [userStakedAmount]);\n\n        useEffect(() => {\n            console.log(\"total staked effect\")\n            totalAmountStaked()\n        }, [totalStaked]);\n\n        useEffect(() => {\n            console.log(\"user unstaked effect\")\n            setUnstakedAmount()\n        }, [userUnstakedAmount]);\n\n        useEffect(() => {\n            console.log(\"approval effect\")\n            setApproval()\n        }, [approved]);\n\n        async function setStakedAmount() {\n\n            const deb0xContract = await Deb0x(library, deb0xAddress)\n\n            const balance = await deb0xContract.balanceERC20(account)\n\n            setUserStakedAmount(ethers.utils.formatEther(balance))\n        }\n\n        async function setUnstakedAmount() {\n            const deb0xERC20Contract = await Deb0xERC20(library, deb0xERC20Address)\n\n            const balance = await deb0xERC20Contract.balanceOf(account)\n\n            setUserUnstakedAmount(ethers.utils.formatEther(balance))\n        }\n\n        async function setApproval() {\n            const deb0xERC20Contract = await Deb0xERC20(library, deb0xERC20Address)\n\n            const allowance = await deb0xERC20Contract.allowance(account, deb0xAddress)\n\n            allowance > 0 ? setApproved(true) : setApproved(false)\n        }\n\n        async function totalAmountStaked() {\n\n            const deb0xContract = await Deb0x(library, deb0xAddress)\n\n            const totalSupply = await deb0xContract.totalSupply()\n\n            setTotalStaked(ethers.utils.formatEther(totalSupply))\n        }\n\n        async function approveStaking() {\n            setLoading(true)\n\n            const signer = await library.getSigner(0)\n\n            const deb0xERC20Contract = await Deb0xERC20(signer, deb0xERC20Address)\n\n            try {\n                const tx = await deb0xERC20Contract.approve(deb0xAddress, ethers.utils.parseEther(\"1000000\"))\n\n                tx.wait()\n                    .then((result: any) => {\n                        setNotificationState({\n                            message: \"Your succesfully approved contract for staking.\", open: true,\n                            severity: \"success\"\n                        })\n                        setLoading(false)\n\n                    })\n                    .catch((error: any) => {\n                        setNotificationState({\n                            message: \"Contract couldn't be approved for staking!\", open: true,\n                            severity: \"error\"\n                        })\n                        setLoading(false)\n                    })\n            } catch (error) {\n                setNotificationState({\n                    message: \"You rejected the transaction. Contract hasn't been approved for staking.\", open: true,\n                    severity: \"info\"\n                })\n                setLoading(false)\n            }\n        }\n\n        async function unstake() {\n            setLoading(true)\n\n            const signer = await library.getSigner(0)\n\n            const deb0xContract = Deb0x(signer, deb0xAddress)\n\n            try {\n                const tx = await deb0xContract.unStakeERC20(ethers.utils.parseEther(amountToUnstake.toString()))\n\n                tx.wait()\n                    .then((result: any) => {\n                        setNotificationState({\n                            message: \"Your tokens were succesfully unstaked.\", open: true,\n                            severity: \"success\"\n                        })\n                        setLoading(false)\n\n                    })\n                    .catch((error: any) => {\n                        setLoading(false)\n                        setNotificationState({\n                            message: \"Your tokens couldn't be unstaked!\", open: true,\n                            severity: \"error\"\n                        })\n\n                    })\n\n            } catch (error: any) {\n                setNotificationState({\n                    message: \"You rejected the transaction. Your tokens haven't been unstaked.\", open: true,\n                    severity: \"info\"\n                })\n                setLoading(false)\n            }\n        }\n\n        async function stake() {\n            setLoading(true)\n\n            const signer = await library.getSigner(0)\n\n            const deb0xContract = Deb0x(signer, deb0xAddress)\n\n            try {\n                const tx = await deb0xContract.stakeERC20(ethers.utils.parseEther(amountToStake.toString()))\n\n                tx.wait()\n                    .then((result: any) => {\n                        setNotificationState({\n                            message: \"Your tokens were succesfully staked.\", open: true,\n                            severity: \"success\"\n                        })\n                        //setLoading(false)\n\n                    })\n                    .catch((error: any) => {\n                        setNotificationState({\n                            message: \"Your tokens couldn't be staked!\", open: true,\n                            severity: \"error\"\n                        })\n                        setLoading(false)\n                    })\n\n            } catch (error: any) {\n                setNotificationState({\n                    message: \"You rejected the transaction. Your tokens haven't been staked.\", open: true,\n                    severity: \"info\"\n                })\n                setLoading(false)\n            }\n        }\n\n        return (\n            <Card variant = \"outlined\" className=\"card-container\">\n                <ToggleButtonGroup\n                    color=\"primary\"\n                    value={alignment}\n                    exclusive\n                    onChange={handleChange}\n                    className=\"tab-container\"\n                >\n                    <ToggleButton className=\"tab-btn\" value=\"stake\">Stake</ToggleButton>\n                    <ToggleButton className=\"tab-btn\" value=\"unstake\">Unstake</ToggleButton>\n\n                </ToggleButtonGroup>\n              \n            {\n                alignment === \"stake\" ?\n                \n                <>\n                <CardContent>\n                    <Typography>\n                        Your staked amount:\n                    </Typography>\n                    <Typography variant=\"h6\">\n                        <strong>{userStakedAmount} DBX</strong>\n                    </Typography>\n                    <Divider className=\"divider-pink\" />\n                    <Typography>\n                        Your tokens in wallet:\n                    </Typography>\n                    <Typography variant=\"h6\">\n                        <strong>{userUnstakedAmount} DBX</strong>\n                    </Typography>\n                    {approved && <Grid className=\"amount-row\" container spacing={2}>\n                        <Grid item>\n                            <TextField id=\"outlined-basic\"\n                                label=\"Amount to stake\"\n                                variant=\"outlined\"\n                                type=\"number\"\n                                value={amountToStake}\n                                onChange={e => setAmountToStake(e.target.value)} />\n                        </Grid>\n                        <Grid className=\"max-btn-container\" item>\n                            <Button className=\"max-btn\" \n                                size=\"small\" variant=\"contained\" color=\"error\" \n                               onClick = {()=>setAmountToStake(userUnstakedAmount)  }>\n                                max\n                            </Button>\n                        </Grid>\n                    </Grid>}\n                </CardContent>\n                <CardActions>\n                    {approved && <LoadingButton disabled={!amountToStake} className=\"submit-btn\" loading={loading} variant=\"contained\" onClick={stake}>Stake</LoadingButton>}\n                    {!approved && <LoadingButton className=\"submit-btn\" loading={loading} variant=\"contained\" onClick={approveStaking}>Approve Staking</LoadingButton>}\n                </CardActions>\n                </>\n                : \n\n                <>\n                <CardContent>\n                    \n                    <Typography>\n                        Your staked amount:\n                    </Typography>\n                    <Typography variant=\"h6\">\n                        <strong>{userStakedAmount} DBX</strong>\n                    </Typography>\n                    <Typography>\n                        Your tokens in wallet:\n                    </Typography>\n                    <Typography variant=\"h6\">\n                        <strong>{userUnstakedAmount} DBX</strong>\n                    </Typography>\n                  \n\n                    <Grid className=\"amount-row\" container spacing={2}>\n                        <Grid item>\n                            <TextField value={amountToUnstake}\n                                id=\"outlined-basic\"\n                                label=\"Amount to unstake\"\n                                variant=\"outlined\"\n                                onChange={e => setAmountToUnstake(e.target.value)}\n                                type=\"number\" />\n                        </Grid>\n                        <Grid className=\"max-btn-container\" item>\n                            <Button className=\"max-btn\"\n                                size=\"small\" variant=\"contained\" color=\"error\" \n                                onClick = {()=>setAmountToUnstake(userStakedAmount)  }>\n                                max\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </CardContent>\n                <CardActions>\n                    <LoadingButton className=\"submit-btn\" disabled={!amountToUnstake} loading={loading} variant=\"contained\" onClick={unstake}>Unstake</LoadingButton>\n                </CardActions>\n                </>\n            }\n\n            </Card>\n\n        )\n    }\n\n    function TotalStaked() {\n        const [totalStaked, setTotalStaked] = useState(\"\")\n        useEffect(() => {\n            console.log(\"total staked effect\")\n            totalAmountStaked()\n        }, [totalStaked]);\n    \n        async function totalAmountStaked() {\n    \n            const deb0xContract = await Deb0x(library, deb0xAddress)\n    \n            const totalSupply = await deb0xContract.totalSupply()\n    \n            setTotalStaked(ethers.utils.formatEther(totalSupply))\n        }\n\n        return (\n            <Card className=\"heading-card\">\n                <CardContent>\n                    <Typography variant=\"h5\">\n                        Total tokens staked:\n                    </Typography>\n                    <Typography variant=\"h4\">\n                        <img className=\"logo\" src={token} />\n                        {totalStaked} DBX\n                    </Typography>\n                </CardContent>\n            </Card>\n        )\n    }\n\n    return (\n        <>\n            <SnackbarNotification state={notificationState} setNotificationState={setNotificationState} />\n            <Box className=\"container\">\n                <div className=\"cards-grid\">\n                    <div className='row'>\n                        <Grid item className=\"col col-md-6\">\n                            <TotalStaked/>\n                        </Grid>\n                        <Grid item className=\"col col-md-6\">\n                            <StakeUnstake/>\n                            <RewardsPanel />\n                        </Grid>\n                    </div>\n                </div>\n            </Box>\n        </>\n    )\n}","import { useState, useEffect } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport Deb0x from \"../../ethereum/deb0x\"\nimport {\n    Tooltip, List, ListItem, Chip,\n    ListItemText, ListItemButton, Typography, Box, CircularProgress, Stack\n} from '@mui/material';\nimport Stepper from './Stepper'\nimport { border } from '@mui/system';\nimport IconButton from \"@mui/material/IconButton\";\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\nimport Pagination from \"@mui/material/Pagination\";\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport Refresh from '@mui/icons-material/Refresh';\nimport Button from \"@mui/material/Button\";\nimport MailOutlineIcon from '@mui/icons-material/MailOutline';\nimport '../../componentsStyling/decrypt.scss';\nimport empty from '../../photos/empty.png';\n\nconst axios = require('axios')\nconst deb0xAddress = \"0x13dA6EDcdD7F488AF56D0804dFF54Eb17f41Cc61\"\n\nexport function Sent(props: any): any {\n    const { account, library } = useWeb3React()\n    const [loading, setLoading] = useState(true)\n    const [encryptionKeyInitialized, setEncryptionKeyInitialized] = useState<boolean|undefined>(undefined)\n\n\n    useEffect(() => {\n        console.log(\"useEffect\")\n        setLoading(true)\n        getPublicEncryptionKey()\n    }, [account]);\n\n    const getPublicEncryptionKey = async () => {\n        const deb0xContract = Deb0x(library, deb0xAddress)\n        const key = await deb0xContract.getKey(account)\n        const initialized = (key != '') ? true : false\n        setEncryptionKeyInitialized(initialized)\n    }\n\n    \n\n    async function decrypt(encryptedMessage: any) {\n        try {\n            const decryptedMessage = await library.provider.request({\n                method: 'eth_decrypt',\n                params: [encryptedMessage, account],\n            });\n            return decryptedMessage\n        } catch (error) {\n            return undefined\n        }\n    }\n\n    async function fetchMessage(message: any) {\n        return await axios.get(`https://ipfs.io/ipfs/${message}`)\n    }\n\n    function Message(props: any) {\n        const encryptMessage = props.message.fetchedMessage.data\n        const [message, setMessage] = useState(props.message.fetchedMessage.data)\n        const [recipients, setRecipients] = useState<string[]>([]);\n        //const [sender, setSender] = useState(props.messsage.sender)\n        const [messageTime,setMessageTime] = useState(\"Mar 17, 18:36\")\n        const [isDecrypted, setIsDecrypted] = useState(false);\n\n        useEffect(()=> {\n            checkENS();\n        },[])\n\n        useEffect(()=>{\n            if(props.index !== props.previousIndex && isDecrypted===true){\n                hideMessage();\n            }\n\n        },[props.previousIndex])\n\n        async function checkENS(){\n            let recipientsTemp:any = []\n            const recipientsFiltered = props.message.recipients.filter((recipient:any) => recipient != account)\n\n            for(let recipient of recipientsFiltered) {\n                let name = await library.lookupAddress(recipient);\n                if(name !== null)\n                {   \n                    console.log(\"not null\")\n                    recipientsTemp = [...recipientsTemp, name];\n                } else {\n                    recipientsTemp = [...recipientsTemp, `${recipient.substring(0, 5)}...${recipient.substring(recipient.length - 4)}`];\n                }\n            }\n            \n            setRecipients(recipientsTemp)\n        }\n\n        async function decryptMessage() {\n            const decryptedMessage = await decrypt(message)\n            if(decryptedMessage) {\n                setIsDecrypted(false);\n                setMessage(decryptedMessage);\n                setIsDecrypted(true);\n                props.setPreviousIndex(props.index);\n            }\n        }\n\n        async function hideMessage(){\n            setMessage(encryptMessage);\n            setIsDecrypted(false);\n        }\n\n\n    \n        return (\n            <ListItem sx ={{border:1, marginBottom:1}} disablePadding key={props.index}    secondaryAction={ \n                <IconButton className={`${(message != props.message.fetchedMessage.data) ? \"list-item-btn\" : \"\"}`}  \n                        onClick={()=>{hideMessage()}}  edge=\"end\" aria-label=\"comments\">\n                    { (message != props.message.fetchedMessage.data) ? <VisibilityOffIcon  />: null}\n                </IconButton>  \n            }\n                className=\"messages-list-item\"\n            >\n                <Tooltip \n                    title={(message === props.message.fetchedMessage.data) ? \n                    \"Click to decrypt\" : `Sender:${props.message.sender}`} \n                    placement=\"right\">\n                    <ListItemButton className=\"list-item-button\"\n                        onClick={() => {\n                            if(message === props.message.fetchedMessage.data) {\n                                decryptMessage()\n                            }\n                        }}>\n                        <div>\n\n                        </div>\n                        <ListItemText\n                        primary={\n                        <>\n                            <div className=\"message-left\">\n                                <div className=\"message-heading\">\n                                    <p><small>To: </small></p>\n                                        <Stack direction=\"row\" spacing={1}>\n                                            {\n                                                recipients.map((recipient: any) => {\n                                                    console.log(recipients)\n                                                    return (\n                                                        <Chip\n                                                            key={recipient}\n                                                            color=\"primary\"\n                                                            label={recipient}\n                                                            variant=\"outlined\"\n                                                        />\n                                                    )\n                                                })\n                                            }\n                                        </Stack>\n                                    <p><small>{messageTime}</small></p>\n                                </div>\n                                <p className={`message \n                                        ${message === props.message.fetchedMessage.data ? \n                                        \"message-overflow\" : \"\"}` }\n                                    dangerouslySetInnerHTML={{ __html: message }}>\n                                </p>\n                            </div>\n                            {isDecrypted ? \n                                <div className=\"message-right\">\n                                    <div className=\"message-heading\">\n                                        <p><small>To: </small></p>\n                                            <Stack direction=\"row\" spacing={1}>\n                                                {\n                                                    recipients.map((recipient: any) => {\n                                                        console.log(recipients)\n                                                        return (\n                                                            <Chip\n                                                                key={recipient}\n                                                                color=\"primary\"\n                                                                label={recipient}\n                                                                variant=\"outlined\"\n                                                            />\n                                                        )\n                                                    })\n                                                }\n                                            </Stack>\n                                        <p><small>{messageTime}</small></p>\n                                    </div>\n                                    <p className={`message ${message === props.message.fetchedMessage.data ? \"message-overflow\" : \"\"}` }\n                                        dangerouslySetInnerHTML={{ __html: message }}>\n                                    </p>\n                                </div> : <></>}\n                        </>\n                        \n                        }/>\n                         \n                    </ListItemButton>\n                </Tooltip>\n            </ListItem>\n            )\n    }\n\n    function GetMessages() {\n        const [fetchedMessages, setFetchedMessages] = useState<any>([]);\n        const [previousIndex,setPreviousIndex] = useState<number>();\n\n        useEffect(() => {\n            processMessages()\n        }, []);\n\n        async function processMessages() {\n            const deb0xContract = Deb0x(library, deb0xAddress)\n            \n            const sentMessages = await deb0xContract.fetchSentMessages(account)   \n            console.log(sentMessages)\n\n            const sentMessagesRetrieved = sentMessages.map(async function (item: any) {\n                return { fetchedMessage: await fetchMessage(item.cid), recipients: item.recipients}\n            })\n\n            const messages = await Promise.all(sentMessagesRetrieved)\n\n            setFetchedMessages(messages)\n            setLoading(false)\n        }\n\n        if(!loading) {\n            if (fetchedMessages.length == 0) {\n                return (\n                    <>\n                        <div className=\"message-placeholder\">\n                            <MailOutlineIcon />\n                            <Typography variant=\"h5\"\n                                gutterBottom\n                                component=\"div\"\n                                sx={{marginLeft: .8, marginTop: 3}}\n                            >\n                                No messages yet.\n                            </Typography>\n                        </div>\n                    </>\n                )\n            } else {\n                return (\n                    <div className=\"row messages-list\">\n                        <List className=\"col-md-4 col-sm-12\">\n                            {fetchedMessages.map((message: any, i: any) => {\n                                return (\n                                    <Message message={message} index={i} \n                                        key={i} previousIndex={previousIndex} \n                                        setPreviousIndex={setPreviousIndex} />\n                                )\n                            })}\n                        </List>\n                        <Box className=\"intro-box sent col-md-8\">\n                            <div>\n                                {/* <img src={empty} /> */}\n                                <p>Open a message from the list to see the details.</p>\n                            </div>\n                        </Box>\n                    </div>\n                )\n            }\n        } else {\n            return (\n                <div className=\"spinner\">\n                    <CircularProgress/>\n                </div>\n            )\n        }\n\n    }\n    \n    if(encryptionKeyInitialized == true){\n        return (\n            <div className=\"content-box\">\n                <Box>\n                    <Box className=\"pagination\" sx={{display:\"flex\"}}>\n                        <Pagination count={1} showFirstButton showLastButton />\n                        <IconButton size=\"large\" onClick={()=> setLoading(true) }>\n                            <RefreshIcon fontSize=\"large\"/>\n                        </IconButton>\n                    </Box>\n                    <Box>\n                        <GetMessages />\n                    </Box>\n                </Box>\n           </div>\n        )\n    } else if(encryptionKeyInitialized == false){\n        return (\n            <Stepper onDeboxInitialization={getPublicEncryptionKey}/>\n        )\n    } else{\n        return(\n            <div className=\"spinner\">\n                <CircularProgress/>\n            </div>\n        )\n    }\n}","import { useState, useEffect } from \"react\";\nimport ThemeContext, { initialThemeState } from \"./ThemeContext\";\n\ntype Props = {\n    children: JSX.Element|JSX.Element[],\n};\n\nconst ThemeProvider = ( { children }: Props ) => {\n  const [theme, setTheme] = useState<any>(initialThemeState.theme);\n\n  const localStorage = window.localStorage;\n\n  useEffect(() => {\n    const savedThemeLocal = localStorage.getItem(\"globalTheme\");\n\n    if (!!savedThemeLocal) {\n      setTheme(savedThemeLocal);\n    }\n  }, [localStorage]);\n\n  useEffect(() => {\n    localStorage.setItem(\"globalTheme\", theme);\n  }, [theme, localStorage]);\n\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme }}>\n      <div className={`theme theme--${theme}`}>{children}</div>\n    </ThemeContext.Provider>\n  );\n};\n\nexport default ThemeProvider;\n","import { useState, useEffect } from 'react';\nimport './App.css';\nimport { \n    Web3ReactProvider,\n    useWeb3React,\n    UnsupportedChainIdError\n} from '@web3-react/core';\nimport {\n  NoEthereumProviderError,\n  UserRejectedRequestError as UserRejectedRequestErrorInjected\n} from '@web3-react/injected-connector'\nimport { ethers } from \"ethers\";\nimport { useEagerConnect, useInactiveListener } from './hooks'\nimport { PermanentDrawer } from './components/App/PermanentDrawer'\nimport { create } from 'ipfs-http-client'\nimport { Encrypt } from './components/App/Encrypt';\nimport { Decrypt } from './components/App/Decrypt';\nimport {Stake} from './components/App/Stake';\nimport { Sent } from './components/App/Sent';\nimport { Box,Typography, Fab} from '@mui/material';\nimport ThemeProvider from './components/Contexts/ThemeProvider';\nimport './index.scss';\nimport { injected, network } from './connectors';\nimport ContactsProvider from './components/Contexts/ContactsProvider';\nimport elephant from './photos/icons/elephant.svg';\nimport logoGreen from './photos/icons/logo-green.svg';\nimport logoDark from \"./photos/logo-dark.svg\";\n\nconst client = create({\n  host: 'ipfs.infura.io',\n  port: 5001,\n  protocol: 'http'\n})\n\nconst ethUtil = require('ethereumjs-util')\n//old address: 0x218c10BAb451BE6A897db102b2f608bC7D3441a0\n// 0x13dA6EDcdD7F488AF56D0804dFF54Eb17f41Cc61\nconst deb0xAddress = \"0x13dA6EDcdD7F488AF56D0804dFF54Eb17f41Cc61\";\n\n\nenum ConnectorNames { Injected = 'Injected', Network = 'Network' };\n\nconst connectorsByName: { [connectorName in ConnectorNames]: any } = {\n  [ConnectorNames.Injected]: injected,\n  [ConnectorNames.Network]: network\n}\n\nfunction getErrorMessage(error: Error) {\n  if (error instanceof NoEthereumProviderError) {\n    return 'No Ethereum browser extension detected, install MetaMask on desktop or visit from a dApp browser on mobile.'\n  } else if (error instanceof UnsupportedChainIdError) {\n    return \"You're connected to an unsupported network.\"\n  } else if (\n    error instanceof UserRejectedRequestErrorInjected\n  ) {\n    return 'Please authorize this website to access your Ethereum account.'\n  } else {\n    console.error(error)\n    return 'An unknown error occurred. Check the console for more details.'\n  }\n}\n\nfunction getLibrary(provider: any): ethers.providers.Web3Provider {\n  const library = new ethers.providers.Web3Provider(provider)\n  library.pollingInterval = 12000\n  return library\n}\n\nexport default function () {\n  return (\n    <Web3ReactProvider getLibrary={getLibrary}>\n      <App />\n    </Web3ReactProvider>\n  )\n}\n\nfunction App() {\n  const context = useWeb3React<ethers.providers.Web3Provider>()\n  const { connector, library, chainId, account, active, error } = context\n\n  // handle logic to recognize the connector currently being activated\n  const [activatingConnector, setActivatingConnector] = useState<any>()\n  const [selectedOption, setSelectedOption] = useState('Deb0x')\n  useEffect(() => {\n    if (activatingConnector && activatingConnector === connector) {\n      setActivatingConnector(undefined)\n    }\n  }, [activatingConnector, connector])\n\n  // handle logic to eagerly connect to the injected ethereum provider, if it exists and has granted access already\n  const triedEager = useEagerConnect()\n\n  // handle logic to connect in reaction to certain events on the injected ethereum provider, if it exists\n  useInactiveListener(!triedEager || !!activatingConnector)\n\n  function handleChange(newValue: any) {\n    setSelectedOption(newValue)\n  }\n\n  useEffect(() => {\n    localStorage.removeItem('input')\n  }, [])\n\n  const [username, setUsername] = useState('Default username');\n  return (\n    <ThemeProvider>\n        {\n            account ? \n            <ContactsProvider>\n                <div className=\"app-container\">\n                <PermanentDrawer onChange={handleChange}/>\n                \n                <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n                    {!!error && \n                        <p className='alert alert-danger position-fixed' style={{ marginTop: '4rem', marginBottom: '0' }}>\n                            {getErrorMessage(error)}\n                        </p>\n                    }\n                </div>\n                \n                {\n                account ? \n                !!(library && account) && (\n                    <Box className=\"main-container\" sx={{marginTop: 12}}>\n                        {selectedOption === \"Compose\" && <Encrypt />}\n                        {selectedOption === \"Deb0x\" && <Decrypt account={account}/>}\n                        {selectedOption === \"Stake\" && <Stake />}\n                        {selectedOption === \"Sent\" && <Sent />}\n                    </Box>\n                ):\n                    <Box className=\"home-page-box\">\n                        <Typography sx={{textAlign:\"center\",color:\"gray\"}} variant=\"h1\">\n                            The End To End Encrypted \n                            <br></br>\n                            Decentralized Email Protocol \n                            <br></br> \n                            Owned By Its Users\n                        </Typography>\n                        <Typography sx={{ mt:10,textAlign:\"center\"}} variant=\"h3\">\n                            Please connect your wallet\n                        </Typography>\n                    </Box>\n                }\n                </div>\n            </ContactsProvider> :\n            <>\n                <div className=\"app-container p-0\">\n                    <div className=\"initial-page\">\n                        <div className=\"row\">\n                            <div className=\"col-md-7 img-container\">\n                                <img className=\"image--left\" src={elephant} />\n                                <div className=\"img-content\">\n                                    <p>Hey, you!</p>\n                                    \n                                    <p>To use <img className=\"content-logo\" src={logoGreen} /> you need to have your wallet connected</p>\n                                </div>\n                            </div>\n                            <div className=\"col-md-5\">\n                                <div className=\"text-container\">\n                                    <img className=\"dark-logo\" src={logoGreen} />\n                                    <p>\n                                        The End to End Encrypted Decentralized \n                                        Email Protocol <br />\n                                        <span className=\"text-green\">\n                                            Owned by its Users\n                                        </span>\n                                    </p>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </>\n        }\n    </ThemeProvider>\n  )\n}\n\n\n","import { useState, useEffect } from \"react\";\nimport ContactsContext, { initialContacts } from './ContactsContext';\n\ntype Props = {\n    children: JSX.Element|JSX.Element[],\n};\n\nconst ContactsProvider = ( { children }: Props ) => {\n    const [contacts, setContacts] = useState<any>(initialContacts.contacts);\n  \n    const localStorage = window.localStorage;\n  \n    useEffect(() => {\n        const savedContacts = JSON.parse(localStorage.getItem('contacts') || 'null');\n        \n        if (!!savedContacts) {\n            setContacts(savedContacts);\n        }\n    }, [localStorage]);\n  \n  \n    useEffect(() => {\n        localStorage.setItem('contacts', JSON.stringify(contacts));\n    }, [contacts, localStorage]);\n    \n    return (\n      <ContactsContext.Provider value={{ contacts, setContacts }}>\n        <>{children}</>\n      </ContactsContext.Provider>\n    );\n  };\n  \n  export default ContactsProvider;","export default __webpack_public_path__ + \"static/media/elephant.2a77170b.svg\";","export default __webpack_public_path__ + \"static/media/logo-green.a6b7a360.svg\";","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}