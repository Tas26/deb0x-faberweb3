{"version":3,"sources":["components/App/Snackbar.tsx","components/App/Encrypt.tsx","ethereum/deb0x.js","connectors.ts","hooks.ts","components/App/Spinner.tsx","photos/logo.png","ethereum/deb0xerc20.js","components/Common/AccountName.tsx","components/Contexts/ThemeContext.tsx","components/ThemeSetter.tsx","components/Contexts/ContactsContext.tsx","components/App/PermanentDrawer.tsx","components/Common/ScreenSize.tsx","components/App/Stepper.tsx","components/ContactsSetter.tsx","photos/lock.svg","photos/airplane.svg","photos/users.svg","photos/hand.svg","components/App/Decrypt.tsx","components/App/Stake.tsx","photos/empty.png","components/App/Sent.tsx","components/Contexts/ThemeProvider.tsx","App.tsx","components/Contexts/ContactsProvider.tsx","reportWebVitals.ts","index.tsx"],"names":["Alert","forwardRef","props","ref","elevation","variant","SnackbarNotification","useState","severity","state","open","message","setState","useEffect","console","log","handleClose","event","reason","autoHideDuration","onClose","sx","width","deb0xAddress","ethUtil","require","client","create","host","port","protocol","Encrypt","useWeb3React","account","library","encryptionKey","textToEncrypt","setTextToEncrypt","encryptionKeyInitialized","setEncryptionKeyInitialized","senderAddress","setSenderAddress","notificationState","setNotificationState","messageSessionSentCounter","setMessageSessionSentCounter","loading","setLoading","estimatedReward","addressList","setAddressList","setError","JSON","parse","localStorage","getItem","input","isInList","address","includes","encryptText","messageToEncrypt","destinationAddresses","a","getSigner","signer","cids","recipients","flat","getAddress","push","deb0xContract","Deb0x","getKey","destinationAddressEncryptionKey","encryptedMessage","bufferToHex","Buffer","from","stringify","encrypt","publicKey","data","version","add","path","overrides","value","ethers","utils","parseUnits","send","tx","wait","then","result","catch","error","match","getPublicEncryptionKey","key","EditorState","createEmpty","editorState","setEditorState","sendContent","draftToHtml","convertToRaw","getCurrentContent","className","component","noValidate","autoComplete","id","placeholder","onPaste","evt","preventDefault","addresses","clipboardData","getData","toBeAdded","filter","onKeyDown","trim","isAddress","isValid","onChange","target","direction","spacing","margin","map","label","onDelete","item","i","deleteIcon","onEditorStateChange","toolbarClassName","wrapperClassName","editorClassName","display","alignItems","justifyContent","flexDirection","mr","endIcon","marginLeft","marginTop","disabled","onClick","abi","signerOrProvider","Contract","injected","InjectedConnector","supportedChainIds","network","NetworkConnector","urls","defaultChainId","useEagerConnect","activate","active","tried","setTried","isAuthorized","undefined","Spinner","color","rest","height","viewBox","xmlns","stroke","fill","fillRule","transform","strokeWidth","strokeOpacity","cx","cy","r","d","attributeName","type","to","dur","repeatCount","formatAccountName","substring","length","initialThemeState","theme","setTheme","_value","ThemeContext","createContext","ThemeSetter","useContext","e","currentTarget","themeOptions","option","idx","ConnectorNames","initialContacts","contacts","name","setContacts","_values","ContactsContext","deb0xERC20Address","connectorsByName","Injected","PermanentDrawer","context","connector","chainId","deactivate","activatingConnector","setActivatingConnector","selectedIndex","setSelectedIndex","ensName","setEnsName","userUnstakedAmount","setUserUnstakedAmount","anchorEl","setAnchorEl","Boolean","dimensions","windowSize","setWindowSize","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","ScreenSize","setUnstakedAmount","deb0xERC20Contract","Deb0xERC20","balanceOf","balance","formatEther","lookupAddress","handleClick","handleChange","text","index","removeItem","checkENS","setDisplay","CustomEvent","document","dispatchEvent","Snackbar","Box","CssBaseline","AppBar","src","logo","Paper","InputBase","inputProps","IconButton","Button","currentConnector","activating","connected","toLowerCase","Popper","List","ListItem","Drawer","anchor","button","selected","ListItemIcon","Add","ListItemText","primary","contact","displayAddress","size","navigator","clipboard","writeText","fontSize","setItem","href","steps","HorizontalLinearStepper","setEncryptionKey","activeStep","setActiveStep","whichStepFailed","setStepFailed","handleNext","prevActiveStep","provider","request","method","params","setKey","onDeboxInitialization","maxWidth","Stepper","labelProps","optional","Typography","Step","StepLabel","pt","LoadingButton","ContactsSetter","setName","setOpen","Modal","readOnly","Decrypt","decrypt","decryptedMessage","fetchMessage","axios","get","Message","encryptMessage","fetchedMessage","setMessage","messageTime","isDecrypted","setIsDecrypted","sender","setPreviousIndex","hideMessage","previousIndex","border","marginBottom","disablePadding","secondaryAction","edge","ListItemButton","decryptMessage","dangerouslySetInnerHTML","__html","GetMessages","fetchedMessages","setFetchedMessages","fetchMessageSenders","senderAddresses","cidsPromises","fetchMessages","Promise","all","encryptedMessagesPromisesArray","cidArray","encryptedMessagesPromises","cid","promise","encryptedMessages","processMessages","CircularProgress","gutterBottom","lock","airplane","users","hand","Pagination","count","showFirstButton","showLastButton","Stake","RewardsPanel","rewardsUnclaimed","setRewardsUnclaimed","feeSharePercentage","setFeeSharePercentage","earnedNative","unclaimedRewards","parseFloat","balanceERC20","totalSupply","feeShare","Math","round","toFixed","toString","getRewardNative","rewardsAccrued","Card","CardContent","Divider","CardActions","StakeUnstake","alignment","setAlignment","userStakedAmount","setUserStakedAmount","totalStaked","setTotalStaked","amountToUnstake","setAmountToUnstake","amountToStake","setAmountToStake","approved","setApproved","allowance","approve","parseEther","unStakeERC20","stakeERC20","setStakedAmount","totalAmountStaked","setApproval","ToggleButtonGroup","exclusive","newAlignment","ToggleButton","Grid","container","TextField","TotalStaked","Sent","setRecipients","recipientsTemp","recipientsFiltered","recipient","Tooltip","title","placement","Stack","Chip","fetchSentMessages","sentMessages","sentMessagesRetrieved","messages","empty","ThemeProvider","children","savedThemeLocal","Provider","ContactsProvider","savedContacts","Network","getErrorMessage","NoEthereumProviderError","UnsupportedChainIdError","UserRejectedRequestErrorInjected","getLibrary","providers","Web3Provider","pollingInterval","App","selectedOption","setSelectedOption","suppress","ethereum","on","handleConnect","handleChainChanged","handleAccountsChanged","accounts","handleNetworkChanged","networkId","removeListener","useInactiveListener","newValue","style","textAlign","mt","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.92679693.chunk.js","sourcesContent":["import { useState, forwardRef, useEffect } from 'react'\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\n\nconst Alert = forwardRef<HTMLDivElement, AlertProps>(function Alert(\n  props,\n  ref,\n) {\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nexport default function SnackbarNotification(props: any) {\n\n  const [state, setState] = useState({ severity: props.state.severity, open: props.state.open, message: props.state.message })\n\n  useEffect(() => {\n    console.log(props)\n    setState({severity: props.state.severity, open: props.state.open, message: props.state.message})\n  }, [props])\n\n  const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setState({\n      message: state.message, open: false,\n      severity: state.severity\n    })\n  };\n\n  return (\n    <Snackbar open={state.open} autoHideDuration={6000} onClose={handleClose}>\n      <Alert onClose={handleClose} severity={state.severity} sx={{ width: '100%' }}>\n        {state.message}\n      </Alert>\n    </Snackbar>\n  )\n}","import { useState, useEffect, useContext } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { encrypt } from '@metamask/eth-sig-util'\nimport Deb0x from \"../../ethereum/deb0x\"\nimport { create } from 'ipfs-http-client'\nimport SendIcon from '@mui/icons-material/Send';\nimport Chip from '@mui/material/Chip';\nimport Stack from '@mui/material/Stack';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport {\n    Box, TextField, Typography\n} from '@mui/material';\nimport { ethers } from \"ethers\";\nimport SnackbarNotification from './Snackbar';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport '../../componentsStyling/encrypt.scss';\nimport { EditorState, convertToRaw } from 'draft-js';\nimport draftToHtml from 'draftjs-to-html';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport { Editor } from 'react-draft-wysiwyg';\n\nconst deb0xAddress = \"0x13dA6EDcdD7F488AF56D0804dFF54Eb17f41Cc61\";\nconst ethUtil = require('ethereumjs-util')\n\n\nconst client = create({\n    host: 'ipfs.infura.io',\n    port: 5001,\n    protocol: 'https'\n})\n\nexport function Encrypt(): any {\n    const { account, library } = useWeb3React()\n    const [encryptionKey, setKey] = useState('')\n    const [textToEncrypt, setTextToEncrypt] = useState('')\n    const [encryptionKeyInitialized, setEncryptionKeyInitialized] = useState('')\n    const [senderAddress, setSenderAddress] = useState('')\n    const [notificationState, setNotificationState] = useState({})\n    const [messageSessionSentCounter, setMessageSessionSentCounter] = useState(0)\n    const [loading, setLoading] = useState(false)\n    const [estimatedReward, setEstimatedReward] = useState(\"9.32\");\n    const [addressList, setAddressList] = useState<string[]>([])\n    const [error, setError] = useState<string | null>(null);\n    const [ input, setInput ] = useState(JSON.parse(localStorage.getItem('input') || 'null'));\n    \n\n    useEffect(() => {\n        if(input !== null && input.match(/^0x[a-fA-F0-9]{40}$/g))\n            addressList.push(input)\n    }, []);\n\n    useEffect(() => {\n        if (!encryptionKeyInitialized) {\n            getPublicEncryptionKey()\n        }\n    }, []);\n\n    function handleKeyDown(evt: any) {\n        if ([\"Enter\", \"Tab\", \",\"].includes(evt.key)) {\n            evt.preventDefault();\n\n            var value = senderAddress.trim();\n\n            if (value && isValid(value)) {\n                setAddressList([...addressList, senderAddress])\n                setSenderAddress(\"\")\n            }\n        }\n    }\n\n    function handleChange(evt: any) {\n        setSenderAddress(evt.target.value)\n        setError(null)\n    }\n\n    function handleDelete(item: any) {\n        setAddressList(addressList.filter(i => i !== item))\n    }\n\n    function handlePaste(evt: any) {\n        evt.preventDefault()\n\n        var paste = evt.clipboardData.getData(\"text\")\n        var addresses = paste.match(/^0x[a-fA-F0-9]{40}$/g)\n\n        if (addresses) {\n            var toBeAdded = addresses.filter((address: any) => !isInList(address))\n\n            setAddressList([...addressList, ...toBeAdded])\n        }\n    }\n\n    function isValid(address: any) {\n        let error = null;\n\n        if (isInList(address)) {\n            error = `${address} has already been added.`;\n        }\n\n        if (!isAddress(address)) {\n            error = `${address} is not a valid ethereum address.`;\n        }\n\n        if (error) {\n            setNotificationState({\n                message: error, open: true,\n                severity: \"error\"\n            })\n            setError(error);\n\n            return false;\n        }\n\n        return true;\n    }\n\n    function isInList(address: any) {\n        return addressList.includes(address);\n    }\n\n    function isAddress(address: any) {\n        return ethers.utils.isAddress(address);\n    }\n\n    async function encryptText(messageToEncrypt: any, destinationAddresses: any)\n    {\n        setLoading(true);\n        const signer = await library.getSigner(0);\n        let cids:any = []\n        let recipients = destinationAddresses.flat()\n        recipients.push(await signer.getAddress())\n        const deb0xContract = Deb0x(signer, deb0xAddress);\n        for (let address of recipients) {\n            console.log(recipients, address)\n            const destinationAddressEncryptionKey = await deb0xContract.getKey(address);\n            const encryptedMessage = ethUtil.bufferToHex(\n                Buffer.from(\n                    JSON.stringify(\n                        encrypt({\n                            publicKey: destinationAddressEncryptionKey,\n                            data: messageToEncrypt,\n                            version: 'x25519-xsalsa20-poly1305'\n                        }\n                        )\n                    ),\n                    'utf8'\n                )\n            )\n            const message = await client.add(encryptedMessage)\n            cids.push(message.path)\n        }\n\n        try {\n            const overrides = \n                { value: ethers.utils.parseUnits(\"0.001\", \"ether\"), }\n            const tx = await deb0xContract.send(recipients, cids, overrides)\n\n            await tx.wait()\n                .then((result: any) => {\n                    setNotificationState({\n                        message: \"Message was succesfully sent.\",\n                        open: true,\n                        severity: \"success\"\n                    })\n\n                    let count = messageSessionSentCounter + 1;\n                    setMessageSessionSentCounter(count);\n                })\n                .catch((error: any) => {\n                    setNotificationState({\n                        message: \"Message couldn't be sent!\",\n                        open: true,\n                        severity: \"error\"\n                    })\n                    console.log(error)\n                })\n        } catch (error: any) {\n            console.log(error)\n            setNotificationState({\n                message: \"You rejected the transaction. Message was not sent.\",\n                open: true,\n                severity: \"info\"\n            })\n        }\n\n        setTextToEncrypt('');\n        setSenderAddress(\"\");\n        setAddressList([])\n        setLoading(false);\n\n    }\n\n    async function initializeDeb0x() {\n        const signer = await library.getSigner(0);\n        const deb0xContract = Deb0x(signer, deb0xAddress);\n        const tx = await deb0xContract.setKey(encryptionKey);\n        const receipt = await tx.wait();\n\n        return receipt.transactionHash;\n    }\n\n    async function getEncryptionKey() {\n        library.provider.request({\n            method: 'eth_getEncryptionPublicKey',\n            params: [account],\n        })\n            .then((result: any) => {\n                setKey(result);\n            });\n    }\n\n    const getPublicEncryptionKey = async () => {\n        const deb0xContract = Deb0x(library, deb0xAddress)\n        const key = await deb0xContract.getKey(account)\n        console.log(key)\n        console.log(encryptionKey)\n        setEncryptionKeyInitialized(key)\n    }\n    const [editorState, setEditorState] = useState(() =>\n        EditorState.createEmpty()\n    );\n\n    const handleEditorChange = (state: any) => {\n        setEditorState(state);\n        sendContent();\n    };\n\n    const sendContent = () => {\n        setTextToEncrypt(draftToHtml(convertToRaw(editorState.getCurrentContent())));\n    };\n\n    return (\n        <>\n            <SnackbarNotification state={notificationState} \n                setNotificationState={setNotificationState} />\n            <div className=\"form-container container\">\n                <Box component=\"form\"\n                    noValidate\n                    autoComplete=\"off\">\n                    <TextField id=\"standard-basic\"\n                        placeholder=\"Type or paste addresses and press `Enter`...\"\n                        value={senderAddress}\n                        onPaste={handlePaste}\n                        onKeyDown={handleKeyDown}\n                        onChange={handleChange} />\n                    <Stack direction=\"row\" spacing={1}>\n                        <Box sx={{ width: '100%', margin: '0 auto' }}\n                            className=\"address-list\">\n                            {\n                                addressList.map((address: any) => {\n                                    return (\n                                        <Chip\n                                            key={address}\n                                            label={address}\n                                            onDelete={() => handleDelete(address)}\n                                            deleteIcon={<DeleteIcon />}\n                                        />\n                                    )\n                                })\n                            }\n                        </Box>\n                    </Stack>\n                    <Editor\n                        editorState={editorState}\n                        onEditorStateChange={handleEditorChange}\n                        toolbarClassName=\"toolbar\"\n                        wrapperClassName=\"wrapper\"\n                        editorClassName=\"editor\"\n                    />\n\n                    { messageSessionSentCounter === 0 ?\n                        <Box sx={{ display: \"flex\", \n                            alignItems: \"end\", \n                            justifyContent: \"flex-end\", \n                            flexDirection: \"column\", \n                            mr: 1 }}>\n                            {textToEncrypt != '' && senderAddress != '' ?\n                                <Box>\n                                    <Typography>\n                                        <small>\n                                            est. rewards: {estimatedReward} DBX\n                                        </small>\n                                    </Typography>\n                                </Box> : \n                                null\n                            }\n\n                            <LoadingButton className=\"send-btn\" \n                                loading={loading} endIcon={ loading ? null : <SendIcon />}\n                                sx={{ marginLeft: 2, marginTop: 1 }}\n                                disabled={textToEncrypt == '' || addressList == []}\n                                onClick={() => \n                                    encryptText(textToEncrypt, addressList)\n                                } >\n                                { loading ? null : 'Send'}\n                            </LoadingButton>\n                        </Box>\n                        :\n                        <Box sx={{ display: \"flex\", \n                            alignItems: \"end\", \n                            justifyContent: \"flex-end\",\n                            flexDirection: \"column\",\n                            mr: 1 }}>\n                            {textToEncrypt != '' && senderAddress != '' ?\n                                <Box>\n                                    <Typography>\n                                        <small>\n                                            est. rewards: {estimatedReward} DBX\n                                        </small>\n                                    </Typography>\n                                </Box> : \n                                null\n                            }\n\n                            <LoadingButton className=\"send-btn\" \n                                loading={loading} variant=\"contained\" \n                                endIcon={ <SendIcon /> }\n                                sx={{ marginLeft: 2, marginTop: 1 }}\n                                disabled={textToEncrypt === '' || senderAddress === ''}\n                                onClick={() => encryptText(textToEncrypt, senderAddress)}>\n                                Send another message\n                            </LoadingButton>\n                        </Box>\n                    }\n                </Box>\n            </div>\n        </>\n    )\n}","import { sign } from \"crypto\";\nimport { Contract, ethers } from \"ethers\";\n\nconst {abi} = require(\"./Deb0x.json\");\n\nexport default (signerOrProvider, address) => {\n    return new ethers.Contract(address, abi, signerOrProvider);\n}","\nimport { InjectedConnector } from '@web3-react/injected-connector'\nimport { NetworkConnector } from '@web3-react/network-connector'\n\n// const POLLING_INTERVAL = 12000\nconst RPC_URLS: { [chainId: number]: string } = {\n    4: 'https://rinkeby.infura.io/v3/84842078b09946638c03157f83405213'\n}\n\nexport const injected = new InjectedConnector({ supportedChainIds: [4] })\n\nexport const network = new NetworkConnector({\n    urls: { 4: RPC_URLS[4] },\n    defaultChainId: 4\n  })","import { useState, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\n\nimport { injected } from './connectors'\n\nexport function useEagerConnect() {\n  const { activate, active } = useWeb3React()\n\n  const [tried, setTried] = useState(false)\n\n  useEffect(() => {\n    injected.isAuthorized().then((isAuthorized: boolean) => {\n      if (isAuthorized) {\n        activate(injected, undefined, true).catch(() => {\n          setTried(true)\n        })\n      } else {\n        setTried(true)\n      }\n    })\n  }, [activate]) // intentionally only running on mount (make sure it's only mounted once :))\n\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n  useEffect(() => {\n    if (!tried && active) {\n      setTried(true)\n    }\n  }, [tried, active])\n\n  return tried\n}\n\nexport function useInactiveListener(suppress: boolean = false) {\n  const { active, error, activate } = useWeb3React()\n\n  useEffect((): any => {\n    const { ethereum } = window as any\n    if (ethereum && ethereum.on && !active && !error && !suppress) {\n      const handleConnect = () => {\n        console.log(\"Handling 'connect' event\")\n        activate(injected)\n      }\n      const handleChainChanged = (chainId: string | number) => {\n        console.log(\"Handling 'chainChanged' event with payload\", chainId)\n        activate(injected)\n      }\n      const handleAccountsChanged = (accounts: string[]) => {\n        console.log(\"Handling 'accountsChanged' event with payload\", accounts)\n        if (accounts.length > 0) {\n          activate(injected)\n        }\n      }\n      const handleNetworkChanged = (networkId: string | number) => {\n        console.log(\"Handling 'networkChanged' event with payload\", networkId)\n        activate(injected)\n      }\n\n      ethereum.on('connect', handleConnect)\n      ethereum.on('chainChanged', handleChainChanged)\n      ethereum.on('accountsChanged', handleAccountsChanged)\n      ethereum.on('networkChanged', handleNetworkChanged)\n\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener('connect', handleConnect)\n          ethereum.removeListener('chainChanged', handleChainChanged)\n          ethereum.removeListener('accountsChanged', handleAccountsChanged)\n          ethereum.removeListener('networkChanged', handleNetworkChanged)\n        }\n      }\n    }\n  }, [active, error, suppress, activate])\n}","// <!-- By Sam Herbert (@sherb), for everyone. More @ http://goo.gl/7AJzbL -->\nexport function Spinner({ color, ...rest }: any) {\n    return (\n        <svg width=\"38\" height=\"38\" viewBox=\"0 0 38 38\" \n            xmlns=\"http://www.w3.org/2000/svg\" stroke={color} {...rest}>\n            <g fill=\"none\" fillRule=\"evenodd\">\n                <g transform=\"translate(1 1)\" strokeWidth=\"2\">\n                    <circle strokeOpacity=\".5\" cx=\"18\" cy=\"18\" r=\"18\" />\n                    <path d=\"M36 18c0-9.94-8.06-18-18-18\">\n                    <animateTransform\n                        attributeName=\"transform\"\n                        type=\"rotate\"\n                        from=\"0 18 18\"\n                        to=\"360 18 18\"\n                        dur=\"1s\"\n                        repeatCount=\"indefinite\" />\n                    </path>\n                </g>\n            </g>\n        </svg>\n    )\n}","export default __webpack_public_path__ + \"static/media/logo.ad598f25.png\";","import { ethers } from \"ethers\";\n\nconst {abi} = require(\"./Deb0xERC20.json\");\n\nexport default (signerOrProvider, address) => {\n    return new ethers.Contract(address, abi, signerOrProvider);\n}","export default function formatAccountName(account: string)\n{\n    return `${account.substring(0, 5)}...${account.substring(account.length - 4)}`\n}","import { createContext } from \"react\";\n\nexport const initialThemeState = {\n  theme: \"classic\",\n  setTheme: (_value: string) => {}\n};\n\nconst ThemeContext = createContext(initialThemeState);\nexport default ThemeContext;","import React, { useContext } from \"react\";\n\nimport ThemeContext from \"./Contexts/ThemeContext\";\n\nexport default function ThemeSetter() {\n    const useTheme = () => useContext(ThemeContext);\n    const { theme, setTheme } = useTheme()!;\n\n  return (\n    <select value={theme} \n        onChange={(e) => setTheme(e.currentTarget.value)}\n        className=\"form-select\">\n      {themeOptions.map((option, idx) => (\n        <option value={option.value} key={idx}>\n          {option.value}\n        </option>\n      ))}\n    </select>\n  );\n}\n\nconst themeOptions = [{ value: \"classic\" }, { value: \"dark\" }];","import { createContext } from \"react\";\n\nexport const initialContacts = {\n    contacts: [{\n        name: \"Alex Males\",\n        address: \"0x31dcF3b5F43e7017425E25E5A0F006B6f065c349\"\n    }],\n    setContacts: (_values: any) => {}\n}\n\nconst ContactsContext = createContext(initialContacts);\nexport default ContactsContext;\n","import React, { useState, useEffect, useContext } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport Box from '@mui/material/Box';\nimport Drawer from '@mui/material/Drawer';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport AppBar from '@mui/material/AppBar';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\nimport InboxIcon from '@mui/icons-material/MoveToInbox';\nimport SendIcon from '@mui/icons-material/Send';\nimport { Add } from '@mui/icons-material';\nimport Button from '@mui/material/Button'\nimport Popper from '@mui/material/Popper'\nimport { injected } from '../../connectors';\nimport { Spinner } from './Spinner'\nimport { useEagerConnect } from '../../hooks'\nimport Gavel from '@mui/icons-material/Gavel';\nimport Paper from \"@mui/material/Paper\";\nimport InputBase from \"@mui/material/InputBase\";\nimport SearchIcon from \"@mui/icons-material/Search\";\nimport IconButton from \"@mui/material/IconButton\";\nimport logo from \"../../photos/logo.png\"\nimport GitHubIcon from '@mui/icons-material/GitHub';\nimport Deb0xERC20 from \"../../ethereum/deb0xerc20\"\nimport { ethers } from \"ethers\";\nimport formatAccountName from \"../Common/AccountName\";\nimport \"../../componentsStyling/permanentDrawer.scss\";\nimport ThemeSetter from '../ThemeSetter';\nimport ScreenSize from '../Common/ScreenSize';\nimport ContactsContext from '../Contexts/ContactsContext';\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\nimport SnackbarNotification from './Snackbar';\n\nconst deb0xERC20Address = \"0xEde2f177d6Ae8330860B6b37B2F3D767cd2630fe\"\nenum ConnectorNames { Injected = 'Injected' };\n\nconst connectorsByName: { [connectorName in ConnectorNames]: any } = {\n    [ConnectorNames.Injected]: injected\n}\n\nexport function PermanentDrawer(props: any): any {\n    const context = useWeb3React()\n    const { connector, library, chainId, account, activate, deactivate, active, error } = context\n    const [activatingConnector, setActivatingConnector] = useState<any>()\n    const triedEager = useEagerConnect()\n    const [selectedIndex, setSelectedIndex] = useState<any>(1);\n    const [searchBarValue, setSearchBarValue] = useState<any>(\"search\");\n    const [ensName, setEnsName] = useState<any>(\"\");\n    // const [balance, setBalance] = useState<any>(\"8.13\");\n    const [userUnstakedAmount,setUserUnstakedAmount] = useState<any>(0);\n    const menuItems = ['Compose', 'Deb0x', 'Stake', 'Sent'];\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n    const open = Boolean(anchorEl);\n    const id = open ? 'simple-popper' : undefined;\n    const dimensions = ScreenSize();\n    const useContacts = () => useContext(ContactsContext);\n    const { contacts, setContacts } = useContacts()!;\n    const [notificationState, setNotificationState] = useState({})\n\n    if(library){\n        checkENS();\n        setUnstakedAmount();\n    }\n\n    useEffect(() => {\n        if (activatingConnector && activatingConnector === connector) {\n            setActivatingConnector(undefined)\n        }\n    }, [activatingConnector, connector])\n\n    async function setUnstakedAmount() {\n        const deb0xERC20Contract = Deb0xERC20(library, deb0xERC20Address)\n        if(account){\n            const balance = await deb0xERC20Contract.balanceOf(account)\n            setUserUnstakedAmount(ethers.utils.formatEther(balance))\n        }\n    }\n\n    async function checkENS(){\n \n        var name = await library.lookupAddress(account);\n        if(name !== null)\n        {   \n            setEnsName(name);\n        }\n    }\n\n    useEffect(() => {\n        setUnstakedAmount();\n    },[userUnstakedAmount])\n\n    function handleClick (event: React.MouseEvent<HTMLElement>) {\n        setAnchorEl(anchorEl ? null : event.currentTarget);\n    };\n\n    function handleChange(text: any, index: any) {\n        setSelectedIndex(index)\n        props.onChange(text)\n        if(index !== 0)\n            localStorage.removeItem('input')\n    }\n\n    const [display, setDisplay] = useState();\n\n    function displayAddress(index: any) {\n        setNotificationState({});\n        display === index ? setDisplay(undefined) : setDisplay(index);\n    }\n\n    const event = new CustomEvent('localdatachanged');\n    document.dispatchEvent(event);\n\n    return (\n        <>\n            <SnackbarNotification state={notificationState} \n                setNotificationState={setNotificationState} />\n            <Box sx={{ display: 'flex' }}>\n                <CssBaseline />\n                <AppBar className=\"app-bar--top\">\n                    <div className=\"image-container\">\n                        <div className=\"image-overlay\"></div>\n                        <img src={logo}  />\n                    </div>\n                    <Box className=\"main-menu--right\">\n                    { account  ? \n                        <>\n                            <Paper component=\"form\">\n                                <InputBase\n                                    placeholder=\"Search messages\"\n                                    inputProps={{ \"aria-label\": \"search\" }}\n                                    className=\"search-input\" />\n                                <IconButton type=\"submit\" aria-label=\"search\">\n                                    <SearchIcon />\n                                </IconButton>\n                            </Paper>\n                            <Button variant =\"contained\"\n                                    onClick={() => handleChange(\"Stake\", 2)}>\n                                {userUnstakedAmount} DBX\n                            </Button>\n                        </>\n                        : \n                        null }\n                    \n                    { (() =>  {\n                        const currentConnector = connectorsByName[ConnectorNames.Injected]\n                        const activating = currentConnector === activatingConnector\n                        const connected = currentConnector === connector\n                        const disabled = !triedEager || !!activatingConnector || connected || !!error\n\n                        return (\n                            <Button variant=\"contained\"\n                                key={ConnectorNames.Injected}\n                                aria-describedby={id}\n                                onClick={!connected ? \n                                    () => {\n                                        setActivatingConnector(currentConnector)\n                                        activate(currentConnector)\n                                    } : \n                                    handleClick\n                                }>\n                                \n                                { activating ? \n                                    <Spinner color={'black'} /> :\n                                    !connected ? \n                                        \"Connect Wallet\" :\n                                        <span>\n                                            {account === undefined ? \n                                                'Unsupported Network' : \n                                                account ? \n                                                    ensName === \"\" ? \n                                                        `${formatAccountName(account)}` :\n                                                        `${ensName.toLowerCase()} \n                                                        (${formatAccountName(account)})`\n                                                : ''}\n                                        </span>\n                                }\n                            </Button>\n                        )\n                    }) ()}\n                    </Box>\n                </AppBar>\n                <Popper className=\"popper\" id={id} open={open} anchorEl={anchorEl}>\n                    <List>\n                        <ListItem className=\"theme-select\">\n                            <ThemeSetter />\n                        </ListItem>\n                        <ListItem className='logout'>\n                            <Button \n                                onClick={(event: any) => {\n                                    handleClick(event)\n                                    deactivate()\n                                }}\n                                className=\"logout-btn\">\n                                Logout \n                            </Button>\n                        </ListItem>\n                    </List>\n                </Popper>\n                <Drawer variant=\"permanent\"\n                    anchor={dimensions.width > 768 ? 'left' : 'bottom'}\n                    className=\"side-menu\">\n                    <List >\n                        {menuItems.map((text, index) => (\n                            <>\n                                \n                                <ListItem button key={text} \n                                    selected={selectedIndex === index} \n                                    onClick={() => handleChange(text, index)}\n                                    className={`list-item ${index === 0 ? \"send-item\" : \"\"}` }>\n                                    <ListItemIcon className=\"icon\" >\n                                        {index === 0 && <Add />}\n                                        {index === 1 && <InboxIcon />}\n                                        {index === 2 && <Gavel />}\n                                        {index === 3 && <SendIcon />}\n                                    </ListItemIcon>\n                                    <ListItemText className=\"text\" primary={text} />\n                                </ListItem>\n                            </>\n                        ))}\n                    </List>\n                    \n                    <div className=\"side-menu--bottom\">\n                        <>\n                            <div className=\"contacts\">\n                                <List>\n                                    <p>Contacts</p>\n                                    {\n                                        contacts.map((contact: any, index: any) => (\n                                                <>\n                                                <ListItem button key={contact.name}\n                                                    onClick={() => displayAddress(index)}>\n                                                    <ListItemText className=\"text\" primary={contact.name} />\n                                                </ListItem>\n                                                {display == index ? \n                                                    <ListItem className=\"row contact-item\" key={index}>\n                                                        <ListItemText className=\"text col-8\" primary={contact.address} />\n                                                        <div className=\"col-4 buttons\">\n                                                            <IconButton size=\"small\"\n                                                                onClick={() => {\n                                                                        navigator.clipboard.writeText(contact.address);\n                                                                        setNotificationState({\n                                                                            message: \"Address added to clipboard.\",\n                                                                            open: true,\n                                                                            severity: \"success\"\n                                                                        })\n                                                                    }}>\n                                                                <ContentCopyIcon fontSize=\"small\"/>\n                                                            </IconButton>\n                                                            <IconButton size=\"small\"\n                                                                onClick={() => {\n                                                                    setNotificationState({})\n                                                                    localStorage.setItem(\"input\", JSON.stringify(contact.address))\n                                                                    handleChange(\"Compose\", 0)\n                                                                }}>\n                                                                <SendIcon fontSize=\"small\"/>\n                                                            </IconButton>\n                                                        </div>\n                                                    </ListItem>\n                                                    : <></>}\n                                                </>\n                                        ))\n                                    }\n                                </List>\n                            </div>\n                            <div className=\"content\">\n                                <a href=\"https://github.com/deb0x\" target=\"_blank\">\n                                <GitHubIcon  />\n                                </a>\n                                <a href=\"https://www.deb0x.org\" target=\"_blank\">\n                                    www.deb0x.org\n                                </a>\n                            </div>\n                        </>\n                    </div>\n                </Drawer>\n            </Box>\n        </>\n    );\n}","import React, { useState, useEffect } from 'react'\n\nexport default function useWindowSize() {\n    // Initialize state with undefined width/height so server and client renders match\n    // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n    const [windowSize, setWindowSize] = useState({\n      width: 0,\n      height: 0,\n    });\n    useEffect(() => {\n      // Handler to call on window resize\n      function handleResize() {\n        // Set window width/height to state\n        setWindowSize({\n          width: window.innerWidth,\n          height: window.innerHeight,\n        });\n      }\n      // Add event listener\n      window.addEventListener(\"resize\", handleResize);\n      // Call handler right away so state gets updated with initial window size\n      handleResize();\n      // Remove event listener on cleanup\n      return () => window.removeEventListener(\"resize\", handleResize);\n    }, []); // Empty array ensures that effect is only run on mount\n    return windowSize;\n  }","import {useState, Fragment} from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport Box from '@mui/material/Box';\nimport Stepper from '@mui/material/Stepper';\nimport Step from '@mui/material/Step';\nimport StepLabel from '@mui/material/StepLabel';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport Typography from '@mui/material/Typography';\nimport Deb0x from \"../../ethereum/deb0x\"\nimport SnackbarNotification from './Snackbar';\nimport '../../componentsStyling/stepper.scss';\nconst deb0xAddress = \"0x13dA6EDcdD7F488AF56D0804dFF54Eb17f41Cc61\";\nconst steps = ['Provide public encryption key', 'Initialize Deb0x'];\n\nexport default function HorizontalLinearStepper(props: any) {\n    const { account, library } = useWeb3React()\n    const [encryptionKey, setEncryptionKey] = useState('')\n    const [activeStep, setActiveStep] = useState(0);\n    const [whichStepFailed, setStepFailed] = useState<number | undefined>(undefined)\n    const [loading, setLoading] = useState(false)\n    const [notificationState, setNotificationState] = useState({})\n\n    const handleNext = () => {\n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    };\n\n    async function getEncryptionKey() {\n        setLoading(true)\n\n        library.provider.request({\n            method: 'eth_getEncryptionPublicKey',\n            params: [account],\n        })\n            .then((result: any) => {\n                setEncryptionKey(result);\n                handleNext()\n                setStepFailed(undefined)\n                setLoading(false)\n                \n            })\n            .catch((error: any) => {\n                setNotificationState({message: \"You rejected to provide the public encryption key.\", open: true,\n                severity:\"info\"})\n                setStepFailed(0)\n                setLoading(false)\n            });\n        \n    }\n\n    async function initializeDeb0x() {\n        setLoading(true)\n\n        const signer = await library.getSigner(0)\n\n        const deb0xContract = Deb0x(signer, deb0xAddress)\n\n        try {\n            const tx = await deb0xContract.setKey(encryptionKey)\n\n            tx.wait()\n            .then((result: any) => {\n                setNotificationState({message: \"Deb0x was succesfully initialized.\", open: true,\n                severity:\"success\"})\n                setLoading(false)\n                props.onDeboxInitialization(true)\n                \n            })\n            .catch((error: any) => {\n                setNotificationState({message: \"Deb0x couldn't be initialized!\", open: true,\n                severity:\"error\"})\n                setLoading(false)\n            })\n        } catch(error: any) {\n            setNotificationState({message: \"You rejected the transaction. Deb0x was not initialized.\", open: true,\n                severity:\"info\"})\n                setLoading(false)\n        }\n\n    }\n\n    return (\n        <>\n            <SnackbarNotification state={notificationState} setNotificationState={setNotificationState}/>\n            <Box className=\"stepper-box\" sx={{ width: '100%', maxWidth: 1080 }}>\n                <Stepper activeStep={activeStep} className=\"stepper\">\n                    {steps.map((label, index) => {\n                        const stepProps: { completed?: boolean } = {};\n                        const labelProps: {\n                            optional?: React.ReactNode;\n                            error?: boolean;\n                        } = {};\n                        if (whichStepFailed === index) {\n                            labelProps.optional = (\n                            <Typography variant=\"caption\" color=\"error\">\n                                {(activeStep === 0) ? \"User didn't provide encryption key\" : \"User rejected transaction\"}\n                            </Typography>\n                            );\n                            labelProps.error = true;\n                        }\n                        return (\n                            <Step key={label} {...stepProps}>\n                                <StepLabel {...labelProps} >{label} </StepLabel>\n                            </Step>\n                        );\n                    })}\n                </Stepper>\n                {<Fragment>\n                    <Box className=\"button-box\" sx={{ display: 'flex', flexDirection: 'row', pt: 2 }}>\n                        <LoadingButton className=\"init-btn\" loading={loading} sx={{ marginLeft: 5 }} variant=\"contained\" onClick={\n                            (activeStep === 0) ? getEncryptionKey : initializeDeb0x\n                        }>\n                            {activeStep === steps.length - 1 ? 'Initialize' : 'Provide'}\n                        </LoadingButton>\n                    </Box>\n                </Fragment>\n                }\n            </Box>\n        </>\n    );\n}\n","import { Add } from \"@mui/icons-material\";\nimport { Box, IconButton, Modal } from \"@mui/material\";\nimport { useContext, useEffect, useState } from \"react\";\n\nimport ContactsContext from \"./Contexts/ContactsContext\";\n\nexport default function ContactsSetter(props: any) {\n    const useContacts = () => useContext(ContactsContext);\n    const { contacts, setContacts } = useContacts()!;\n    const [name, setName] = useState<string>(\"\");\n    const [address, setAddress] = useState<string>(props.props);\n    const [open, setOpen] = useState(false);\n    const handleOpen = () => setOpen(true);\n\n    const addContact = () => {\n        contacts.push({name: name, address: address})\n        setContacts([...contacts])\n        setOpen(false)\n    }\n\n    useEffect(() => {\n        localStorage.setItem('contacts', JSON.stringify(contacts));\n    }, [contacts, localStorage]);\n\n    return (\n        <>\n            <IconButton onClick={handleOpen}>\n                <Add />\n            </IconButton>\n            <Modal open={open}>\n            <Box className=\"modal-box\">\n                <form>\n                    <div className=\"form-group\">\n                        <label>Name</label>\n                        <input key=\"name\" className=\"form-control\"\n                            onChange={(e) => setName(e.currentTarget.value)}/>\n                    </div>\n                    <div className=\"form-group\">\n                        <label>Address</label>\n                        <input readOnly key=\"address\" className=\"form-control\"\n                            value={props.props}/>\n                    </div>\n                    <button className=\"btn btn-outline-dark mt-2\" type=\"button\" \n                        onClick={addContact}>\n                        ADD\n                    </button>\n                </form>\n            </Box>\n            </Modal>\n        </>\n    );\n}","export default __webpack_public_path__ + \"static/media/lock.65ca8a73.svg\";","export default __webpack_public_path__ + \"static/media/airplane.b624487e.svg\";","export default __webpack_public_path__ + \"static/media/users.0aa8c902.svg\";","export default __webpack_public_path__ + \"static/media/hand.9e6a2b93.svg\";","import { useState, useEffect } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport Deb0x from \"../../ethereum/deb0x\"\nimport {\n    Tooltip, List, ListItem, ListItemText, ListItemButton, Typography, Box, \n    CircularProgress,\n    Button,\n    Modal\n} from '@mui/material';\nimport Stepper from './Stepper'\nimport IconButton from \"@mui/material/IconButton\";\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\nimport Pagination from \"@mui/material/Pagination\";\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport MailOutlineIcon from '@mui/icons-material/MailOutline';\nimport axios from 'axios';\nimport formatAccountName from \"../Common/AccountName\";\nimport \"../../componentsStyling/decrypt.scss\"\nimport { Add } from '@mui/icons-material';\nimport ContactsSetter from '../ContactsSetter';\nimport lock from '../../photos/lock.svg';\nimport airplane from '../../photos/airplane.svg';\nimport users from '../../photos/users.svg';\nimport hand from '../../photos/hand.svg';\n\nconst deb0xAddress = \"0x13dA6EDcdD7F488AF56D0804dFF54Eb17f41Cc61\"\n\nexport function Decrypt(props: any): any {\n    const { account, library } = useWeb3React()\n    const [loading, setLoading] = useState(true)\n    const [encryptionKeyInitialized, setEncryptionKeyInitialized] = \n        useState<boolean|undefined>(undefined);\n    const [decrypted, setDecrypted] = useState<any>();\n\n\n    useEffect(() => {\n        setLoading(true)\n        getPublicEncryptionKey()\n    }, [account]);\n\n    const getPublicEncryptionKey = async () => {\n        const deb0xContract = Deb0x(library, deb0xAddress)\n        const key = await deb0xContract.getKey(account)\n        const initialized = (key != '') ? true : false\n        setEncryptionKeyInitialized(initialized)\n    }\n\n    async function decrypt(encryptedMessage: any) {\n        try {\n            const decryptedMessage = await library.provider.request({\n                method: 'eth_decrypt',\n                params: [encryptedMessage, account],\n            });\n            return decryptedMessage\n        } catch (error) {\n            return undefined\n        }\n    }\n\n    async function fetchMessage(message: any) {\n        return await axios.get(`https://ipfs.io/ipfs/${message}`)\n    }\n\n    function Message(props: any) {\n        const encryptMessage = props.message.fetchedMessage.data\n        const [message, setMessage] =\n            useState(props.message.fetchedMessage.data)\n        const [ensName,setEnsName] = useState(\"\");\n        //const [sender, setSender] = useState(props.messsage.sender)\n        const [messageTime, setMessageTime] = useState(\"Mar 17, 18:36\")\n        const [isDecrypted, setIsDecrypted] = useState(false);\n\n        useEffect(()=>{\n            checkENS();\n        },[])\n\n        useEffect(()=>{\n            if(props.index !== props.previousIndex && isDecrypted===true){\n                hideMessage();\n            }\n\n        },[props.previousIndex])\n\n\n        async function checkENS() {\n            let name = await library.lookupAddress(props.message.sender);\n            if(name !== null) {   \n                setEnsName(name);\n            }\n        }\n\n        async function decryptMessage() {\n            const decryptedMessage = await decrypt(message)\n            if(decryptedMessage) {\n                setIsDecrypted(false);\n                setMessage(decryptedMessage);\n                setIsDecrypted(true);\n                props.setPreviousIndex(props.index);\n            }\n        }\n\n        async function hideMessage() {\n            setMessage(encryptMessage);\n            setIsDecrypted(false);\n        }\n\n        return (\n            <ListItem sx ={{border:1, marginBottom:1}} \n                disablePadding \n                key={props.index}    \n                secondaryAction={ \n                    <IconButton className={`${\n                            (message !== props.message.fetchedMessage.data) ? \n                            \"list-item-btn\" : \"\"}`\n                        }  \n                        onClick={()=>{hideMessage()}}  \n                        edge=\"end\" \n                        aria-label=\"comments\">\n                        { (message !== props.message.fetchedMessage.data) ? \n                            <VisibilityOffIcon className='visibility-icon' /> : null\n                        }\n                    </IconButton>  \n                }\n                className=\"messages-list-item\">\n                <ListItemButton \n                    className={`list-item-button ${isDecrypted ? \"active\" : \"\"}` }\n                    onClick={() => {\n                        if(message === props.message.fetchedMessage.data) {\n                            decryptMessage()\n                        }\n                    }}>\n                    <ListItemText primary={\n                        <>\n                            <div className=\"message-left\">\n                                <div className=\"message-heading\">\n                                    <p><strong>\n                                        {ensName !== \"\" ? ensName : formatAccountName(props.message.sender)}\n                                    </strong></p>\n                                    <p className=\"time-stamp\"><small>\n                                        {messageTime}\n                                    </small></p>\n                                </div>\n                                <p className=\"message message-overflow\"\n                                    dangerouslySetInnerHTML={{ __html: message }} />\n                            </div>\n                            {isDecrypted ? \n                                <div className=\"message-right\">\n                                    <div className=\"message-heading\">\n                                        <div className=\"address\">\n                                            <p>From: \n                                                <strong>\n                                                    {ensName !== \"\" ? \n                                                        ensName : \n                                                        formatAccountName(\n                                                            props.message.sender\n                                                        )\n                                                    }\n                                                </strong>\n                                            </p>\n                                            <ContactsSetter props={props.message.sender}/>\n                                        </div>\n                                        \n                                        <p className=\"time-stamp\"><small>\n                                            {messageTime}\n                                        </small></p>\n                                    </div>\n                                    <p className=\"message\" \n                                        dangerouslySetInnerHTML={{ __html: message }} />\n                                </div> : \n                                <></> \n                            }\n                        </> \n                    }/>\n                </ListItemButton>\n            </ListItem>\n        )\n    }\n\n    function GetMessages() {\n        const [fetchedMessages, setFetchedMessages] = useState<any>([])\n        const [previousIndex, setPreviousIndex] = useState<number>();\n\n        useEffect(() => {\n            processMessages()\n        }, []);\n\n\n\n        async function processMessages() {\n            const deb0xContract = Deb0x(library, deb0xAddress)\n            const senderAddresses = \n                await deb0xContract.fetchMessageSenders(account)\n            const cidsPromises = \n                senderAddresses.map(async function(sender:any) {\n                    return { \n                        cids: await deb0xContract.fetchMessages(account, sender),\n                        sender: sender\n                    }\n                })\n\n            const cids = await Promise.all(cidsPromises)\n\n            const encryptedMessagesPromisesArray = \n                cids.map(async function(cidArray: any) {\n                    const encryptedMessagesPromises = \n                        cidArray.cids.map(async function (cid: any) {\n                            return { \n                                fetchedMessage: await fetchMessage(cid),\n                                sender: cidArray.sender\n                            }\n                        })\n                    const promise = await Promise.all(encryptedMessagesPromises)\n\n                    return promise\n                })\n\n            const encryptedMessages = \n                await Promise.all(encryptedMessagesPromisesArray)\n            \n            setFetchedMessages(encryptedMessages.flat())\n            setLoading(false)\n\n        }\n\n        if(!loading) {\n            if (fetchedMessages.length === 0) {\n                return (\n                    <div className=\"message-placeholder\">\n                        <MailOutlineIcon />\n                        <Typography variant=\"h5\"\n                            gutterBottom\n                            component=\"div\"\n                            sx={{marginLeft: .8, marginTop: 3}}>\n                            No messages yet.\n                        </Typography>\n                    </div>\n                )\n            } else {\n                return (\n                    <Box sx={{ width: '100%', maxWidth: 1080, margin: '0 auto'}}>\n                        <div className=\"row messages-list\">\n                            <List className=\"col-md-3 col-sm-12\">\n                                {fetchedMessages.map((message: any, i: any) => {\n                                    return (\n                                        <Message message={message} index={i} \n                                            key={i} previousIndex={previousIndex} \n                                            setPreviousIndex={setPreviousIndex} />\n                                    )\n                                })}\n                            </List>\n                            <Box className=\"intro-box col-md-9\">\n                                <div>\n                                    <div className=\"row\">\n                                        <div className=\"col-6\">\n                                            <h2>The End To End Encrypted...</h2>\n                                            <p>\n                                                Leverages the greatest social repository of public key cryptography to \n                                                enable the ability to send encrypted messages to any person that owns \n                                                an Ethereum address or ENS domain name. This way it makes end to end \n                                                message encryption a practical, built-in feature that is accessible \n                                                to any wallet owner (like Metamask, Trustwallet and others).\n                                            </p>\n                                        </div>\n                                        <div className=\"col-6\">\n                                            <img src={ lock }/>\n                                        </div>\n                                    </div>\n                                    <div className=\"row\">\n                                        <div className=\"col-6\">\n                                            <img src={ airplane }/>\n                                        </div>\n                                        <div className=\"col-6\">\n                                            <h2>Decentralized Email Protocol...</h2>\n                                            <p>\n                                            There is no centralized place of control that can censor deb0x email \n                                            transmission. The immutable smart contract implementation of the \n                                            protocol inherits the security and decentralization of the blockchain \n                                            that it is deployed to. At the same time, the pluggable storage \n                                            architecture and multiple incentivized frontend providers offer \n                                            various options for degrees of privacy and usability to the end users.\n                                            </p>\n                                        </div>\n                                    </div>\n                                    <div className=\"row\">\n                                        <div className=\"col-6\">\n                                            <h2>Owned By Its Users!</h2>\n                                            <p>\n                                                All deb0x users earn tokens that represent equity and revenue share for \n                                                future programmed usage fees of the protocol. Thanks to the distribution \n                                                curve, adopters earn more tokens the earlier they use the protocol. \n                                                The frontend application builders are also incentivised, while the \n                                                referral scheme creates an attractive token earning context that \n                                                drives the overall deb0x protocol adoption.\n                                            </p>\n                                        </div>\n                                        <div className=\"col-6\">\n                                            <img src={ users }/>\n                                        </div>\n                                    </div>\n                                    <div className=\"row\">\n                                        <div className=\"col-6\">\n                                            <img src={ hand }/>\n                                        </div>\n                                        <div className=\"col-6\">\n                                            <h2>... and there are</h2>\n                                            <p>\n                                                no premines, no treasury allocations, no private sales, no dev fees! The \n                                                token distribution algorithm is pre-programmed and can never be changed. \n                                                The launch date that will kick off the rewards will be announced one to \n                                                two weeks in advance on this page.\n                                            </p>\n                                        </div>\n                                    </div>\n                                </div>\n                            </Box>\n                        </div>\n                    </Box>\n                )\n            }\n        } else {\n            return (\n                <div className=\"spinner\">\n                    <CircularProgress/>\n                </div>\n            )\n        }\n    }\n    \n    if (encryptionKeyInitialized === true) {\n        return (\n            <div>\n                <Box>\n                    <Box className=\"pagination\" sx={{display:\"flex\"}}>\n                        <Pagination count={1} showFirstButton showLastButton />\n                        <IconButton size=\"large\" onClick={()=> setLoading(true) }>\n                            <RefreshIcon fontSize=\"large\"/>\n                        </IconButton>\n                    </Box>\n                    <Box>\n                        <GetMessages />\n                    </Box>\n                </Box>\n            </div>\n        )\n    } else if (encryptionKeyInitialized === false) {\n        return (\n            <Stepper onDeboxInitialization={getPublicEncryptionKey}/>\n        )\n    } else {\n        return(\n            <div className=\"spinner\">\n                <CircularProgress/>\n            </div>\n        )\n    }\n}","import { useState, useEffect } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport {\n    Card, CardActions, CardContent, Button, Grid,\n    Typography, TextField, Divider,Box\n} from '@mui/material';\n\nimport ToggleButton from '@mui/material/ToggleButton';\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport Deb0x from \"../../ethereum/deb0x\"\nimport Deb0xERC20 from \"../../ethereum/deb0xerc20\"\nimport SnackbarNotification from './Snackbar';\nimport { ethers } from \"ethers\";\nimport \"../../componentsStyling/stake.scss\";\n\nconst deb0xAddress = \"0x13dA6EDcdD7F488AF56D0804dFF54Eb17f41Cc61\"\nconst deb0xERC20Address = \"0xEde2f177d6Ae8330860B6b37B2F3D767cd2630fe\"\n\nexport function Stake(props: any): any {\n    const { account, library } = useWeb3React()\n    const [notificationState, setNotificationState] = useState({})\n\n    useEffect(() => {\n        console.log(\"stake component effect\")\n    });\n    \n    function RewardsPanel() {\n\n        const [rewardsUnclaimed, setRewardsUnclaimed] = useState(\"\")\n        const [feeSharePercentage, setFeeSharePercentage] = useState(\"\")\n        const [loading, setLoading] = useState(false)\n\n        useEffect(() => {\n            console.log(\"rewards effect\")\n            rewardsAccrued()\n        }, [rewardsUnclaimed]);\n\n        useEffect(() => {\n            console.log(\"fee share effect\")\n            feeShare()\n        }, [feeSharePercentage]);\n\n        async function rewardsAccrued() {\n            const deb0xContract = await Deb0x(library, deb0xAddress)\n\n            const unclaimedRewards = await deb0xContract.earnedNative(account);\n\n            setRewardsUnclaimed(ethers.utils.formatEther(unclaimedRewards))\n        }\n\n        async function feeShare() {\n            console.log(\"aicii\")\n            const deb0xContract = await Deb0x(library, deb0xAddress)\n            console.log(\"1\")\n            \n            let balance = parseFloat((ethers.utils.formatEther((await deb0xContract.balanceERC20(account)) )) )\n            console.log(balance + \" balance\")\n            \n            let totalSupply = parseFloat((ethers.utils.formatEther((await deb0xContract.totalSupply())) ))\n            console.log(totalSupply + \" totalSupply\")\n            const feeShare = balance * 100 / totalSupply\n            console.log(feeShare + \" feeShare\")\n            setFeeSharePercentage(((Math.round(feeShare * 100) / 100).toFixed(2)).toString() + \"%\")\n        }\n\n        async function claimRewards() {\n            setLoading(true)\n\n            const signer = await library.getSigner(0)\n\n            const deb0xContract = Deb0x(signer, deb0xAddress)\n\n            try {\n                const tx = await deb0xContract.getRewardNative()\n\n                tx.wait()\n                    .then((result: any) => {\n                        setNotificationState({\n                            message: \"You succesfully claimed your rewards.\", open: true,\n                            severity: \"success\"\n                        })\n                        //setLoading(false)\n\n                    })\n                    .catch((error: any) => {\n                        setNotificationState({\n                            message: \"Rewards couldn't be claimed!\", open: true,\n                            severity: \"error\"\n                        })\n                        setLoading(false)\n                    })\n            } catch (error: any) {\n                setNotificationState({\n                    message: \"You rejected the transaction. Your rewards haven't been claimed.\", open: true,\n                    severity: \"info\"\n                })\n            }\n\n\n        }\n\n        return (\n            <Card variant=\"outlined\" className=\"card-container\">\n                <CardContent>\n                    <Typography variant=\"h4\" component=\"div\">\n                        REWARDS\n                    </Typography>\n                    <Divider className=\"divider-pink\" />\n                    <Typography>\n                        Your unclaimed rewards:\n                    </Typography>\n                    <Typography variant=\"h6\">\n                        <strong>{rewardsUnclaimed}</strong>\n                    </Typography>\n                    <Divider className=\"divider-pink\" />\n                    <Typography>\n                        Your share from fees:\n                    </Typography>\n                    <Typography variant=\"h6\">\n                        <strong>{feeSharePercentage}</strong>\n                    </Typography>\n                    <Divider className=\"divider-pink\" />\n                </CardContent>\n                <CardActions>\n                    <LoadingButton className=\"submit-btn\" loading={loading} variant=\"contained\" onClick={claimRewards}>Collect</LoadingButton>\n                </CardActions>\n            </Card>\n        )\n    }\n\n\n\n    function StakeUnstake() {\n        const [alignment, setAlignment] = useState(\"stake\");\n\n        const [userStakedAmount, setUserStakedAmount] = useState(\"\")\n        const [userUnstakedAmount, setUserUnstakedAmount] = useState(\"\")\n        const [totalStaked, setTotalStaked] = useState(\"\")\n        const [amountToUnstake, setAmountToUnstake] = useState(\"\")\n        const [amountToStake, setAmountToStake] = useState(\"\")\n        const [loading, setLoading] = useState(false)\n        const [approved, setApproved] = useState<Boolean | null>(false)\n\n        const handleChange = (\n            event: React.MouseEvent<HTMLElement>,\n            newAlignment: string,\n        ) => {\n            setAlignment(newAlignment);\n        };\n\n       \n\n        useEffect(() => {\n            console.log(\"user staked effect\")\n            setStakedAmount()\n        }, [userStakedAmount]);\n\n        useEffect(() => {\n            console.log(\"total staked effect\")\n            totalAmountStaked()\n        }, [totalStaked]);\n\n        useEffect(() => {\n            console.log(\"user unstaked effect\")\n            setUnstakedAmount()\n        }, [userUnstakedAmount]);\n\n        useEffect(() => {\n            console.log(\"approval effect\")\n            setApproval()\n        }, [approved]);\n\n        async function setStakedAmount() {\n\n            const deb0xContract = await Deb0x(library, deb0xAddress)\n\n            const balance = await deb0xContract.balanceERC20(account)\n\n            setUserStakedAmount(ethers.utils.formatEther(balance))\n        }\n\n        async function setUnstakedAmount() {\n            const deb0xERC20Contract = await Deb0xERC20(library, deb0xERC20Address)\n\n            const balance = await deb0xERC20Contract.balanceOf(account)\n\n            setUserUnstakedAmount(ethers.utils.formatEther(balance))\n        }\n\n        async function setApproval() {\n            const deb0xERC20Contract = await Deb0xERC20(library, deb0xERC20Address)\n\n            const allowance = await deb0xERC20Contract.allowance(account, deb0xAddress)\n\n            allowance > 0 ? setApproved(true) : setApproved(false)\n        }\n\n        async function totalAmountStaked() {\n\n            const deb0xContract = await Deb0x(library, deb0xAddress)\n\n            const totalSupply = await deb0xContract.totalSupply()\n\n            setTotalStaked(ethers.utils.formatEther(totalSupply))\n        }\n\n        async function approveStaking() {\n            setLoading(true)\n\n            const signer = await library.getSigner(0)\n\n            const deb0xERC20Contract = await Deb0xERC20(signer, deb0xERC20Address)\n\n            try {\n                const tx = await deb0xERC20Contract.approve(deb0xAddress, ethers.utils.parseEther(\"1000000\"))\n\n                tx.wait()\n                    .then((result: any) => {\n                        setNotificationState({\n                            message: \"Your succesfully approved contract for staking.\", open: true,\n                            severity: \"success\"\n                        })\n                        setLoading(false)\n\n                    })\n                    .catch((error: any) => {\n                        setNotificationState({\n                            message: \"Contract couldn't be approved for staking!\", open: true,\n                            severity: \"error\"\n                        })\n                        setLoading(false)\n                    })\n            } catch (error) {\n                setNotificationState({\n                    message: \"You rejected the transaction. Contract hasn't been approved for staking.\", open: true,\n                    severity: \"info\"\n                })\n                setLoading(false)\n            }\n        }\n\n        async function unstake() {\n            setLoading(true)\n\n            const signer = await library.getSigner(0)\n\n            const deb0xContract = Deb0x(signer, deb0xAddress)\n\n            try {\n                const tx = await deb0xContract.unStakeERC20(ethers.utils.parseEther(amountToUnstake.toString()))\n\n                tx.wait()\n                    .then((result: any) => {\n                        setNotificationState({\n                            message: \"Your tokens were succesfully unstaked.\", open: true,\n                            severity: \"success\"\n                        })\n                        setLoading(false)\n\n                    })\n                    .catch((error: any) => {\n                        setLoading(false)\n                        setNotificationState({\n                            message: \"Your tokens couldn't be unstaked!\", open: true,\n                            severity: \"error\"\n                        })\n\n                    })\n\n            } catch (error: any) {\n                setNotificationState({\n                    message: \"You rejected the transaction. Your tokens haven't been unstaked.\", open: true,\n                    severity: \"info\"\n                })\n                setLoading(false)\n            }\n        }\n\n        async function stake() {\n            setLoading(true)\n\n            const signer = await library.getSigner(0)\n\n            const deb0xContract = Deb0x(signer, deb0xAddress)\n\n            try {\n                const tx = await deb0xContract.stakeERC20(ethers.utils.parseEther(amountToStake.toString()))\n\n                tx.wait()\n                    .then((result: any) => {\n                        setNotificationState({\n                            message: \"Your tokens were succesfully staked.\", open: true,\n                            severity: \"success\"\n                        })\n                        //setLoading(false)\n\n                    })\n                    .catch((error: any) => {\n                        setNotificationState({\n                            message: \"Your tokens couldn't be staked!\", open: true,\n                            severity: \"error\"\n                        })\n                        setLoading(false)\n                    })\n\n            } catch (error: any) {\n                setNotificationState({\n                    message: \"You rejected the transaction. Your tokens haven't been staked.\", open: true,\n                    severity: \"info\"\n                })\n                setLoading(false)\n            }\n        }\n\n        return (\n            <Card variant = \"outlined\" className=\"card-container\">\n                <ToggleButtonGroup\n                    color=\"primary\"\n                    value={alignment}\n                    exclusive\n                    onChange={handleChange}\n                    className=\"tab-container\"\n                >\n                    <ToggleButton className=\"tab-btn\" value=\"stake\">Stake</ToggleButton>\n                    <ToggleButton className=\"tab-btn\" value=\"unstake\">Unstake</ToggleButton>\n\n                </ToggleButtonGroup>\n              \n            {\n                alignment === \"stake\" ?\n                \n                <>\n                <CardContent>\n                    <Typography>\n                        Your staked amount:\n                    </Typography>\n                    <Typography variant=\"h6\">\n                        <strong>{userStakedAmount} DBX</strong>\n                    </Typography>\n                    <Divider className=\"divider-pink\" />\n                    <Typography>\n                        Your tokens in wallet:\n                    </Typography>\n                    <Typography variant=\"h6\">\n                        <strong>{userUnstakedAmount} DBX</strong>\n                    </Typography>\n                    {approved && <Grid className=\"amount-row\" container spacing={2}>\n                        <Grid item>\n                            <TextField id=\"outlined-basic\"\n                                label=\"Amount to stake\"\n                                variant=\"outlined\"\n                                type=\"number\"\n                                value={amountToStake}\n                                onChange={e => setAmountToStake(e.target.value)} />\n                        </Grid>\n                        <Grid className=\"max-btn-container\" item>\n                            <Button className=\"max-btn\" \n                                size=\"small\" variant=\"contained\" color=\"error\" \n                               onClick = {()=>setAmountToStake(userUnstakedAmount)  }>\n                                max\n                            </Button>\n                        </Grid>\n                    </Grid>}\n                </CardContent>\n                <CardActions>\n                    {approved && <LoadingButton disabled={!amountToStake} className=\"submit-btn\" loading={loading} variant=\"contained\" onClick={stake}>Stake</LoadingButton>}\n                    {!approved && <LoadingButton className=\"submit-btn\" loading={loading} variant=\"contained\" onClick={approveStaking}>Approve Staking</LoadingButton>}\n                </CardActions>\n                </>\n                : \n\n                <>\n                <CardContent>\n                    \n                    <Typography>\n                        Your staked amount:\n                    </Typography>\n                    <Typography variant=\"h6\">\n                        <strong>{userStakedAmount} DBX</strong>\n                    </Typography>\n                    <Divider className=\"divider-pink\" />\n\n                    <Typography>\n                        Your tokens in wallet:\n                    </Typography>\n                    <Typography variant=\"h6\">\n                        <strong>{userUnstakedAmount} DBX</strong>\n                    </Typography>\n                  \n\n                    <Grid className=\"amount-row\" container spacing={2}>\n                        <Grid item>\n                            <TextField value={amountToUnstake}\n                                id=\"outlined-basic\"\n                                label=\"Amount to unstake\"\n                                variant=\"outlined\"\n                                onChange={e => setAmountToUnstake(e.target.value)}\n                                type=\"number\" />\n                        </Grid>\n                        <Grid className=\"max-btn-container\" item>\n                            <Button className=\"max-btn\"\n                                size=\"small\" variant=\"contained\" color=\"error\" \n                                onClick = {()=>setAmountToUnstake(userStakedAmount)  }>\n                                max\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </CardContent>\n                <CardActions>\n                    <LoadingButton className=\"submit-btn\" disabled={!amountToUnstake} loading={loading} variant=\"contained\" onClick={unstake}>Unstake</LoadingButton>\n                </CardActions>\n                </>\n            }\n\n            </Card>\n\n        )\n    }\n\n    function TotalStaked() {\n        const [totalStaked, setTotalStaked] = useState(\"\")\n        useEffect(() => {\n            console.log(\"total staked effect\")\n            totalAmountStaked()\n        }, [totalStaked]);\n    \n        async function totalAmountStaked() {\n    \n            const deb0xContract = await Deb0x(library, deb0xAddress)\n    \n            const totalSupply = await deb0xContract.totalSupply()\n    \n            setTotalStaked(ethers.utils.formatEther(totalSupply))\n        }\n\n        return (\n            <Card className=\"heading-card\">\n                <CardContent>\n                    <Typography variant=\"h5\">\n                        Total tokens staked: {totalStaked} DBX\n                    </Typography>\n                </CardContent>\n            </Card>\n        )\n    }\n\n    return (\n        <>\n            <SnackbarNotification state={notificationState} setNotificationState={setNotificationState} />\n            <Box className=\"container\">\n                <div>\n                    <TotalStaked/>\n                </div>\n                <div className=\"cards-grid\">\n                    <div className='row'>\n                        <Grid item className=\"col col-md-6\">\n                            <StakeUnstake/>\n                        </Grid>\n                        <Grid item className=\"col col-md-6\">\n                            <RewardsPanel />\n                        </Grid>\n                    </div>\n                </div>\n            </Box>\n        </>\n    )\n}","export default __webpack_public_path__ + \"static/media/empty.efc45323.png\";","import { useState, useEffect } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport Deb0x from \"../../ethereum/deb0x\"\nimport {\n    Tooltip, List, ListItem, Chip,\n    ListItemText, ListItemButton, Typography, Box, CircularProgress, Stack\n} from '@mui/material';\nimport Stepper from './Stepper'\nimport { border } from '@mui/system';\nimport IconButton from \"@mui/material/IconButton\";\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\nimport Pagination from \"@mui/material/Pagination\";\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport Refresh from '@mui/icons-material/Refresh';\nimport Button from \"@mui/material/Button\";\nimport MailOutlineIcon from '@mui/icons-material/MailOutline';\nimport '../../componentsStyling/decrypt.scss';\nimport empty from '../../photos/empty.png';\n\nconst axios = require('axios')\nconst deb0xAddress = \"0x13dA6EDcdD7F488AF56D0804dFF54Eb17f41Cc61\"\n\nexport function Sent(props: any): any {\n    const { account, library } = useWeb3React()\n    const [loading, setLoading] = useState(true)\n    const [encryptionKeyInitialized, setEncryptionKeyInitialized] = useState<boolean|undefined>(undefined)\n\n\n    useEffect(() => {\n        console.log(\"useEffect\")\n        setLoading(true)\n        getPublicEncryptionKey()\n    }, [account]);\n\n    const getPublicEncryptionKey = async () => {\n        const deb0xContract = Deb0x(library, deb0xAddress)\n        const key = await deb0xContract.getKey(account)\n        const initialized = (key != '') ? true : false\n        setEncryptionKeyInitialized(initialized)\n    }\n\n    \n\n    async function decrypt(encryptedMessage: any) {\n        try {\n            const decryptedMessage = await library.provider.request({\n                method: 'eth_decrypt',\n                params: [encryptedMessage, account],\n            });\n            return decryptedMessage\n        } catch (error) {\n            return undefined\n        }\n    }\n\n    async function fetchMessage(message: any) {\n        return await axios.get(`https://ipfs.io/ipfs/${message}`)\n    }\n\n    function Message(props: any) {\n        const encryptMessage = props.message.fetchedMessage.data\n        const [message, setMessage] = useState(props.message.fetchedMessage.data)\n        const [recipients, setRecipients] = useState<string[]>([]);\n        //const [sender, setSender] = useState(props.messsage.sender)\n        const [messageTime,setMessageTime] = useState(\"Mar 17, 18:36\")\n        const [isDecrypted, setIsDecrypted] = useState(false);\n\n        useEffect(()=> {\n            checkENS();\n        },[])\n\n        useEffect(()=>{\n            if(props.index !== props.previousIndex && isDecrypted===true){\n                hideMessage();\n            }\n\n        },[props.previousIndex])\n\n        async function checkENS(){\n            let recipientsTemp:any = []\n            const recipientsFiltered = props.message.recipients.filter((recipient:any) => recipient != account)\n\n            for(let recipient of recipientsFiltered) {\n                let name = await library.lookupAddress(recipient);\n                if(name !== null)\n                {   \n                    console.log(\"not null\")\n                    recipientsTemp = [...recipientsTemp, name];\n                } else {\n                    recipientsTemp = [...recipientsTemp, `${recipient.substring(0, 5)}...${recipient.substring(recipient.length - 4)}`];\n                }\n            }\n            \n            setRecipients(recipientsTemp)\n        }\n\n        async function decryptMessage() {\n            const decryptedMessage = await decrypt(message)\n            if(decryptedMessage) {\n                setIsDecrypted(false);\n                setMessage(decryptedMessage);\n                setIsDecrypted(true);\n                props.setPreviousIndex(props.index);\n            }\n        }\n\n        async function hideMessage(){\n            setMessage(encryptMessage);\n            setIsDecrypted(false);\n        }\n\n\n    \n        return (\n            <ListItem sx ={{border:1, marginBottom:1}} disablePadding key={props.index}    secondaryAction={ \n                <IconButton className={`${(message != props.message.fetchedMessage.data) ? \"list-item-btn\" : \"\"}`}  \n                        onClick={()=>{hideMessage()}}  edge=\"end\" aria-label=\"comments\">\n                    { (message != props.message.fetchedMessage.data) ? <VisibilityOffIcon  />: null}\n                </IconButton>  \n            }\n                className=\"messages-list-item\"\n            >\n                <Tooltip \n                    title={(message === props.message.fetchedMessage.data) ? \n                    \"Click to decrypt\" : `Sender:${props.message.sender}`} \n                    placement=\"right\">\n                    <ListItemButton className=\"list-item-button\"\n                        onClick={() => {\n                            if(message === props.message.fetchedMessage.data) {\n                                decryptMessage()\n                            }\n                        }}>\n                        <div>\n\n                        </div>\n                        <ListItemText\n                        primary={\n                        <>\n                            <div className=\"message-left\">\n                                <div className=\"message-heading\">\n                                    <p><small>To: </small></p>\n                                        <Stack direction=\"row\" spacing={1}>\n                                            {\n                                                recipients.map((recipient: any) => {\n                                                    console.log(recipients)\n                                                    return (\n                                                        <Chip\n                                                            key={recipient}\n                                                            color=\"primary\"\n                                                            label={recipient}\n                                                            variant=\"outlined\"\n                                                        />\n                                                    )\n                                                })\n                                            }\n                                        </Stack>\n                                    <p><small>{messageTime}</small></p>\n                                </div>\n                                <p className={`message \n                                        ${message === props.message.fetchedMessage.data ? \n                                        \"message-overflow\" : \"\"}` }\n                                    dangerouslySetInnerHTML={{ __html: message }}>\n                                </p>\n                            </div>\n                            {isDecrypted ? \n                                <div className=\"message-right\">\n                                    <div className=\"message-heading\">\n                                        <p><small>To: </small></p>\n                                            <Stack direction=\"row\" spacing={1}>\n                                                {\n                                                    recipients.map((recipient: any) => {\n                                                        console.log(recipients)\n                                                        return (\n                                                            <Chip\n                                                                key={recipient}\n                                                                color=\"primary\"\n                                                                label={recipient}\n                                                                variant=\"outlined\"\n                                                            />\n                                                        )\n                                                    })\n                                                }\n                                            </Stack>\n                                        <p><small>{messageTime}</small></p>\n                                    </div>\n                                    <p className={`message ${message === props.message.fetchedMessage.data ? \"message-overflow\" : \"\"}` }\n                                        dangerouslySetInnerHTML={{ __html: message }}>\n                                    </p>\n                                </div> : <></>}\n                        </>\n                        \n                        }/>\n                         \n                    </ListItemButton>\n                </Tooltip>\n            </ListItem>\n            )\n    }\n\n    function GetMessages() {\n        const [fetchedMessages, setFetchedMessages] = useState<any>([]);\n        const [previousIndex,setPreviousIndex] = useState<number>();\n\n        useEffect(() => {\n            processMessages()\n        }, []);\n\n        async function processMessages() {\n            const deb0xContract = Deb0x(library, deb0xAddress)\n            \n            const sentMessages = await deb0xContract.fetchSentMessages(account)   \n            console.log(sentMessages)\n\n            const sentMessagesRetrieved = sentMessages.map(async function (item: any) {\n                return { fetchedMessage: await fetchMessage(item.cid), recipients: item.recipients}\n            })\n\n            const messages = await Promise.all(sentMessagesRetrieved)\n\n            setFetchedMessages(messages)\n            setLoading(false)\n        }\n\n        if(!loading) {\n            if (fetchedMessages.length == 0) {\n                return (\n                    <>\n                        <div className=\"message-placeholder\">\n                            <MailOutlineIcon />\n                            <Typography variant=\"h5\"\n                                gutterBottom\n                                component=\"div\"\n                                sx={{marginLeft: .8, marginTop: 3}}\n                            >\n                                No messages yet.\n                            </Typography>\n                        </div>\n                    </>\n                )\n            } else {\n                return (\n                    <Box sx={{ width: '100%', maxWidth: 1080, margin: '0 auto'}}>\n                        <div className=\"row messages-list\">\n                            <List className=\"col-md-3 col-sm-12\">\n                                {fetchedMessages.map((message: any, i: any) => {\n                                    return (\n                                        <Message message={message} index={i} \n                                            key={i} previousIndex={previousIndex} \n                                            setPreviousIndex={setPreviousIndex} />\n                                    )\n                                })}\n                            </List>\n                            <Box className=\"intro-box sent col-md-9\">\n                                <div>\n                                    <img src={empty} />\n                                    <p>Open a message from the list to see the details.</p>\n                                </div>\n                            </Box>\n                        </div>\n                    </Box>\n                )\n            }\n        } else {\n            return (\n                <div className=\"spinner\">\n                    <CircularProgress/>\n                </div>\n            )\n        }\n\n    }\n    \n    if(encryptionKeyInitialized == true){\n        return (\n            // sx={{display:\"flex\"}}\n            <Box>\n                <Box className=\"pagination\" sx={{display:\"flex\"}}>\n                    <Pagination count={1} showFirstButton showLastButton />\n                    <IconButton size=\"large\" onClick={()=> setLoading(true) }>\n                        <RefreshIcon fontSize=\"large\"/>\n                    </IconButton>\n                </Box>\n                <Box>\n                    <GetMessages />\n                </Box>\n            </Box>\n           \n        )\n    } else if(encryptionKeyInitialized == false){\n        return (\n            <Stepper onDeboxInitialization={getPublicEncryptionKey}/>\n        )\n    } else{\n        return(\n            <div className=\"spinner\">\n                <CircularProgress/>\n            </div>\n        )\n    }\n}","import { useState, useEffect } from \"react\";\nimport ThemeContext, { initialThemeState } from \"./ThemeContext\";\n\ntype Props = {\n    children: JSX.Element|JSX.Element[],\n};\n\nconst ThemeProvider = ( { children }: Props ) => {\n  const [theme, setTheme] = useState<any>(initialThemeState.theme);\n\n  const localStorage = window.localStorage;\n\n  useEffect(() => {\n    const savedThemeLocal = localStorage.getItem(\"globalTheme\");\n\n    if (!!savedThemeLocal) {\n      setTheme(savedThemeLocal);\n    }\n  }, [localStorage]);\n\n  useEffect(() => {\n    localStorage.setItem(\"globalTheme\", theme);\n  }, [theme, localStorage]);\n\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme }}>\n      <div className={`theme--${theme}`}>{children}</div>\n    </ThemeContext.Provider>\n  );\n};\n\nexport default ThemeProvider;\n","import { useState, useEffect } from 'react';\nimport './App.css';\nimport { \n    Web3ReactProvider,\n    useWeb3React,\n    UnsupportedChainIdError\n} from '@web3-react/core';\nimport {\n  NoEthereumProviderError,\n  UserRejectedRequestError as UserRejectedRequestErrorInjected\n} from '@web3-react/injected-connector'\nimport { ethers } from \"ethers\";\nimport { useEagerConnect, useInactiveListener } from './hooks'\nimport { PermanentDrawer } from './components/App/PermanentDrawer'\n\nimport { encrypt } from '@metamask/eth-sig-util'\nimport Deb0x from \"./ethereum/deb0x\"\nimport { create } from 'ipfs-http-client'\nimport { Encrypt } from './components/App/Encrypt';\nimport { Decrypt } from './components/App/Decrypt';\nimport {Stake} from './components/App/Stake';\nimport { Governance } from './components/App/Governance';\nimport { Sent } from './components/App/Sent';\nimport {Container, Box,Typography, Fab} from '@mui/material';\nimport ThemeProvider from './components/Contexts/ThemeProvider';\nimport './index.scss';\nimport axios from 'axios';\nimport { injected, network } from './connectors';\nimport MailIcon from '@mui/icons-material/Mail';\nimport ContactsProvider from './components/Contexts/ContactsProvider';\nimport ContactsSetter from './components/ContactsSetter';\n\nconst client = create({\n  host: 'ipfs.infura.io',\n  port: 5001,\n  protocol: 'http'\n})\n\nconst ethUtil = require('ethereumjs-util')\n//old address: 0x218c10BAb451BE6A897db102b2f608bC7D3441a0\n// 0x13dA6EDcdD7F488AF56D0804dFF54Eb17f41Cc61\nconst deb0xAddress = \"0x13dA6EDcdD7F488AF56D0804dFF54Eb17f41Cc61\";\n\n\nenum ConnectorNames { Injected = 'Injected', Network = 'Network' };\n\nconst connectorsByName: { [connectorName in ConnectorNames]: any } = {\n  [ConnectorNames.Injected]: injected,\n  [ConnectorNames.Network]: network\n}\n\nfunction getErrorMessage(error: Error) {\n  if (error instanceof NoEthereumProviderError) {\n    return 'No Ethereum browser extension detected, install MetaMask on desktop or visit from a dApp browser on mobile.'\n  } else if (error instanceof UnsupportedChainIdError) {\n    return \"You're connected to an unsupported network.\"\n  } else if (\n    error instanceof UserRejectedRequestErrorInjected\n  ) {\n    return 'Please authorize this website to access your Ethereum account.'\n  } else {\n    console.error(error)\n    return 'An unknown error occurred. Check the console for more details.'\n  }\n}\n\nfunction getLibrary(provider: any): ethers.providers.Web3Provider {\n  const library = new ethers.providers.Web3Provider(provider)\n  library.pollingInterval = 12000\n  return library\n}\n\nexport default function () {\n  return (\n    <Web3ReactProvider getLibrary={getLibrary}>\n      <App />\n    </Web3ReactProvider>\n  )\n}\n\nfunction App() {\n  const context = useWeb3React<ethers.providers.Web3Provider>()\n  const { connector, library, chainId, account, active, error } = context\n\n  // handle logic to recognize the connector currently being activated\n  const [activatingConnector, setActivatingConnector] = useState<any>()\n  const [selectedOption, setSelectedOption] = useState('Deb0x')\n  useEffect(() => {\n    if (activatingConnector && activatingConnector === connector) {\n      setActivatingConnector(undefined)\n    }\n  }, [activatingConnector, connector])\n\n  // handle logic to eagerly connect to the injected ethereum provider, if it exists and has granted access already\n  const triedEager = useEagerConnect()\n\n  // handle logic to connect in reaction to certain events on the injected ethereum provider, if it exists\n  useInactiveListener(!triedEager || !!activatingConnector)\n\n  function handleChange(newValue: any) {\n    setSelectedOption(newValue)\n  }\n\n  useEffect(() => {\n    localStorage.removeItem('input')\n  }, [])\n\n  const [username, setUsername] = useState('Default username');\n  return (\n    <ThemeProvider>\n        <ContactsProvider>\n            <div className=\"app-container\">\n            <PermanentDrawer onChange={handleChange}/>\n            \n            <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n                {!!error && \n                    <p className='alert alert-danger position-fixed' style={{ marginTop: '4rem', marginBottom: '0' }}>\n                        {getErrorMessage(error)}\n                    </p>\n                }\n            </div>\n\n            \n            {\n            account ? \n            !!(library && account) && (\n                <Box className=\"main-container\" sx={{marginTop: 12}}>\n                    {selectedOption === \"Compose\" && <Encrypt />}\n                    {selectedOption === \"Deb0x\" && <Decrypt account={account}/>}\n                    {selectedOption === \"Stake\" && <Stake />}\n                    {selectedOption === \"Sent\" && <Sent />}\n                </Box>\n            ):\n                <Box className=\"home-page-box\">\n                    <Typography sx={{textAlign:\"center\",color:\"gray\"}} variant=\"h1\">\n                        The End To End Encrypted \n                        <br></br>\n                        Decentralized Email Protocol \n                        <br></br> \n                        Owned By Its Users\n                    </Typography>\n                    <Typography sx={{ mt:10,textAlign:\"center\"}} variant=\"h3\">\n                        Please connect your wallet\n                    </Typography>\n                </Box>\n            }\n            </div>\n        </ContactsProvider>\n    </ThemeProvider>\n  )\n}\n\n\n","import { useState, useEffect } from \"react\";\nimport ContactsContext, { initialContacts } from './ContactsContext';\n\ntype Props = {\n    children: JSX.Element|JSX.Element[],\n};\n\nconst ContactsProvider = ( { children }: Props ) => {\n    const [contacts, setContacts] = useState<any>(initialContacts.contacts);\n  \n    const localStorage = window.localStorage;\n  \n    useEffect(() => {\n        const savedContacts = JSON.parse(localStorage.getItem('contacts') || 'null');\n        \n        if (!!savedContacts) {\n            setContacts(savedContacts);\n        }\n    }, [localStorage]);\n  \n  \n    useEffect(() => {\n        localStorage.setItem('contacts', JSON.stringify(contacts));\n    }, [contacts, localStorage]);\n    \n    return (\n      <ContactsContext.Provider value={{ contacts, setContacts }}>\n        <>{children}</>\n      </ContactsContext.Provider>\n    );\n  };\n  \n  export default ContactsProvider;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}