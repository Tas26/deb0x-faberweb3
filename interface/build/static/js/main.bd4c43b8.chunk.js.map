{"version":3,"sources":["components/App/Snackbar.tsx","components/App/Encrypt.tsx","ethereum/deb0x.js","connectors.ts","hooks.ts","components/App/Spinner.tsx","photos/logo.png","ethereum/deb0xerc20.js","components/Common/AccountName.tsx","components/Contexts/ThemeContext.tsx","components/ThemeSetter.tsx","components/App/PermanentDrawer.tsx","components/Common/ScreenSize.tsx","components/App/Stepper.tsx","components/App/Decrypt.tsx","components/App/Stake.tsx","photos/empty.png","components/App/Sent.tsx","components/Contexts/ThemeProvider.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Alert","forwardRef","props","ref","elevation","variant","SnackbarNotification","useState","severity","state","open","message","setState","useEffect","console","log","handleClose","event","reason","autoHideDuration","onClose","sx","width","deb0xAddress","ethUtil","require","client","create","host","port","protocol","Encrypt","useWeb3React","account","library","encryptionKey","textToEncrypt","setTextToEncrypt","encryptionKeyInitialized","setEncryptionKeyInitialized","senderAddress","setSenderAddress","notificationState","setNotificationState","messageSessionSentCounter","setMessageSessionSentCounter","loading","setLoading","estimatedReward","addressList","setAddressList","setError","isInList","address","includes","encryptText","messageToEncrypt","destinationAddresses","a","getSigner","signer","cids","recipients","flat","getAddress","push","deb0xContract","Deb0x","getKey","destinationAddressEncryptionKey","encryptedMessage","bufferToHex","Buffer","from","JSON","stringify","encrypt","publicKey","data","version","add","path","overrides","value","ethers","utils","parseUnits","send","tx","wait","then","result","catch","error","getPublicEncryptionKey","key","EditorState","createEmpty","editorState","setEditorState","sendContent","draftToHtml","convertToRaw","getCurrentContent","className","component","noValidate","autoComplete","id","placeholder","onPaste","evt","preventDefault","addresses","clipboardData","getData","match","toBeAdded","filter","onKeyDown","trim","isAddress","isValid","onChange","target","direction","spacing","margin","map","label","onDelete","item","i","deleteIcon","onEditorStateChange","toolbarClassName","wrapperClassName","editorClassName","display","alignItems","justifyContent","flexDirection","mr","endIcon","marginLeft","marginTop","disabled","onClick","abi","signerOrProvider","Contract","injected","InjectedConnector","supportedChainIds","network","NetworkConnector","urls","defaultChainId","useEagerConnect","activate","active","tried","setTried","isAuthorized","undefined","Spinner","color","rest","height","viewBox","xmlns","stroke","fill","fillRule","transform","strokeWidth","strokeOpacity","cx","cy","r","d","attributeName","type","to","dur","repeatCount","formatAccountName","substring","length","initialThemeState","theme","setTheme","_value","ThemeContext","React","createContext","ThemeSetter","useContext","e","currentTarget","themeOptions","option","idx","ConnectorNames","deb0xERC20Address","connectorsByName","Injected","PermanentDrawer","context","connector","chainId","deactivate","activatingConnector","setActivatingConnector","selectedIndex","setSelectedIndex","ensName","setEnsName","userUnstakedAmount","setUserUnstakedAmount","anchorEl","setAnchorEl","Boolean","dimensions","windowSize","setWindowSize","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","ScreenSize","setUnstakedAmount","deb0xERC20Contract","Deb0xERC20","balanceOf","balance","formatEther","lookupAddress","name","handleClick","handleChange","text","index","checkENS","setDisplay","Box","CssBaseline","AppBar","src","logo","Paper","InputBase","inputProps","IconButton","Button","currentConnector","activating","connected","toLowerCase","Popper","List","ListItem","Drawer","anchor","button","selected","ListItemIcon","Add","ListItemText","primary","contact","href","steps","HorizontalLinearStepper","setEncryptionKey","activeStep","setActiveStep","whichStepFailed","setStepFailed","handleNext","prevActiveStep","provider","request","method","params","setKey","onDeboxInitialization","Snackbar","maxWidth","Stepper","labelProps","optional","Typography","Step","StepLabel","pt","LoadingButton","Decrypt","decrypt","decryptedMessage","fetchMessage","axios","get","Message","encryptMessage","fetchedMessage","setMessage","messageTime","isDecrypted","setIsDecrypted","setOpen","parse","localStorage","getItem","contacts","setContacts","temp","sender","setPreviousIndex","hideMessage","previousIndex","setItem","border","marginBottom","disablePadding","secondaryAction","edge","Tooltip","title","placement","ListItemButton","decryptMessage","dangerouslySetInnerHTML","__html","Modal","mt","GetMessages","fetchedMessages","setFetchedMessages","fetchMessageSenders","senderAddresses","cidsPromises","fetchMessages","Promise","all","encryptedMessagesPromisesArray","cidArray","encryptedMessagesPromises","cid","promise","encryptedMessages","processMessages","CircularProgress","gutterBottom","Pagination","count","showFirstButton","showLastButton","size","fontSize","Stake","RewardsPanel","rewardsUnclaimed","setRewardsUnclaimed","feeSharePercentage","setFeeSharePercentage","earnedNative","unclaimedRewards","parseFloat","balanceERC20","totalSupply","feeShare","Math","round","toFixed","toString","getRewardNative","rewardsAccrued","Card","CardContent","Divider","CardActions","StakeUnstake","alignment","setAlignment","userStakedAmount","setUserStakedAmount","totalStaked","setTotalStaked","amountToUnstake","setAmountToUnstake","amountToStake","setAmountToStake","approved","setApproved","allowance","approve","parseEther","unStakeERC20","stakeERC20","setStakedAmount","totalAmountStaked","setApproval","ToggleButtonGroup","exclusive","newAlignment","ToggleButton","Grid","container","TextField","TotalStaked","Sent","setRecipients","recipientsTemp","recipientsFiltered","recipient","Stack","Chip","fetchSentMessages","sentMessages","sentMessagesRetrieved","messages","empty","ThemeProvider","children","savedThemeLocal","Provider","Network","getErrorMessage","NoEthereumProviderError","UnsupportedChainIdError","UserRejectedRequestErrorInjected","getLibrary","providers","Web3Provider","pollingInterval","App","selectedOption","setSelectedOption","suppress","ethereum","on","handleConnect","handleChainChanged","handleAccountsChanged","accounts","handleNetworkChanged","networkId","removeListener","useInactiveListener","newValue","style","textAlign","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bd4c43b8.chunk.js","sourcesContent":["import { useState, forwardRef, useEffect } from 'react'\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\n\nconst Alert = forwardRef<HTMLDivElement, AlertProps>(function Alert(\n  props,\n  ref,\n) {\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nexport default function SnackbarNotification(props: any) {\n\n  const [state, setState] = useState({ severity: props.state.severity, open: props.state.open, message: props.state.message })\n\n  useEffect(() => {\n    console.log(props)\n    setState({severity: props.state.severity, open: props.state.open, message: props.state.message})\n  }, [props])\n\n  const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setState({\n      message: state.message, open: false,\n      severity: state.severity\n    })\n  };\n\n  return (\n    <Snackbar open={state.open} autoHideDuration={6000} onClose={handleClose}>\n      <Alert onClose={handleClose} severity={state.severity} sx={{ width: '100%' }}>\n        {state.message}\n      </Alert>\n    </Snackbar>\n  )\n}","import { useState, useEffect } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { encrypt } from '@metamask/eth-sig-util'\nimport Deb0x from \"../../ethereum/deb0x\"\nimport { create } from 'ipfs-http-client'\nimport SendIcon from '@mui/icons-material/Send';\nimport Chip from '@mui/material/Chip';\nimport Stack from '@mui/material/Stack';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport {\n    Box, TextField, Typography\n} from '@mui/material';\nimport { ethers } from \"ethers\";\nimport SnackbarNotification from './Snackbar';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport '../../componentsStyling/encrypt.scss';\nimport { EditorState, convertToRaw } from 'draft-js';\nimport draftToHtml from 'draftjs-to-html';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport { Editor } from 'react-draft-wysiwyg';\n\nconst deb0xAddress = \"0x13dA6EDcdD7F488AF56D0804dFF54Eb17f41Cc61\";\nconst ethUtil = require('ethereumjs-util')\n\n\nconst client = create({\n    host: 'ipfs.infura.io',\n    port: 5001,\n    protocol: 'https'\n})\n\nexport function Encrypt(): any {\n    const { account, library } = useWeb3React()\n    const [encryptionKey, setKey] = useState('')\n    const [textToEncrypt, setTextToEncrypt] = useState('')\n    const [encryptionKeyInitialized, setEncryptionKeyInitialized] = useState('')\n    const [senderAddress, setSenderAddress] = useState('')\n    const [notificationState, setNotificationState] = useState({})\n    const [messageSessionSentCounter, setMessageSessionSentCounter] = useState(0)\n    const [loading, setLoading] = useState(false)\n    const [estimatedReward, setEstimatedReward] = useState(\"9.32\");\n    const [addressList, setAddressList] = useState<string[]>([])\n    const [error, setError] = useState<string | null>(null)\n\n    useEffect(() => {\n        if (!encryptionKeyInitialized) {\n            getPublicEncryptionKey()\n        }\n    }, []);\n\n    function handleKeyDown(evt: any) {\n        if ([\"Enter\", \"Tab\", \",\"].includes(evt.key)) {\n            evt.preventDefault();\n\n            var value = senderAddress.trim();\n\n            if (value && isValid(value)) {\n                setAddressList([...addressList, senderAddress])\n                setSenderAddress(\"\")\n            }\n        }\n    }\n\n    function handleChange(evt: any) {\n        setSenderAddress(evt.target.value)\n        setError(null)\n    }\n\n    function handleDelete(item: any) {\n        setAddressList(addressList.filter(i => i !== item))\n    }\n\n    function handlePaste(evt: any) {\n        evt.preventDefault()\n\n        var paste = evt.clipboardData.getData(\"text\")\n        var addresses = paste.match(/^0x[a-fA-F0-9]{40}$/g)\n\n        if (addresses) {\n            var toBeAdded = addresses.filter((address: any) => !isInList(address))\n\n            setAddressList([...addressList, ...toBeAdded])\n        }\n    }\n\n    function isValid(address: any) {\n        let error = null;\n\n        if (isInList(address)) {\n            error = `${address} has already been added.`;\n        }\n\n        if (!isAddress(address)) {\n            error = `${address} is not a valid ethereum address.`;\n        }\n\n        if (error) {\n            setNotificationState({\n                message: error, open: true,\n                severity: \"error\"\n            })\n            setError(error);\n\n            return false;\n        }\n\n        return true;\n    }\n\n    function isInList(address: any) {\n        return addressList.includes(address);\n    }\n\n    function isAddress(address: any) {\n        return ethers.utils.isAddress(address);\n    }\n\n    async function encryptText(messageToEncrypt: any, destinationAddresses: any)\n    {\n        setLoading(true);\n        const signer = await library.getSigner(0);\n        let cids:any = []\n        let recipients = destinationAddresses.flat()\n        recipients.push(await signer.getAddress())\n        const deb0xContract = Deb0x(signer, deb0xAddress);\n        for (let address of recipients) {\n            console.log(recipients, address)\n            const destinationAddressEncryptionKey = await deb0xContract.getKey(address);\n            const encryptedMessage = ethUtil.bufferToHex(\n                Buffer.from(\n                    JSON.stringify(\n                        encrypt({\n                            publicKey: destinationAddressEncryptionKey,\n                            data: messageToEncrypt,\n                            version: 'x25519-xsalsa20-poly1305'\n                        }\n                        )\n                    ),\n                    'utf8'\n                )\n            )\n            const message = await client.add(encryptedMessage)\n            cids.push(message.path)\n        }\n\n        try {\n            const overrides = \n                { value: ethers.utils.parseUnits(\"0.001\", \"ether\"), }\n            const tx = await deb0xContract.send(recipients, cids, overrides)\n\n            await tx.wait()\n                .then((result: any) => {\n                    setNotificationState({\n                        message: \"Message was succesfully sent.\",\n                        open: true,\n                        severity: \"success\"\n                    })\n\n                    let count = messageSessionSentCounter + 1;\n                    setMessageSessionSentCounter(count);\n                })\n                .catch((error: any) => {\n                    setNotificationState({\n                        message: \"Message couldn't be sent!\",\n                        open: true,\n                        severity: \"error\"\n                    })\n                    console.log(error)\n                })\n        } catch (error: any) {\n            console.log(error)\n            setNotificationState({\n                message: \"You rejected the transaction. Message was not sent.\",\n                open: true,\n                severity: \"info\"\n            })\n        }\n\n        setTextToEncrypt('');\n        setSenderAddress(\"\");\n        setAddressList([])\n        setLoading(false);\n\n    }\n\n    async function initializeDeb0x() {\n        const signer = await library.getSigner(0);\n        const deb0xContract = Deb0x(signer, deb0xAddress);\n        const tx = await deb0xContract.setKey(encryptionKey);\n        const receipt = await tx.wait();\n\n        return receipt.transactionHash;\n    }\n\n    async function getEncryptionKey() {\n        library.provider.request({\n            method: 'eth_getEncryptionPublicKey',\n            params: [account],\n        })\n            .then((result: any) => {\n                setKey(result);\n            });\n    }\n\n    const getPublicEncryptionKey = async () => {\n        const deb0xContract = Deb0x(library, deb0xAddress)\n        const key = await deb0xContract.getKey(account)\n        console.log(key)\n        console.log(encryptionKey)\n        setEncryptionKeyInitialized(key)\n    }\n    const [editorState, setEditorState] = useState(() =>\n        EditorState.createEmpty()\n    );\n\n    const handleEditorChange = (state: any) => {\n        setEditorState(state);\n        sendContent();\n    };\n\n    const sendContent = () => {\n        setTextToEncrypt(draftToHtml(convertToRaw(editorState.getCurrentContent())));\n    };\n\n    return (\n        <>\n            <SnackbarNotification state={notificationState} \n                setNotificationState={setNotificationState} />\n            <div className=\"form-container container\">\n                <Box component=\"form\"\n                    noValidate\n                    autoComplete=\"off\">\n                    <TextField id=\"standard-basic\"\n                        placeholder=\"Type or paste addresses and press `Enter`...\"\n                        value={senderAddress}\n                        onPaste={handlePaste}\n                        onKeyDown={handleKeyDown}\n                        onChange={handleChange} />\n                    <Stack direction=\"row\" spacing={1}>\n                        <Box sx={{ width: '100%', margin: '0 auto' }}\n                            className=\"address-list\">\n                            {\n                                addressList.map((address: any) => {\n                                    return (\n                                        <Chip\n                                            key={address}\n                                            label={address}\n                                            onDelete={() => handleDelete(address)}\n                                            deleteIcon={<DeleteIcon />}\n                                        />\n                                    )\n                                })\n                            }\n                        </Box>\n                    </Stack>\n                    <Editor\n                        editorState={editorState}\n                        onEditorStateChange={handleEditorChange}\n                        toolbarClassName=\"toolbar\"\n                        wrapperClassName=\"wrapper\"\n                        editorClassName=\"editor\"\n                    />\n\n                    { messageSessionSentCounter === 0 ?\n                        <Box sx={{ display: \"flex\", \n                            alignItems: \"end\", \n                            justifyContent: \"flex-end\", \n                            flexDirection: \"column\", \n                            mr: 1 }}>\n                            {textToEncrypt != '' && senderAddress != '' ?\n                                <Box>\n                                    <Typography>\n                                        <small>\n                                            est. rewards: {estimatedReward} DBX\n                                        </small>\n                                    </Typography>\n                                </Box> : \n                                null\n                            }\n\n                            <LoadingButton className=\"send-btn\" \n                                loading={loading} endIcon={ loading ? null : <SendIcon />}\n                                sx={{ marginLeft: 2, marginTop: 1 }}\n                                disabled={textToEncrypt == '' || addressList == []}\n                                onClick={() => \n                                    encryptText(textToEncrypt, addressList)\n                                } >\n                                { loading ? null : 'Send'}\n                            </LoadingButton>\n                        </Box>\n                        :\n                        <Box sx={{ display: \"flex\", \n                            alignItems: \"end\", \n                            justifyContent: \"flex-end\",\n                            flexDirection: \"column\",\n                            mr: 1 }}>\n                            {textToEncrypt != '' && senderAddress != '' ?\n                                <Box>\n                                    <Typography>\n                                        <small>\n                                            est. rewards: {estimatedReward} DBX\n                                        </small>\n                                    </Typography>\n                                </Box> : \n                                null\n                            }\n\n                            <LoadingButton className=\"send-btn\" \n                                loading={loading} variant=\"contained\" \n                                endIcon={ <SendIcon /> }\n                                sx={{ marginLeft: 2, marginTop: 1 }}\n                                disabled={textToEncrypt === '' || senderAddress === ''}\n                                onClick={() => encryptText(textToEncrypt, senderAddress)}>\n                                Send another message\n                            </LoadingButton>\n                        </Box>\n                    }\n                </Box>\n            </div>\n        </>\n    )\n}","import { sign } from \"crypto\";\nimport { Contract, ethers } from \"ethers\";\n\nconst {abi} = require(\"./Deb0x.json\");\n\nexport default (signerOrProvider, address) => {\n    return new ethers.Contract(address, abi, signerOrProvider);\n}","\nimport { InjectedConnector } from '@web3-react/injected-connector'\nimport { NetworkConnector } from '@web3-react/network-connector'\n\n// const POLLING_INTERVAL = 12000\nconst RPC_URLS: { [chainId: number]: string } = {\n    4: 'https://rinkeby.infura.io/v3/84842078b09946638c03157f83405213'\n}\n\nexport const injected = new InjectedConnector({ supportedChainIds: [4] })\n\nexport const network = new NetworkConnector({\n    urls: { 4: RPC_URLS[4] },\n    defaultChainId: 4\n  })","import { useState, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\n\nimport { injected } from './connectors'\n\nexport function useEagerConnect() {\n  const { activate, active } = useWeb3React()\n\n  const [tried, setTried] = useState(false)\n\n  useEffect(() => {\n    injected.isAuthorized().then((isAuthorized: boolean) => {\n      if (isAuthorized) {\n        activate(injected, undefined, true).catch(() => {\n          setTried(true)\n        })\n      } else {\n        setTried(true)\n      }\n    })\n  }, [activate]) // intentionally only running on mount (make sure it's only mounted once :))\n\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n  useEffect(() => {\n    if (!tried && active) {\n      setTried(true)\n    }\n  }, [tried, active])\n\n  return tried\n}\n\nexport function useInactiveListener(suppress: boolean = false) {\n  const { active, error, activate } = useWeb3React()\n\n  useEffect((): any => {\n    const { ethereum } = window as any\n    if (ethereum && ethereum.on && !active && !error && !suppress) {\n      const handleConnect = () => {\n        console.log(\"Handling 'connect' event\")\n        activate(injected)\n      }\n      const handleChainChanged = (chainId: string | number) => {\n        console.log(\"Handling 'chainChanged' event with payload\", chainId)\n        activate(injected)\n      }\n      const handleAccountsChanged = (accounts: string[]) => {\n        console.log(\"Handling 'accountsChanged' event with payload\", accounts)\n        if (accounts.length > 0) {\n          activate(injected)\n        }\n      }\n      const handleNetworkChanged = (networkId: string | number) => {\n        console.log(\"Handling 'networkChanged' event with payload\", networkId)\n        activate(injected)\n      }\n\n      ethereum.on('connect', handleConnect)\n      ethereum.on('chainChanged', handleChainChanged)\n      ethereum.on('accountsChanged', handleAccountsChanged)\n      ethereum.on('networkChanged', handleNetworkChanged)\n\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener('connect', handleConnect)\n          ethereum.removeListener('chainChanged', handleChainChanged)\n          ethereum.removeListener('accountsChanged', handleAccountsChanged)\n          ethereum.removeListener('networkChanged', handleNetworkChanged)\n        }\n      }\n    }\n  }, [active, error, suppress, activate])\n}","// <!-- By Sam Herbert (@sherb), for everyone. More @ http://goo.gl/7AJzbL -->\nexport function Spinner({ color, ...rest }: any) {\n    return (\n        <svg width=\"38\" height=\"38\" viewBox=\"0 0 38 38\" \n            xmlns=\"http://www.w3.org/2000/svg\" stroke={color} {...rest}>\n            <g fill=\"none\" fillRule=\"evenodd\">\n                <g transform=\"translate(1 1)\" strokeWidth=\"2\">\n                    <circle strokeOpacity=\".5\" cx=\"18\" cy=\"18\" r=\"18\" />\n                    <path d=\"M36 18c0-9.94-8.06-18-18-18\">\n                    <animateTransform\n                        attributeName=\"transform\"\n                        type=\"rotate\"\n                        from=\"0 18 18\"\n                        to=\"360 18 18\"\n                        dur=\"1s\"\n                        repeatCount=\"indefinite\" />\n                    </path>\n                </g>\n            </g>\n        </svg>\n    )\n}","export default __webpack_public_path__ + \"static/media/logo.ad598f25.png\";","import { ethers } from \"ethers\";\n\nconst {abi} = require(\"./Deb0xERC20.json\");\n\nexport default (signerOrProvider, address) => {\n    return new ethers.Contract(address, abi, signerOrProvider);\n}","export default function formatAccountName(account: string)\n{\n    return `${account.substring(0, 5)}...${account.substring(account.length - 4)}`\n}","import React from \"react\";\n\nexport const initialThemeState = {\n  theme: \"classic\",\n  setTheme: (_value: string) => {}\n};\n\nconst ThemeContext = React.createContext(initialThemeState);\nexport default ThemeContext;","import React, { useContext } from \"react\";\n\nimport ThemeContext from \"./Contexts/ThemeContext\";\n\nexport default function ThemeSetter() {\n    const useTheme = () => useContext(ThemeContext);\n    const { theme, setTheme } = useTheme()!;\n\n  return (\n    <select value={theme} \n        onChange={(e) => setTheme(e.currentTarget.value)}\n        className=\"form-select\">\n      {themeOptions.map((option, idx) => (\n        <option value={option.value} key={idx}>\n          {option.value}\n        </option>\n      ))}\n    </select>\n  );\n}\n\nconst themeOptions = [{ value: \"classic\" }, { value: \"dark\" }];","import React, { useState, useEffect } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport Box from '@mui/material/Box';\nimport Drawer from '@mui/material/Drawer';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport AppBar from '@mui/material/AppBar';\nimport Toolbar from '@mui/material/Toolbar';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\nimport InboxIcon from '@mui/icons-material/MoveToInbox';\nimport MailIcon from '@mui/icons-material/Mail';\nimport SendIcon from '@mui/icons-material/Send';\nimport { Add } from '@mui/icons-material';\nimport LockIcon from '@mui/icons-material/Lock';\nimport Button from '@mui/material/Button'\nimport Popper from '@mui/material/Popper'\nimport { injected } from '../../connectors';\nimport { Spinner } from './Spinner'\nimport { useEagerConnect } from '../../hooks'\nimport Gavel from '@mui/icons-material/Gavel';\nimport Paper from \"@mui/material/Paper\";\nimport InputBase from \"@mui/material/InputBase\";\nimport SearchIcon from \"@mui/icons-material/Search\";\nimport IconButton from \"@mui/material/IconButton\";\nimport logo from \"../../photos/logo.png\"\nimport GitHubIcon from '@mui/icons-material/GitHub';\nimport Deb0xERC20 from \"../../ethereum/deb0xerc20\"\nimport { ethers } from \"ethers\";\nimport formatAccountName from \"../Common/AccountName\";\nimport \"../../componentsStyling/permanentDrawer.scss\";\nimport ThemeSetter from '../ThemeSetter';\nimport ScreenSize from '../Common/ScreenSize';\n\nconst deb0xERC20Address = \"0xEde2f177d6Ae8330860B6b37B2F3D767cd2630fe\"\nenum ConnectorNames { Injected = 'Injected' };\n\nconst connectorsByName: { [connectorName in ConnectorNames]: any } = {\n    [ConnectorNames.Injected]: injected\n}\n\nexport function PermanentDrawer(props: any): any {\n    const context = useWeb3React()\n    const { connector, library, chainId, account, activate, deactivate, active, error } = context\n    const [activatingConnector, setActivatingConnector] = useState<any>()\n    const triedEager = useEagerConnect()\n    const [selectedIndex, setSelectedIndex] = useState<any>(1);\n    const [searchBarValue, setSearchBarValue] = useState<any>(\"search\");\n    const [ensName, setEnsName] = useState<any>(\"\");\n    // const [balance, setBalance] = useState<any>(\"8.13\");\n    const [userUnstakedAmount,setUserUnstakedAmount] = useState<any>(0);\n    const menuItems = ['Compose', 'Deb0x', 'Stake', 'Sent'];\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n    const open = Boolean(anchorEl);\n    const id = open ? 'simple-popper' : undefined;\n    const dimensions = ScreenSize();\n    const contactsList = [\n        {\n            name: \"Tudor\",\n            address: \"0x845A1a2e29095c469e755456AA49b09D366F0bEB\"\n        }\n    ];\n\n    if(library){\n        checkENS();\n        setUnstakedAmount();\n    }\n\n    useEffect(() => {\n        if (activatingConnector && activatingConnector === connector) {\n            setActivatingConnector(undefined)\n        }\n    }, [activatingConnector, connector])\n\n    async function setUnstakedAmount() {\n        const deb0xERC20Contract = Deb0xERC20(library, deb0xERC20Address)\n        if(account){\n            const balance = await deb0xERC20Contract.balanceOf(account)\n            setUserUnstakedAmount(ethers.utils.formatEther(balance))\n        }\n    }\n\n    async function checkENS(){\n \n        var name = await library.lookupAddress(account);\n        if(name !== null)\n        {   \n            setEnsName(name);\n        }\n    }\n\n    useEffect(() => {\n        setUnstakedAmount();\n    },[userUnstakedAmount])\n\n    function handleClick (event: React.MouseEvent<HTMLElement>) {\n        setAnchorEl(anchorEl ? null : event.currentTarget);\n    };\n\n    function handleChange(text: any, index: any) {\n        setSelectedIndex(index)\n        props.onChange(text)\n    }\n\n    const [display, setDisplay] = useState(false);\n\n    function displayAddress(index: any) {\n        if(display) {\n            setDisplay(false);\n        } else {\n            setDisplay(true);\n        }\n    }\n\n    return (\n\n        <Box sx={{ display: 'flex' }}>\n            <CssBaseline />\n            <AppBar className=\"app-bar--top\">\n                <div className=\"image-container\">\n                    <div className=\"image-overlay\"></div>\n                    <img src={logo}  />\n                </div>\n                <Box className=\"main-menu--right\">\n                { account  ? \n                    <>\n                        <Paper component=\"form\">\n                            <InputBase\n                                placeholder=\"Search messages\"\n                                inputProps={{ \"aria-label\": \"search\" }}\n                                className=\"search-input\" />\n                            <IconButton type=\"submit\" aria-label=\"search\">\n                                <SearchIcon />\n                            </IconButton>\n                        </Paper>\n                        <Button variant =\"contained\"\n                                onClick={() => handleChange(\"Stake\", 2)}>\n                            {userUnstakedAmount} DBX\n                        </Button>\n                    </>\n                    : \n                    null }\n                \n                { (() =>  {\n                    const currentConnector = connectorsByName[ConnectorNames.Injected]\n                    const activating = currentConnector === activatingConnector\n                    const connected = currentConnector === connector\n                    const disabled = !triedEager || !!activatingConnector || connected || !!error\n\n                    return (\n                        <Button variant=\"contained\"\n                            key={ConnectorNames.Injected}\n                            aria-describedby={id}\n                            onClick={!connected ? \n                                () => {\n                                    setActivatingConnector(currentConnector)\n                                    activate(currentConnector)\n                                } : \n                                handleClick\n                            }>\n                            \n                            { activating ? \n                                <Spinner color={'black'} /> :\n                                !connected ? \n                                    \"Connect Wallet\" :\n                                    <span>\n                                        {account === undefined ? \n                                            'Unsupported Network' : \n                                            account ? \n                                                ensName === \"\" ? \n                                                    `${formatAccountName(account)}` :\n                                                    `${ensName.toLowerCase()} \n                                                    (${formatAccountName(account)})`\n                                            : ''}\n                                    </span>\n                            }\n                        </Button>\n                    )\n                }) ()}\n                </Box>\n            </AppBar>\n            <Popper className=\"popper\" id={id} open={open} anchorEl={anchorEl}>\n                <List>\n                    <ListItem className=\"theme-select\">\n                        <ThemeSetter />\n                    </ListItem>\n                    <ListItem className='logout'>\n                        <Button \n                            onClick={(event: any) => {\n                                handleClick(event)\n                                deactivate()\n                            }}\n                            className=\"logout-btn\">\n                            Logout \n                        </Button>\n                    </ListItem>\n                </List>\n            </Popper>\n            <Drawer variant=\"permanent\"\n                anchor={dimensions.width > 768 ? 'left' : 'bottom'}\n                className=\"side-menu\">\n                <List >\n                    {menuItems.map((text, index) => (\n                        <>\n                            \n                            <ListItem button key={text} \n                                selected={selectedIndex === index} \n                                onClick={() => handleChange(text, index)}\n                                className={`list-item ${index === 0 ? \"send-item\" : \"\"}` }>\n                                <ListItemIcon className=\"icon\" >\n                                    {index === 0 && <Add />}\n                                    {index === 1 && <InboxIcon />}\n                                    {index === 2 && <Gavel />}\n                                    {index === 3 && <SendIcon />}\n                                </ListItemIcon>\n                                <ListItemText className=\"text\" primary={text} />\n                            </ListItem>\n                        </>\n                    ))}\n                </List>\n                \n                <div className=\"side-menu--bottom\">\n                    <>\n                        <div className=\"contacts\">\n                            <List>\n                                <p>Contacts</p>\n                                {\n                                    contactsList.map((contact, index) => (\n                                        <>\n                                            <ListItem button key={contact.name}\n                                                onClick={() => displayAddress(index)}>\n                                                <ListItemText className=\"text\" primary={contact.name} />\n                                            </ListItem>\n                                            {display ? \n                                                <ListItem>\n                                                    <ListItemText className=\"text\" primary={contact.address} />\n                                                </ListItem> : <></>}\n                                            \n                                        </>\n                                    ))\n                                }\n                            </List>\n                        </div>\n                        <div className=\"content\">\n                            <a href=\"https://github.com/deb0x\" target=\"_blank\">\n                            <GitHubIcon  />\n                            </a>\n                            <a href=\"https://www.deb0x.org\" target=\"_blank\">\n                                www.deb0x.org\n                            </a>\n                        </div>\n                    </>\n                </div>\n            </Drawer>\n        </Box>\n    );\n}","import React, { useState, useEffect } from 'react'\n\nexport default function useWindowSize() {\n    // Initialize state with undefined width/height so server and client renders match\n    // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n    const [windowSize, setWindowSize] = useState({\n      width: 0,\n      height: 0,\n    });\n    useEffect(() => {\n      // Handler to call on window resize\n      function handleResize() {\n        // Set window width/height to state\n        setWindowSize({\n          width: window.innerWidth,\n          height: window.innerHeight,\n        });\n      }\n      // Add event listener\n      window.addEventListener(\"resize\", handleResize);\n      // Call handler right away so state gets updated with initial window size\n      handleResize();\n      // Remove event listener on cleanup\n      return () => window.removeEventListener(\"resize\", handleResize);\n    }, []); // Empty array ensures that effect is only run on mount\n    return windowSize;\n  }","import {useState, Fragment} from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport Box from '@mui/material/Box';\nimport Stepper from '@mui/material/Stepper';\nimport Step from '@mui/material/Step';\nimport StepLabel from '@mui/material/StepLabel';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport Typography from '@mui/material/Typography';\nimport Deb0x from \"../../ethereum/deb0x\"\nimport SnackbarNotification from './Snackbar';\nimport '../../componentsStyling/stepper.scss';\nconst deb0xAddress = \"0x13dA6EDcdD7F488AF56D0804dFF54Eb17f41Cc61\";\nconst steps = ['Provide public encryption key', 'Initialize Deb0x'];\n\nexport default function HorizontalLinearStepper(props: any) {\n    const { account, library } = useWeb3React()\n    const [encryptionKey, setEncryptionKey] = useState('')\n    const [activeStep, setActiveStep] = useState(0);\n    const [whichStepFailed, setStepFailed] = useState<number | undefined>(undefined)\n    const [loading, setLoading] = useState(false)\n    const [notificationState, setNotificationState] = useState({})\n\n    const handleNext = () => {\n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    };\n\n    async function getEncryptionKey() {\n        setLoading(true)\n\n        library.provider.request({\n            method: 'eth_getEncryptionPublicKey',\n            params: [account],\n        })\n            .then((result: any) => {\n                setEncryptionKey(result);\n                handleNext()\n                setStepFailed(undefined)\n                setLoading(false)\n                \n            })\n            .catch((error: any) => {\n                setNotificationState({message: \"You rejected to provide the public encryption key.\", open: true,\n                severity:\"info\"})\n                setStepFailed(0)\n                setLoading(false)\n            });\n        \n    }\n\n    async function initializeDeb0x() {\n        setLoading(true)\n\n        const signer = await library.getSigner(0)\n\n        const deb0xContract = Deb0x(signer, deb0xAddress)\n\n        try {\n            const tx = await deb0xContract.setKey(encryptionKey)\n\n            tx.wait()\n            .then((result: any) => {\n                setNotificationState({message: \"Deb0x was succesfully initialized.\", open: true,\n                severity:\"success\"})\n                setLoading(false)\n                props.onDeboxInitialization(true)\n                \n            })\n            .catch((error: any) => {\n                setNotificationState({message: \"Deb0x couldn't be initialized!\", open: true,\n                severity:\"error\"})\n                setLoading(false)\n            })\n        } catch(error: any) {\n            setNotificationState({message: \"You rejected the transaction. Deb0x was not initialized.\", open: true,\n                severity:\"info\"})\n                setLoading(false)\n        }\n\n    }\n\n    return (\n        <>\n            <SnackbarNotification state={notificationState} setNotificationState={setNotificationState}/>\n            <Box className=\"stepper-box\" sx={{ width: '100%', maxWidth: 1080 }}>\n                <Stepper activeStep={activeStep} className=\"stepper\">\n                    {steps.map((label, index) => {\n                        const stepProps: { completed?: boolean } = {};\n                        const labelProps: {\n                            optional?: React.ReactNode;\n                            error?: boolean;\n                        } = {};\n                        if (whichStepFailed === index) {\n                            labelProps.optional = (\n                            <Typography variant=\"caption\" color=\"error\">\n                                {(activeStep === 0) ? \"User didn't provide encryption key\" : \"User rejected transaction\"}\n                            </Typography>\n                            );\n                            labelProps.error = true;\n                        }\n                        return (\n                            <Step key={label} {...stepProps}>\n                                <StepLabel {...labelProps} >{label} </StepLabel>\n                            </Step>\n                        );\n                    })}\n                </Stepper>\n                {<Fragment>\n                    <Box className=\"button-box\" sx={{ display: 'flex', flexDirection: 'row', pt: 2 }}>\n                        <LoadingButton className=\"init-btn\" loading={loading} sx={{ marginLeft: 5 }} variant=\"contained\" onClick={\n                            (activeStep === 0) ? getEncryptionKey : initializeDeb0x\n                        }>\n                            {activeStep === steps.length - 1 ? 'Initialize' : 'Provide'}\n                        </LoadingButton>\n                    </Box>\n                </Fragment>\n                }\n            </Box>\n        </>\n    );\n}\n","import { useState, useEffect } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport Deb0x from \"../../ethereum/deb0x\"\nimport {\n    Tooltip, List, ListItem, ListItemText, ListItemButton, Typography, Box, \n    CircularProgress,\n    Modal\n} from '@mui/material';\nimport Stepper from './Stepper'\nimport IconButton from \"@mui/material/IconButton\";\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\nimport Pagination from \"@mui/material/Pagination\";\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport MailOutlineIcon from '@mui/icons-material/MailOutline';\nimport axios from 'axios';\nimport formatAccountName from \"../Common/AccountName\";\nimport \"../../componentsStyling/decrypt.scss\"\nimport { Add } from '@mui/icons-material';\n\nconst deb0xAddress = \"0x13dA6EDcdD7F488AF56D0804dFF54Eb17f41Cc61\"\n\nexport function Decrypt(props: any): any {\n    const { account, library } = useWeb3React()\n    const [loading, setLoading] = useState(true)\n    const [encryptionKeyInitialized, setEncryptionKeyInitialized] = \n        useState<boolean|undefined>(undefined);\n    const [decrypted, setDecrypted] = useState<any>();\n\n    useEffect(() => {\n        setLoading(true)\n        getPublicEncryptionKey()\n    }, [account]);\n\n    const getPublicEncryptionKey = async () => {\n        const deb0xContract = Deb0x(library, deb0xAddress)\n        const key = await deb0xContract.getKey(account)\n        const initialized = (key != '') ? true : false\n        setEncryptionKeyInitialized(initialized)\n    }\n\n    async function decrypt(encryptedMessage: any) {\n        try {\n            const decryptedMessage = await library.provider.request({\n                method: 'eth_decrypt',\n                params: [encryptedMessage, account],\n            });\n            return decryptedMessage\n        } catch (error) {\n            return undefined\n        }\n    }\n\n    async function fetchMessage(message: any) {\n        return await axios.get(`https://ipfs.io/ipfs/${message}`)\n    }\n\n    function Message(props: any) {\n        const encryptMessage = props.message.fetchedMessage.data\n        const [message, setMessage] =\n            useState(props.message.fetchedMessage.data)\n        const [ensName,setEnsName] = useState(\"\");\n        //const [sender, setSender] = useState(props.messsage.sender)\n        const [messageTime, setMessageTime] = useState(\"Mar 17, 18:36\")\n        const [isDecrypted, setIsDecrypted] = useState(false);\n        const [open, setOpen] = useState(false);\n        const handleOpen = () => setOpen(true);\n        const handleClose = () => setOpen(false);\n        const initial = [{\n            name: \"Tudor\",\n            address: \"0x845A1a2e29095c469e755456AA49b09D366F0bEB\"\n        }];\n        const [contacts, setContacts] = useState<any>(JSON.parse(localStorage.getItem('contacts') || '{}'));\n        let temp: any[] = [];\n\n        useEffect(()=>{\n            checkENS();\n        },[])\n\n        useEffect(()=>{\n            if(props.index !== props.previousIndex && isDecrypted===true){\n                hideMessage();\n            }\n\n        },[props.previousIndex])\n\n\n        async function checkENS() {\n            let name = await library.lookupAddress(props.message.sender);\n            if(name !== null) {   \n                setEnsName(name);\n            }\n        }\n\n        async function decryptMessage() {\n            const decryptedMessage = await decrypt(message)\n            if(decryptedMessage) {\n                setIsDecrypted(false);\n                setMessage(decryptedMessage);\n                setIsDecrypted(true);\n                props.setPreviousIndex(props.index);\n            }\n        }\n\n        async function hideMessage() {\n            setMessage(encryptMessage);\n            setIsDecrypted(false);\n        }\n\n\n        const addContact = () => {\n            console.log(\"CONTACTS1\", contacts)\n            // setContacts({\n            //     [props.index]: props.message.sender\n            // })\n\n\n            temp[temp.length+1] = {\"Test\": props.message.sender}\n\n            // temp.push({\"test\": props.message.sender})\n\n            setContacts([...contacts, {\"test\": props.message.sender}])\n            setOpen(false);\n\n        }\n\n        useEffect(() => {\n            console.log(\"CONTACTS2\", contacts)\n\n            localStorage.setItem('contacts', JSON.stringify(contacts));\n        }, [contacts]);\n\n        useEffect(() => {\n            const items = JSON.parse(localStorage.getItem('contacts') || '{}');\n            // if (items) {\n            //     setContacts(items);\n            // }\n        }, []);\n\n        return (\n            <ListItem sx ={{border:1, marginBottom:1}} \n                disablePadding \n                key={props.index}    \n                secondaryAction={ \n                    <IconButton className={`${\n                            (message !== props.message.fetchedMessage.data) ? \n                            \"list-item-btn\" : \"\"}`\n                        }  \n                        onClick={()=>{hideMessage()}}  \n                        edge=\"end\" \n                        aria-label=\"comments\">\n                        { (message !== props.message.fetchedMessage.data) ? \n                            <VisibilityOffIcon className='visibility-icon' /> : null\n                        }\n                    </IconButton>  \n                }\n                className=\"messages-list-item\">\n                <Tooltip \n                    title={(message === props.message.fetchedMessage.data) ? \n                    \"Click to decrypt\" : `Sender:${props.message.sender}`} \n                    placement=\"right\">\n                    <ListItemButton \n                        className={`list-item-button ${isDecrypted ? \"active\" : \"\"}` }\n                        onClick={() => {\n                            if(message === props.message.fetchedMessage.data) {\n                                decryptMessage()\n                            }\n                        }}>\n                        <ListItemText primary={\n                            <>\n                                <div className=\"message-left\">\n                                    <div className=\"message-heading\">\n                                        <p><strong>\n                                            {ensName !== \"\" ? ensName : formatAccountName(props.message.sender)}\n                                        </strong></p>\n                                        <p className=\"time-stamp\"><small>\n                                            {messageTime}\n                                        </small></p>\n                                    </div>\n                                    <p className=\"message message-overflow\"\n                                        dangerouslySetInnerHTML={{ __html: message }} />\n                                </div>\n                                {isDecrypted ? \n                                    <div className=\"message-right\">\n                                        <div className=\"message-heading\">\n                                            <div className=\"address\">\n                                                <p>From: \n                                                    <strong>\n                                                        {ensName !== \"\" ? \n                                                            ensName : \n                                                            formatAccountName(\n                                                                props.message.sender\n                                                            )\n                                                        }\n                                                    </strong>\n                                                </p>\n                                                <IconButton onClick={handleOpen}>\n                                                    <Add />\n                                                </IconButton>\n                                                <Modal\n                                                    open={open}\n                                                    onClose={handleClose}\n                                                    aria-labelledby=\"modal-modal-title\"\n                                                    aria-describedby=\"modal-modal-description\"\n                                                >\n                                                    <Box className=\"modal-box\">\n                                                        <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\n                                                            Text in a modal\n                                                        </Typography>\n                                                        <Typography id=\"modal-modal-description\" sx={{ mt: 2 }}>\n                                                            Duis mollis, est non commodo luctus, nisi erat porttitor ligula.\n                                                        </Typography>\n                                                        <button type=\"button\" onClick={addContact}>\n                                                            Add Contact\n                                                        </button>\n                                                    </Box>\n                                                </Modal>\n                                            </div>\n                                            \n                                            <p className=\"time-stamp\"><small>\n                                                {messageTime}\n                                            </small></p>\n                                        </div>\n                                        <p className=\"message\" \n                                            dangerouslySetInnerHTML={{ __html: message }} />\n                                    </div> : \n                                    <></> \n                                }\n                            </> \n                        }/>\n                    </ListItemButton>\n                </Tooltip>\n            </ListItem>\n        )\n    }\n\n    function GetMessages() {\n        const [fetchedMessages, setFetchedMessages] = useState<any>([])\n        const [previousIndex, setPreviousIndex] = useState<number>();\n\n        useEffect(() => {\n            processMessages()\n        }, []);\n\n\n\n        async function processMessages() {\n            const deb0xContract = Deb0x(library, deb0xAddress)\n            const senderAddresses = \n                await deb0xContract.fetchMessageSenders(account)\n            const cidsPromises = \n                senderAddresses.map(async function(sender:any) {\n                    return { \n                        cids: await deb0xContract.fetchMessages(account, sender),\n                        sender: sender\n                    }\n                })\n\n            const cids = await Promise.all(cidsPromises)\n\n            const encryptedMessagesPromisesArray = \n                cids.map(async function(cidArray: any) {\n                    const encryptedMessagesPromises = \n                        cidArray.cids.map(async function (cid: any) {\n                            return { \n                                fetchedMessage: await fetchMessage(cid),\n                                sender: cidArray.sender\n                            }\n                        })\n                    const promise = await Promise.all(encryptedMessagesPromises)\n\n                    return promise\n                })\n\n            const encryptedMessages = \n                await Promise.all(encryptedMessagesPromisesArray)\n            \n            setFetchedMessages(encryptedMessages.flat())\n            setLoading(false)\n\n        }\n\n        if(!loading) {\n            if (fetchedMessages.length === 0) {\n                return (\n                    <div className=\"message-placeholder\">\n                        <MailOutlineIcon />\n                        <Typography variant=\"h5\"\n                            gutterBottom\n                            component=\"div\"\n                            sx={{marginLeft: .8, marginTop: 3}}>\n                            No messages yet.\n                        </Typography>\n                    </div>\n                )\n            } else {\n                return (\n                    <Box sx={{ width: '100%', maxWidth: 1080, margin: '0 auto'}}>\n                        <div className=\"row messages-list\">\n                            <List className=\"col-md-3 col-sm-12\">\n                                {fetchedMessages.map((message: any, i: any) => {\n                                    return (\n                                        <Message message={message} index={i} \n                                            key={i} previousIndex={previousIndex} \n                                            setPreviousIndex={setPreviousIndex} />\n                                    )\n                                })}\n                            </List>\n                            <Box className=\"intro-box col-md-9\">\n                                <div>\n                                    <h2>What is Lorem Ipsum?</h2>\n                                    <p>\n                                        <strong>Lorem Ipsum</strong> \n                                        is simply dummy text of the printing and typesetting industry. \n                                        Lorem Ipsum has been the industry's standard dummy text ever \n                                        since the 1500s, when an unknown printer took a galley of \n                                        type and scrambled it to make a type specimen book. It has \n                                        survived not only five centuries, but also the leap into \n                                        electronic typesetting, remaining essentially unchanged. \n                                        It was popularised in the 1960s with the release of Letraset \n                                        sheets containing Lorem Ipsum passages, and more recently \n                                        with desktop publishing software like Aldus PageMaker \n                                        including versions of Lorem Ipsum.\n                                    </p>\n                                    <div id=\"lipsum\">\n                                        <ul>\n                                            <li>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</li>\n                                            <li>Ut hendrerit eros sit amet nibh vehicula, non commodo nibh imperdiet.</li>\n                                            <li>Sed bibendum augue a tortor fringilla viverra.</li>\n                                            <li>Sed lobortis urna et dapibus lobortis.</li>\n                                            <li>Aenean lacinia neque tincidunt sapien aliquet, in efficitur orci ornare.</li>\n                                            <li>Integer ultrices mi interdum elit porta, eget auctor leo auctor.</li>\n                                            <li>Praesent sodales urna quis quam molestie pulvinar.</li>\n                                            <li>Duis sagittis neque porttitor, mollis tortor dignissim, suscipit felis.</li>\n                                            <li>Donec at dui eget elit congue consectetur ac quis erat.</li>\n                                        </ul>\n                                    </div>\n                                </div>\n                            </Box>\n                        </div>\n                    </Box>\n                )\n            }\n        } else {\n            return (\n                <div className=\"spinner\">\n                    <CircularProgress/>\n                </div>\n            )\n        }\n    }\n    \n    if (encryptionKeyInitialized === true) {\n        return (\n            <div>\n                <Box>\n                    <Box className=\"pagination\" sx={{display:\"flex\"}}>\n                        <Pagination count={1} showFirstButton showLastButton />\n                        <IconButton size=\"large\" onClick={()=> setLoading(true) }>\n                            <RefreshIcon fontSize=\"large\"/>\n                        </IconButton>\n                    </Box>\n                    <Box>\n                        <GetMessages />\n                    </Box>\n                </Box>\n            </div>\n        )\n    } else if (encryptionKeyInitialized === false) {\n        return (\n            <Stepper onDeboxInitialization={getPublicEncryptionKey}/>\n        )\n    } else {\n        return(\n            <div className=\"spinner\">\n                <CircularProgress/>\n            </div>\n        )\n    }\n}","import { useState, useEffect } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport {\n    Card, CardActions, CardContent, Button, Grid,\n    Typography, TextField, Divider,Box\n} from '@mui/material';\n\nimport ToggleButton from '@mui/material/ToggleButton';\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport Deb0x from \"../../ethereum/deb0x\"\nimport Deb0xERC20 from \"../../ethereum/deb0xerc20\"\nimport SnackbarNotification from './Snackbar';\nimport { ethers } from \"ethers\";\nimport \"../../componentsStyling/stake.scss\";\n\nconst deb0xAddress = \"0x13dA6EDcdD7F488AF56D0804dFF54Eb17f41Cc61\"\nconst deb0xERC20Address = \"0xEde2f177d6Ae8330860B6b37B2F3D767cd2630fe\"\n\nexport function Stake(props: any): any {\n    const { account, library } = useWeb3React()\n    const [notificationState, setNotificationState] = useState({})\n\n    useEffect(() => {\n        console.log(\"stake component effect\")\n    });\n    \n    function RewardsPanel() {\n\n        const [rewardsUnclaimed, setRewardsUnclaimed] = useState(\"\")\n        const [feeSharePercentage, setFeeSharePercentage] = useState(\"\")\n        const [loading, setLoading] = useState(false)\n\n        useEffect(() => {\n            console.log(\"rewards effect\")\n            rewardsAccrued()\n        }, [rewardsUnclaimed]);\n\n        useEffect(() => {\n            console.log(\"fee share effect\")\n            feeShare()\n        }, [feeSharePercentage]);\n\n        async function rewardsAccrued() {\n            const deb0xContract = await Deb0x(library, deb0xAddress)\n\n            const unclaimedRewards = await deb0xContract.earnedNative(account);\n\n            setRewardsUnclaimed(ethers.utils.formatEther(unclaimedRewards))\n        }\n\n        async function feeShare() {\n            console.log(\"aicii\")\n            const deb0xContract = await Deb0x(library, deb0xAddress)\n            console.log(\"1\")\n            \n            let balance = parseFloat((ethers.utils.formatEther((await deb0xContract.balanceERC20(account)) )) )\n            console.log(balance + \" balance\")\n            \n            let totalSupply = parseFloat((ethers.utils.formatEther((await deb0xContract.totalSupply())) ))\n            console.log(totalSupply + \" totalSupply\")\n            const feeShare = balance * 100 / totalSupply\n            console.log(feeShare + \" feeShare\")\n            setFeeSharePercentage(((Math.round(feeShare * 100) / 100).toFixed(2)).toString() + \"%\")\n        }\n\n        async function claimRewards() {\n            setLoading(true)\n\n            const signer = await library.getSigner(0)\n\n            const deb0xContract = Deb0x(signer, deb0xAddress)\n\n            try {\n                const tx = await deb0xContract.getRewardNative()\n\n                tx.wait()\n                    .then((result: any) => {\n                        setNotificationState({\n                            message: \"You succesfully claimed your rewards.\", open: true,\n                            severity: \"success\"\n                        })\n                        //setLoading(false)\n\n                    })\n                    .catch((error: any) => {\n                        setNotificationState({\n                            message: \"Rewards couldn't be claimed!\", open: true,\n                            severity: \"error\"\n                        })\n                        setLoading(false)\n                    })\n            } catch (error: any) {\n                setNotificationState({\n                    message: \"You rejected the transaction. Your rewards haven't been claimed.\", open: true,\n                    severity: \"info\"\n                })\n            }\n\n\n        }\n\n        return (\n            <Card variant=\"outlined\" className=\"card-container\">\n                <CardContent>\n                    <Typography variant=\"h4\" component=\"div\">\n                        REWARDS\n                    </Typography>\n                    <Divider className=\"divider-pink\" />\n                    <Typography>\n                        Your unclaimed rewards:\n                    </Typography>\n                    <Typography variant=\"h6\">\n                        <strong>{rewardsUnclaimed}</strong>\n                    </Typography>\n                    <Divider className=\"divider-pink\" />\n                    <Typography>\n                        Your share from fees:\n                    </Typography>\n                    <Typography variant=\"h6\">\n                        <strong>{feeSharePercentage}</strong>\n                    </Typography>\n                    <Divider className=\"divider-pink\" />\n                </CardContent>\n                <CardActions>\n                    <LoadingButton className=\"submit-btn\" loading={loading} variant=\"contained\" onClick={claimRewards}>Collect</LoadingButton>\n                </CardActions>\n            </Card>\n        )\n    }\n\n\n\n    function StakeUnstake() {\n        const [alignment, setAlignment] = useState(\"stake\");\n\n        const [userStakedAmount, setUserStakedAmount] = useState(\"\")\n        const [userUnstakedAmount, setUserUnstakedAmount] = useState(\"\")\n        const [totalStaked, setTotalStaked] = useState(\"\")\n        const [amountToUnstake, setAmountToUnstake] = useState(\"\")\n        const [amountToStake, setAmountToStake] = useState(\"\")\n        const [loading, setLoading] = useState(false)\n        const [approved, setApproved] = useState<Boolean | null>(false)\n\n        const handleChange = (\n            event: React.MouseEvent<HTMLElement>,\n            newAlignment: string,\n        ) => {\n            setAlignment(newAlignment);\n        };\n\n       \n\n        useEffect(() => {\n            console.log(\"user staked effect\")\n            setStakedAmount()\n        }, [userStakedAmount]);\n\n        useEffect(() => {\n            console.log(\"total staked effect\")\n            totalAmountStaked()\n        }, [totalStaked]);\n\n        useEffect(() => {\n            console.log(\"user unstaked effect\")\n            setUnstakedAmount()\n        }, [userUnstakedAmount]);\n\n        useEffect(() => {\n            console.log(\"approval effect\")\n            setApproval()\n        }, [approved]);\n\n        async function setStakedAmount() {\n\n            const deb0xContract = await Deb0x(library, deb0xAddress)\n\n            const balance = await deb0xContract.balanceERC20(account)\n\n            setUserStakedAmount(ethers.utils.formatEther(balance))\n        }\n\n        async function setUnstakedAmount() {\n            const deb0xERC20Contract = await Deb0xERC20(library, deb0xERC20Address)\n\n            const balance = await deb0xERC20Contract.balanceOf(account)\n\n            setUserUnstakedAmount(ethers.utils.formatEther(balance))\n        }\n\n        async function setApproval() {\n            const deb0xERC20Contract = await Deb0xERC20(library, deb0xERC20Address)\n\n            const allowance = await deb0xERC20Contract.allowance(account, deb0xAddress)\n\n            allowance > 0 ? setApproved(true) : setApproved(false)\n        }\n\n        async function totalAmountStaked() {\n\n            const deb0xContract = await Deb0x(library, deb0xAddress)\n\n            const totalSupply = await deb0xContract.totalSupply()\n\n            setTotalStaked(ethers.utils.formatEther(totalSupply))\n        }\n\n        async function approveStaking() {\n            setLoading(true)\n\n            const signer = await library.getSigner(0)\n\n            const deb0xERC20Contract = await Deb0xERC20(signer, deb0xERC20Address)\n\n            try {\n                const tx = await deb0xERC20Contract.approve(deb0xAddress, ethers.utils.parseEther(\"1000000\"))\n\n                tx.wait()\n                    .then((result: any) => {\n                        setNotificationState({\n                            message: \"Your succesfully approved contract for staking.\", open: true,\n                            severity: \"success\"\n                        })\n                        setLoading(false)\n\n                    })\n                    .catch((error: any) => {\n                        setNotificationState({\n                            message: \"Contract couldn't be approved for staking!\", open: true,\n                            severity: \"error\"\n                        })\n                        setLoading(false)\n                    })\n            } catch (error) {\n                setNotificationState({\n                    message: \"You rejected the transaction. Contract hasn't been approved for staking.\", open: true,\n                    severity: \"info\"\n                })\n                setLoading(false)\n            }\n        }\n\n        async function unstake() {\n            setLoading(true)\n\n            const signer = await library.getSigner(0)\n\n            const deb0xContract = Deb0x(signer, deb0xAddress)\n\n            try {\n                const tx = await deb0xContract.unStakeERC20(ethers.utils.parseEther(amountToUnstake.toString()))\n\n                tx.wait()\n                    .then((result: any) => {\n                        setNotificationState({\n                            message: \"Your tokens were succesfully unstaked.\", open: true,\n                            severity: \"success\"\n                        })\n                        setLoading(false)\n\n                    })\n                    .catch((error: any) => {\n                        setLoading(false)\n                        setNotificationState({\n                            message: \"Your tokens couldn't be unstaked!\", open: true,\n                            severity: \"error\"\n                        })\n\n                    })\n\n            } catch (error: any) {\n                setNotificationState({\n                    message: \"You rejected the transaction. Your tokens haven't been unstaked.\", open: true,\n                    severity: \"info\"\n                })\n                setLoading(false)\n            }\n        }\n\n        async function stake() {\n            setLoading(true)\n\n            const signer = await library.getSigner(0)\n\n            const deb0xContract = Deb0x(signer, deb0xAddress)\n\n            try {\n                const tx = await deb0xContract.stakeERC20(ethers.utils.parseEther(amountToStake.toString()))\n\n                tx.wait()\n                    .then((result: any) => {\n                        setNotificationState({\n                            message: \"Your tokens were succesfully staked.\", open: true,\n                            severity: \"success\"\n                        })\n                        //setLoading(false)\n\n                    })\n                    .catch((error: any) => {\n                        setNotificationState({\n                            message: \"Your tokens couldn't be staked!\", open: true,\n                            severity: \"error\"\n                        })\n                        setLoading(false)\n                    })\n\n            } catch (error: any) {\n                setNotificationState({\n                    message: \"You rejected the transaction. Your tokens haven't been staked.\", open: true,\n                    severity: \"info\"\n                })\n                setLoading(false)\n            }\n        }\n\n        return (\n            <Card variant = \"outlined\" className=\"card-container\">\n                <ToggleButtonGroup\n                    color=\"primary\"\n                    value={alignment}\n                    exclusive\n                    onChange={handleChange}\n                    className=\"tab-container\"\n                >\n                    <ToggleButton className=\"tab-btn\" value=\"stake\">Stake</ToggleButton>\n                    <ToggleButton className=\"tab-btn\" value=\"unstake\">Unstake</ToggleButton>\n\n                </ToggleButtonGroup>\n              \n            {\n                alignment === \"stake\" ?\n                \n                <>\n                <CardContent>\n                    <Typography>\n                        Your staked amount:\n                    </Typography>\n                    <Typography variant=\"h6\">\n                        <strong>{userStakedAmount} DBX</strong>\n                    </Typography>\n                    <Divider className=\"divider-pink\" />\n                    <Typography>\n                        Your tokens in wallet:\n                    </Typography>\n                    <Typography variant=\"h6\">\n                        <strong>{userUnstakedAmount} DBX</strong>\n                    </Typography>\n                    {approved && <Grid className=\"amount-row\" container spacing={2}>\n                        <Grid item>\n                            <TextField id=\"outlined-basic\"\n                                label=\"Amount to stake\"\n                                variant=\"outlined\"\n                                type=\"number\"\n                                value={amountToStake}\n                                onChange={e => setAmountToStake(e.target.value)} />\n                        </Grid>\n                        <Grid className=\"max-btn-container\" item>\n                            <Button className=\"max-btn\" \n                                size=\"small\" variant=\"contained\" color=\"error\" \n                               onClick = {()=>setAmountToStake(userUnstakedAmount)  }>\n                                max\n                            </Button>\n                        </Grid>\n                    </Grid>}\n                </CardContent>\n                <CardActions>\n                    {approved && <LoadingButton disabled={!amountToStake} className=\"submit-btn\" loading={loading} variant=\"contained\" onClick={stake}>Stake</LoadingButton>}\n                    {!approved && <LoadingButton className=\"submit-btn\" loading={loading} variant=\"contained\" onClick={approveStaking}>Approve Staking</LoadingButton>}\n                </CardActions>\n                </>\n                : \n\n                <>\n                <CardContent>\n                    \n                    <Typography>\n                        Your staked amount:\n                    </Typography>\n                    <Typography variant=\"h6\">\n                        <strong>{userStakedAmount} DBX</strong>\n                    </Typography>\n                    <Divider className=\"divider-pink\" />\n\n                    <Typography>\n                        Your tokens in wallet:\n                    </Typography>\n                    <Typography variant=\"h6\">\n                        <strong>{userUnstakedAmount} DBX</strong>\n                    </Typography>\n                  \n\n                    <Grid className=\"amount-row\" container spacing={2}>\n                        <Grid item>\n                            <TextField value={amountToUnstake}\n                                id=\"outlined-basic\"\n                                label=\"Amount to unstake\"\n                                variant=\"outlined\"\n                                onChange={e => setAmountToUnstake(e.target.value)}\n                                type=\"number\" />\n                        </Grid>\n                        <Grid className=\"max-btn-container\" item>\n                            <Button className=\"max-btn\"\n                                size=\"small\" variant=\"contained\" color=\"error\" \n                                onClick = {()=>setAmountToUnstake(userStakedAmount)  }>\n                                max\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </CardContent>\n                <CardActions>\n                    <LoadingButton className=\"submit-btn\" disabled={!amountToUnstake} loading={loading} variant=\"contained\" onClick={unstake}>Unstake</LoadingButton>\n                </CardActions>\n                </>\n            }\n\n            </Card>\n\n        )\n    }\n\n    function TotalStaked() {\n        const [totalStaked, setTotalStaked] = useState(\"\")\n        useEffect(() => {\n            console.log(\"total staked effect\")\n            totalAmountStaked()\n        }, [totalStaked]);\n    \n        async function totalAmountStaked() {\n    \n            const deb0xContract = await Deb0x(library, deb0xAddress)\n    \n            const totalSupply = await deb0xContract.totalSupply()\n    \n            setTotalStaked(ethers.utils.formatEther(totalSupply))\n        }\n\n        return (\n            <Card className=\"heading-card\">\n                <CardContent>\n                    <Typography variant=\"h5\">\n                        Total tokens staked: {totalStaked} DBX\n                    </Typography>\n                </CardContent>\n            </Card>\n        )\n    }\n\n    return (\n        <>\n            <SnackbarNotification state={notificationState} setNotificationState={setNotificationState} />\n            <Box className=\"container\">\n                <div>\n                    <TotalStaked/>\n                </div>\n                <div className=\"cards-grid\">\n                    <div className='row'>\n                        <Grid item className=\"col col-md-6\">\n                            <StakeUnstake/>\n                        </Grid>\n                        <Grid item className=\"col col-md-6\">\n                            <RewardsPanel />\n                        </Grid>\n                    </div>\n                </div>\n            </Box>\n        </>\n    )\n}","export default __webpack_public_path__ + \"static/media/empty.efc45323.png\";","import { useState, useEffect } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport Deb0x from \"../../ethereum/deb0x\"\nimport {\n    Tooltip, List, ListItem, Chip,\n    ListItemText, ListItemButton, Typography, Box, CircularProgress, Stack\n} from '@mui/material';\nimport Stepper from './Stepper'\nimport { border } from '@mui/system';\nimport IconButton from \"@mui/material/IconButton\";\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\nimport Pagination from \"@mui/material/Pagination\";\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport Refresh from '@mui/icons-material/Refresh';\nimport Button from \"@mui/material/Button\";\nimport MailOutlineIcon from '@mui/icons-material/MailOutline';\nimport '../../componentsStyling/decrypt.scss';\nimport empty from '../../photos/empty.png';\n\nconst axios = require('axios')\nconst deb0xAddress = \"0x13dA6EDcdD7F488AF56D0804dFF54Eb17f41Cc61\"\n\nexport function Sent(props: any): any {\n    const { account, library } = useWeb3React()\n    const [loading, setLoading] = useState(true)\n    const [encryptionKeyInitialized, setEncryptionKeyInitialized] = useState<boolean|undefined>(undefined)\n\n\n    useEffect(() => {\n        console.log(\"useEffect\")\n        setLoading(true)\n        getPublicEncryptionKey()\n    }, [account]);\n\n    const getPublicEncryptionKey = async () => {\n        const deb0xContract = Deb0x(library, deb0xAddress)\n        const key = await deb0xContract.getKey(account)\n        const initialized = (key != '') ? true : false\n        setEncryptionKeyInitialized(initialized)\n    }\n\n    \n\n    async function decrypt(encryptedMessage: any) {\n        try {\n            const decryptedMessage = await library.provider.request({\n                method: 'eth_decrypt',\n                params: [encryptedMessage, account],\n            });\n            return decryptedMessage\n        } catch (error) {\n            return undefined\n        }\n    }\n\n    async function fetchMessage(message: any) {\n        return await axios.get(`https://ipfs.io/ipfs/${message}`)\n    }\n\n    function Message(props: any) {\n        const encryptMessage = props.message.fetchedMessage.data\n        const [message, setMessage] = useState(props.message.fetchedMessage.data)\n        const [recipients, setRecipients] = useState<string[]>([]);\n        //const [sender, setSender] = useState(props.messsage.sender)\n        const [messageTime,setMessageTime] = useState(\"Mar 17, 18:36\")\n        const [isDecrypted, setIsDecrypted] = useState(false);\n\n        useEffect(()=> {\n            checkENS();\n        },[])\n\n        useEffect(()=>{\n            if(props.index !== props.previousIndex && isDecrypted===true){\n                hideMessage();\n            }\n\n        },[props.previousIndex])\n\n        async function checkENS(){\n            let recipientsTemp:any = []\n            const recipientsFiltered = props.message.recipients.filter((recipient:any) => recipient != account)\n\n            for(let recipient of recipientsFiltered) {\n                let name = await library.lookupAddress(recipient);\n                if(name !== null)\n                {   \n                    console.log(\"not null\")\n                    recipientsTemp = [...recipientsTemp, name];\n                } else {\n                    recipientsTemp = [...recipientsTemp, `${recipient.substring(0, 5)}...${recipient.substring(recipient.length - 4)}`];\n                }\n            }\n            \n            setRecipients(recipientsTemp)\n        }\n\n        async function decryptMessage() {\n            const decryptedMessage = await decrypt(message)\n            if(decryptedMessage) {\n                setIsDecrypted(false);\n                setMessage(decryptedMessage);\n                setIsDecrypted(true);\n                props.setPreviousIndex(props.index);\n            }\n        }\n\n        async function hideMessage(){\n            setMessage(encryptMessage);\n            setIsDecrypted(false);\n        }\n\n\n    \n        return (\n            <ListItem sx ={{border:1, marginBottom:1}} disablePadding key={props.index}    secondaryAction={ \n                <IconButton className={`${(message != props.message.fetchedMessage.data) ? \"list-item-btn\" : \"\"}`}  \n                        onClick={()=>{hideMessage()}}  edge=\"end\" aria-label=\"comments\">\n                    { (message != props.message.fetchedMessage.data) ? <VisibilityOffIcon  />: null}\n                </IconButton>  \n            }\n                className=\"messages-list-item\"\n            >\n                <Tooltip \n                    title={(message === props.message.fetchedMessage.data) ? \n                    \"Click to decrypt\" : `Sender:${props.message.sender}`} \n                    placement=\"right\">\n                    <ListItemButton className=\"list-item-button\"\n                        onClick={() => {\n                            if(message === props.message.fetchedMessage.data) {\n                                decryptMessage()\n                            }\n                        }}>\n                        <div>\n\n                        </div>\n                        <ListItemText\n                        primary={\n                        <>\n                            <div className=\"message-left\">\n                                <div className=\"message-heading\">\n                                    <p><small>To: </small></p>\n                                        <Stack direction=\"row\" spacing={1}>\n                                            {\n                                                recipients.map((recipient: any) => {\n                                                    console.log(recipients)\n                                                    return (\n                                                        <Chip\n                                                            key={recipient}\n                                                            color=\"primary\"\n                                                            label={recipient}\n                                                            variant=\"outlined\"\n                                                        />\n                                                    )\n                                                })\n                                            }\n                                        </Stack>\n                                    <p><small>{messageTime}</small></p>\n                                </div>\n                                <p className={`message \n                                        ${message === props.message.fetchedMessage.data ? \n                                        \"message-overflow\" : \"\"}` }\n                                    dangerouslySetInnerHTML={{ __html: message }}>\n                                </p>\n                            </div>\n                            {isDecrypted ? \n                                <div className=\"message-right\">\n                                    <div className=\"message-heading\">\n                                        <p><small>To: </small></p>\n                                            <Stack direction=\"row\" spacing={1}>\n                                                {\n                                                    recipients.map((recipient: any) => {\n                                                        console.log(recipients)\n                                                        return (\n                                                            <Chip\n                                                                key={recipient}\n                                                                color=\"primary\"\n                                                                label={recipient}\n                                                                variant=\"outlined\"\n                                                            />\n                                                        )\n                                                    })\n                                                }\n                                            </Stack>\n                                        <p><small>{messageTime}</small></p>\n                                    </div>\n                                    <p className={`message ${message === props.message.fetchedMessage.data ? \"message-overflow\" : \"\"}` }\n                                        dangerouslySetInnerHTML={{ __html: message }}>\n                                    </p>\n                                </div> : <></>}\n                        </>\n                        \n                        }/>\n                         \n                    </ListItemButton>\n                </Tooltip>\n            </ListItem>\n            )\n    }\n\n    function GetMessages() {\n        const [fetchedMessages, setFetchedMessages] = useState<any>([]);\n        const [previousIndex,setPreviousIndex] = useState<number>();\n\n        useEffect(() => {\n            processMessages()\n        }, []);\n\n        async function processMessages() {\n            const deb0xContract = Deb0x(library, deb0xAddress)\n            \n            const sentMessages = await deb0xContract.fetchSentMessages(account)   \n            console.log(sentMessages)\n\n            const sentMessagesRetrieved = sentMessages.map(async function (item: any) {\n                return { fetchedMessage: await fetchMessage(item.cid), recipients: item.recipients}\n            })\n\n            const messages = await Promise.all(sentMessagesRetrieved)\n\n            setFetchedMessages(messages)\n            setLoading(false)\n        }\n\n        if(!loading) {\n            if (fetchedMessages.length == 0) {\n                return (\n                    <>\n                        <div className=\"message-placeholder\">\n                            <MailOutlineIcon />\n                            <Typography variant=\"h5\"\n                                gutterBottom\n                                component=\"div\"\n                                sx={{marginLeft: .8, marginTop: 3}}\n                            >\n                                No messages yet.\n                            </Typography>\n                        </div>\n                    </>\n                )\n            } else {\n                return (\n                    <Box sx={{ width: '100%', maxWidth: 1080, margin: '0 auto'}}>\n                        <div className=\"row messages-list\">\n                            <List className=\"col-md-3 col-sm-12\">\n                                {fetchedMessages.map((message: any, i: any) => {\n                                    return (\n                                        <Message message={message} index={i} \n                                            key={i} previousIndex={previousIndex} \n                                            setPreviousIndex={setPreviousIndex} />\n                                    )\n                                })}\n                            </List>\n                            <Box className=\"intro-box sent col-md-9\">\n                                <div>\n                                    <img src={empty} />\n                                    <p>Open a message from the list to see the details.</p>\n                                </div>\n                            </Box>\n                        </div>\n                    </Box>\n                )\n            }\n        } else {\n            return (\n                <div className=\"spinner\">\n                    <CircularProgress/>\n                </div>\n            )\n        }\n\n    }\n    \n    if(encryptionKeyInitialized == true){\n        return (\n            // sx={{display:\"flex\"}}\n            <Box>\n                <Box className=\"pagination\" sx={{display:\"flex\"}}>\n                    <Pagination count={1} showFirstButton showLastButton />\n                    <IconButton size=\"large\" onClick={()=> setLoading(true) }>\n                        <RefreshIcon fontSize=\"large\"/>\n                    </IconButton>\n                </Box>\n                <Box>\n                    <GetMessages />\n                </Box>\n            </Box>\n           \n        )\n    } else if(encryptionKeyInitialized == false){\n        return (\n            <Stepper onDeboxInitialization={getPublicEncryptionKey}/>\n        )\n    } else{\n        return(\n            <div className=\"spinner\">\n                <CircularProgress/>\n            </div>\n        )\n    }\n}","import React, { useState, useEffect } from \"react\";\nimport ThemeContext, { initialThemeState } from \"./ThemeContext\";\n\ntype Props = {\n    children: JSX.Element|JSX.Element[],\n};\n\nconst ThemeProvider = ( { children }: Props ) => {\n  const [theme, setTheme] = useState<any>(initialThemeState.theme);\n\n  const localStorage = window.localStorage;\n\n  useEffect(() => {\n    const savedThemeLocal = localStorage.getItem(\"globalTheme\");\n\n    if (!!savedThemeLocal) {\n      setTheme(savedThemeLocal);\n    }\n  }, [localStorage]);\n\n  useEffect(() => {\n    localStorage.setItem(\"globalTheme\", theme);\n  }, [theme, localStorage]);\n\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme }}>\n      <div className={`theme--${theme}`}>{children}</div>\n    </ThemeContext.Provider>\n  );\n};\n\nexport default ThemeProvider;\n","import { useState, useEffect } from 'react';\nimport './App.css';\nimport { \n    Web3ReactProvider,\n    useWeb3React,\n    UnsupportedChainIdError\n} from '@web3-react/core';\nimport {\n  NoEthereumProviderError,\n  UserRejectedRequestError as UserRejectedRequestErrorInjected\n} from '@web3-react/injected-connector'\nimport { ethers } from \"ethers\";\nimport { useEagerConnect, useInactiveListener } from './hooks'\nimport { PermanentDrawer } from './components/App/PermanentDrawer'\n\nimport { encrypt } from '@metamask/eth-sig-util'\nimport Deb0x from \"./ethereum/deb0x\"\nimport { create } from 'ipfs-http-client'\nimport { Encrypt } from './components/App/Encrypt';\nimport { Decrypt } from './components/App/Decrypt';\nimport {Stake} from './components/App/Stake';\nimport { Governance } from './components/App/Governance';\nimport { Sent } from './components/App/Sent';\nimport {Container, Box,Typography, Fab} from '@mui/material';\nimport ThemeProvider from './components/Contexts/ThemeProvider';\nimport './index.scss';\nimport axios from 'axios';\nimport { injected, network } from './connectors';\nimport MailIcon from '@mui/icons-material/Mail';\n\nconst client = create({\n  host: 'ipfs.infura.io',\n  port: 5001,\n  protocol: 'http'\n})\n\nconst ethUtil = require('ethereumjs-util')\n//old address: 0x218c10BAb451BE6A897db102b2f608bC7D3441a0\n// 0x13dA6EDcdD7F488AF56D0804dFF54Eb17f41Cc61\nconst deb0xAddress = \"0x13dA6EDcdD7F488AF56D0804dFF54Eb17f41Cc61\";\n\n\nenum ConnectorNames { Injected = 'Injected', Network = 'Network' };\n\nconst connectorsByName: { [connectorName in ConnectorNames]: any } = {\n  [ConnectorNames.Injected]: injected,\n  [ConnectorNames.Network]: network\n}\n\nfunction getErrorMessage(error: Error) {\n  if (error instanceof NoEthereumProviderError) {\n    return 'No Ethereum browser extension detected, install MetaMask on desktop or visit from a dApp browser on mobile.'\n  } else if (error instanceof UnsupportedChainIdError) {\n    return \"You're connected to an unsupported network.\"\n  } else if (\n    error instanceof UserRejectedRequestErrorInjected\n  ) {\n    return 'Please authorize this website to access your Ethereum account.'\n  } else {\n    console.error(error)\n    return 'An unknown error occurred. Check the console for more details.'\n  }\n}\n\nfunction getLibrary(provider: any): ethers.providers.Web3Provider {\n  const library = new ethers.providers.Web3Provider(provider)\n  library.pollingInterval = 12000\n  return library\n}\n\nexport default function () {\n  return (\n    <Web3ReactProvider getLibrary={getLibrary}>\n      <App />\n    </Web3ReactProvider>\n  )\n}\n\nfunction App() {\n  const context = useWeb3React<ethers.providers.Web3Provider>()\n  const { connector, library, chainId, account, active, error } = context\n\n  // handle logic to recognize the connector currently being activated\n  const [activatingConnector, setActivatingConnector] = useState<any>()\n  const [selectedOption, setSelectedOption] = useState('Deb0x')\n  useEffect(() => {\n    if (activatingConnector && activatingConnector === connector) {\n      setActivatingConnector(undefined)\n    }\n  }, [activatingConnector, connector])\n\n  // handle logic to eagerly connect to the injected ethereum provider, if it exists and has granted access already\n  const triedEager = useEagerConnect()\n\n  // handle logic to connect in reaction to certain events on the injected ethereum provider, if it exists\n  useInactiveListener(!triedEager || !!activatingConnector)\n\n  function handleChange(newValue: any) {\n    setSelectedOption(newValue)\n  }\n\n  return (\n    <ThemeProvider>\n        <div className=\"app-container\">\n        <PermanentDrawer onChange={handleChange} />\n        \n        <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n            {!!error && \n                <p className='alert alert-danger position-fixed' style={{ marginTop: '4rem', marginBottom: '0' }}>\n                    {getErrorMessage(error)}\n                </p>\n            }\n        </div>\n\n        \n        {\n        account ? \n        !!(library && account) && (\n            <Box className=\"main-container\" sx={{marginTop: 12}}>\n                {selectedOption === \"Compose\" && <Encrypt />}\n                {selectedOption === \"Deb0x\" && <Decrypt account={account}/>}\n                {selectedOption === \"Stake\" && <Stake />}\n                {selectedOption === \"Sent\" && <Sent />}\n            </Box>\n        ):\n            <Box className=\"home-page-box\">\n                <Typography sx={{textAlign:\"center\",color:\"gray\"}} variant=\"h1\">\n                    The End To End Encrypted \n                    <br></br>\n                    Decentralized Email Protocol \n                    <br></br> \n                    Owned By Its Users\n                </Typography>\n                <Typography sx={{ mt:10,textAlign:\"center\"}} variant=\"h3\">\n                    Please connect your wallet\n                </Typography>\n            </Box>\n        }\n        </div>\n    </ThemeProvider>\n  )\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}