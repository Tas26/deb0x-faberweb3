// SPDX-License-Identifier: MIT
pragma solidity 0.8.11;

import "hardhat/console.sol";

contract StakingRewards {
    IERC20 public rewardsToken;
    IERC20 public stakingToken;

    uint public rewardRate = 100;
    uint public lastUpdateTime;
    uint public rewardPerTokenStored;

    mapping(address => uint) public userRewardPerTokenPaid;
    mapping(address => uint) public rewards;

    uint private _totalSupply;
    mapping(address => uint) private _balances;

    constructor(address _stakingToken, address _rewardsToken) {
        stakingToken = IERC20(_stakingToken);
        rewardsToken = IERC20(_rewardsToken);
    }

    function rewardPerToken() public view returns (uint) {
        if (_totalSupply == 0) {
            return 0;
        }
        return
            rewardPerTokenStored +
            (((block.timestamp - lastUpdateTime) * rewardRate * 1e18) / _totalSupply);
    }

    function earned(address account) public view returns (uint256) {
        console.log("earned (_balances[account] ", _balances[account]);
        console.log("earned rewardPerToken() ", rewardPerToken());
        console.log("earned userRewardPerTokenPaid[account] ", userRewardPerTokenPaid[account]);
        console.log("earned rewards[account] ", rewards[account]);
        uint256 rew= rewardPerToken() ;
        console.log("rew", rew);
        console.log("acc ",  userRewardPerTokenPaid[account]);
        // console.log("earned rewardPerToken() - userRewardPerTokenPaid[account]  ", rew - userRewardPerTokenPaid[account]);
       //console.log("earned rewardPerToken() - userRewardPerTokenPaid[account]  ", rewardPerToken() - userRewardPerTokenPaid[account]);
               console.log("b");
        // console.log("((_balances[account] * (rewardPerToken() - userRewardPerTokenPaid[account]))  ",  _balances[account] * (rewardPerToken() - userRewardPerTokenPaid[account]) );
        int256 x =((int(_balances[account]) * (int(rewardPerToken()) - int(userRewardPerTokenPaid[account]))) / 1e18) + int(rewards[account]);
        require(x >= 0, "calculus is under 0");
        //  console.log("earned = ",  ((_balances[account] *
        //         (rewardPerToken() - userRewardPerTokenPaid[account])) / 1e18) +
        //     rewards[account]);
         console.log("x ", uint256(x));
        return uint256(x);
           
    }

    modifier updateReward(address account) {
        console.log("updateReward 1");
        rewardPerTokenStored = rewardPerToken();
         console.log("updateReward 2");
        lastUpdateTime = block.timestamp;
         console.log("updateReward 3");
         console.log( rewards[account]);
        rewards[account] = earned(account);
         console.log("updateReward 4");
        userRewardPerTokenPaid[account] = rewardPerTokenStored;
         console.log("updateReward 5");
        _;
    }

    function stake(uint _amount) external updateReward(msg.sender) {
        _totalSupply += _amount;
        _balances[msg.sender] += _amount;
        stakingToken.transferFrom(msg.sender, address(this), _amount);
    }

    function withdraw(uint _amount) external updateReward(msg.sender) {
        _totalSupply -= _amount;
        _balances[msg.sender] -= _amount;
        stakingToken.transfer(msg.sender, _amount);
    }

    function getReward() external updateReward(msg.sender) {
        uint reward = rewards[msg.sender];
        rewards[msg.sender] = 0;
        rewardsToken.transfer(msg.sender, reward);
    }
}

interface IERC20 {
    function totalSupply() external view returns (uint);

    function balanceOf(address account) external view returns (uint);

    function transfer(address recipient, uint amount) external returns (bool);

    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint amount) external returns (bool);

    function transferFrom(
        address sender,
        address recipient,
        uint amount
    ) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint value);
    event Approval(address indexed owner, address indexed spender, uint value);
}
